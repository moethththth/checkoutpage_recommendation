/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./app_foundation_sfra/cartridge/client/default/js/checkout.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./app_foundation/cartridge/js/dtm.js":
/*!********************************************!*\
  !*** ./app_foundation/cartridge/js/dtm.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // remove special character.

var util = __webpack_require__(/*! ./util */ "./app_foundation/cartridge/js/util.js");

var eventNameVal = new Map();
var isCM = Resources.CURRENT_SITE.toLowerCase().indexOf('clubmonaco') > -1;
var analyticsEnabled = SitePreferences.ANALYTICS_ENABLED != undefined && SitePreferences.ANALYTICS_ENABLED;
var webcatsForCleaning = ['recommendation', 'recommendation/oos', 'recommendation/cart', 'wardrobe-recommendation', 'wardrobe-complementary', 'plp-recs', 'completethelook', 'minicart', 'breadcrumb', 'recently viewed', 'recently viewed plp', 'plp-recs', 'wishlist', 'nullsearch/recommendation', 'search/suggestion'];
var originalProductFindingMethod, originalCrossSellType, originalSKU;

function formatString(stringIn) {
  if (stringIn !== undefined && stringIn !== null) {
    var str = String(stringIn);
    return str !== undefined ? str.replace(/&/g, ' ').replace(/;/g, ' ').replace(/,/g, ' ').replace(/\+/g, ' ').replace(/%/g, ' ').replace(/@/g, ' ').replace(/#/g, ' ').replace(/!/g, ' ').replace(/\(/g, ' ').replace(/\)/g, ' ').replace(/\[/g, ' ').replace(/]/g, ' ').replace(/{/g, ' ').replace(/}/g, ' ').replace(/=/g, ' ').replace(/\*/g, ' ').replace(/\^/g, ' ').replace(/-/g, ' ').replace(/\$/g, ' ').replace(/\*/g, ' ').replace(/\|/g, '/').replace(/"/g, '').replace(/'/g, ' ') : '';
  } else {
    return '';
  }
}

function getParameterByName(name, url) {
  name = name.replace(/[\[\]]/g, '\\$&');
  var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
      results = regex.exec(url);
  if (!results) return null;
  if (!results[2]) return '';
  return decodeURIComponent(results[2].replace(/\+/g, ' '));
}

function eventNamevalue(eventName) {
  var val = eventNameVal.get(eventName);

  if (val == undefined) {
    eventNameVal.set(eventName, new Number(1));
  } else {
    eventNameVal.set(eventName, new Number(val + 1));
  }

  return eventName + eventNameVal.get(eventName);
}

function emialSignUp(signUpLocation) {
  if (!analyticsEnabled) {
    return;
  }

  var user = digitalData.user;
  var pageNameVal = formatString(digitalData.page.pageName);
  var digitalDataEmail = {};
  var eventInfoName = {
    eventName: eventNamevalue('emailSignup') //static value

  };
  var eventInfo = {
    eventInfo: eventInfoName
  };
  var eventInfoNameVal = new Array();
  eventInfoNameVal.push(eventInfo);
  digitalDataEmail.event = eventInfoNameVal;
  digitalDataEmail.user = user;
  digitalDataEmail.attributes = {
    emailSignupLocation: signUpLocation
  };
  digitalDataEmail.page = {
    pageName: pageNameVal
  };
  digitalData = digitalDataEmail;
}

function captureClickEvent(clickEvent, pageType) {
  if (!analyticsEnabled) {
    return;
  }

  var user = digitalData.user;
  var pageName = formatString(digitalData.page.pageName);
  var digitalCustomData = {};

  if (pageType == 'GiftCard') {
    digitalCustomData.page = {
      pageName: pageName,
      pdpTemplate: pageType
    };
  } else {
    digitalCustomData.page = {
      pageName: pageName
    };
  }

  var eventInfoName = {
    eventName: eventNamevalue(clickEvent) //static value

  };
  var eventInfo = {
    eventInfo: eventInfoName
  };
  var eventInfoNameVal = new Array();
  eventInfoNameVal.push(eventInfo);
  digitalCustomData.event = eventInfoNameVal;
  digitalCustomData.user = user;

  if (pageType != null && pageType == 'product') {
    var pid, pname;

    if (digitalData.product.item.length != undefined && digitalData.product.item.length > 0) {
      pid = digitalData.product.item[0].productID;
      pname = digitalData.product.item[0].productName;
    } else {
      pid = digitalData.product.item.productID;
      pname = digitalData.product.item.productName;
    }

    var item = {
      productID: pid,
      productName: pname
    };
    digitalCustomData.product = {
      item: item
    };
  }

  digitalData = digitalCustomData;
}

function chatEvent() {
  $('div.cx-widget div.cx-body .chat-end button.end-confirm').off('click').on('click', function () {
    var date = new Date();
    var chatStarttime = '';
    var chatDuration = '0:0:00';
    var endTime = date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();
    var chatstarttime = '';
    var cookies = document.cookie.split(';');

    for (var i = 0; i < cookies.length; i++) {
      var tokens = cookies[i].split('=');
      var cookieKey = tokens[0].trim();

      if (cookieKey === 'chat-start-time') {
        chatstarttime = tokens[1];
      }
    }

    if (chatstarttime != '') {
      chatStarttime = new Date(chatstarttime);
      var differencems = date - chatStarttime;
      differencems = differencems / 1000;
      var seconds = Math.floor(differencems % 60);
      differencems = differencems / 60;
      var minutes = Math.floor(differencems % 60);
      differencems = differencems / 60;
      var hours = Math.floor(differencems % 24);
      chatDuration = hours + ':' + minutes + ':' + seconds;
    }

    var user = digitalData.user;
    var pageName = formatString(digitalData.page.pageName);
    var digitalCustomData = {};
    digitalCustomData.page = {
      pageName: pageName
    };
    var eventInfoName = {
      eventName: eventNamevalue('chatEnd') //static value

    };
    var eventInfo = {
      eventInfo: eventInfoName
    };
    var eventInfoNameVal = new Array();
    eventInfoNameVal.push(eventInfo);
    digitalCustomData.event = eventInfoNameVal;
    digitalCustomData.user = user;
    digitalCustomData.attributes = {
      chatEndTime: endTime,
      chatDuration: chatDuration,
      chatRepNumber: '0'
    };
    digitalData = digitalCustomData;
  });
  $('div.cx-widget div.cx-body .cx-button-group button.submit').off('click').on('click', function () {
    var date = new Date();
    var startTime = date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();
    document.cookie = 'chat-start-time' + '=' + date;
    var user = digitalData.user;
    var pageName = formatString(digitalData.page.pageName);
    var digitalCustomData = {};
    digitalCustomData.page = {
      pageName: pageName
    };
    var eventInfoName = {
      eventName: eventNamevalue('chatStart') //static value

    };
    var eventInfo = {
      eventInfo: eventInfoName
    };
    var eventInfoNameVal = new Array();
    eventInfoNameVal.push(eventInfo);
    digitalCustomData.event = eventInfoNameVal;
    digitalCustomData.user = user;
    digitalCustomData.attributes = {
      chatStartTime: startTime,
      chatRepNumber: '0'
    };
    digitalData = digitalCustomData;
  });
}

function accountUpdate() {
  var accountUpdatedSuccess = $('input.update-profile-success').val();
  var user = digitalData.user;
  var pageName = digitalData.page.pageName;
  var digitalCustomData = {};
  digitalCustomData.page = {
    pageName: pageName
  };
  var eventInfoName = {
    eventName: eventNamevalue('myAccountUpdateClick') //static value

  };
  var eventInfo = {
    eventInfo: eventInfoName
  };
  var eventInfoNameVal = new Array();
  eventInfoNameVal.push(eventInfo);
  digitalCustomData.event = eventInfoNameVal;
  digitalCustomData.user = user;
  digitalCustomData.attributes = {
    accountUpdatedSuccess: accountUpdatedSuccess != undefined ? accountUpdatedSuccess : 'false'
  };
  digitalData = digitalCustomData;
} //adobedtm


function plpProductClick(currentDiv, clickType) {
  if (!analyticsEnabled) {
    return;
  }

  var pagename = formatString($('.page-Name-dublicate').val());
  var pageGender = digitalData.page.pageGender;

  if (pageGender == undefined) {
    pageGender = $(currentDiv).data('pagegender');
  }

  var user = digitalData.user;
  var digitalCustomData = {};
  var eventInfoName = {
    eventName: eventNamevalue(clickType) //static value

  };
  var eventInfo = {
    eventInfo: eventInfoName
  };
  var eventInfoNameVal = new Array();
  eventInfoNameVal.push(eventInfo);
  digitalCustomData.event = eventInfoNameVal;
  var productPriceType = '';

  if (clickType == 'quickView') {
    var StandardPrice = $('#product-content').find('.js-product-standard-prices').val();
    var Salesprice = $('#product-content').find('.js-product-sales-price').val();
    var productPrice = Salesprice != '' ? Salesprice : StandardPrice;
    productPrice = $('#product-content').find('.js-product-normal-prices').length > 0 ? $('#product-content').find('.js-product-normal-prices').val() : productPrice;
    productPriceType = StandardPrice == Salesprice ? 'FP' : 'MRKD';
    productPriceType = $('.js-product-promo-price').length > 0 ? 'PROMO' : productPriceType;
  }

  digitalCustomData.product = {
    item: [{
      productID: $(currentDiv).data('itemid').toString(),
      productName: formatString($(currentDiv).data('pname')),
      productPosition: $(currentDiv).closest('.grid-tile').data('position').toString(),
      productPrice: $(currentDiv).find('.js-product-grid-prices').val(),
      productList: formatString($(currentDiv).data('webcat')),
      productWebCategory: formatString($(currentDiv).data('webcat')),
      productStockMessage: formatString($(currentDiv).data('stockmsg'))
    }]
  };

  if (clickType == 'quickView') {
    digitalCustomData.page = {
      pageName: pagename,
      pageGender: pageGender,
      pageLocale: digitalData.page.pageLocale,
      pageProductViewType: 'quick',
      pageType: 'product',
      pageLevel1: formatString(digitalData.page.pageLevel1),
      pageLevel2: formatString(digitalData.page.pageLevel2),
      pageLevel3: formatString(digitalData.page.pageLevel3),
      pageLevel4: formatString(digitalData.page.pageLevel3),
      pageHierarchy: formatString(digitalData.page.pageLevel3)
    };
  } else {
    if ($(currentDiv).closest('body').find('.js-dtm-search-list').length > 0) {
      digitalCustomData.page = {
        pageName: pagename
      };
    } else {
      digitalCustomData.page = {
        pageName: pagename,
        pageGender: pageGender
      };
    }
  }

  digitalCustomData.user = user;
  digitalData = digitalCustomData;
}

function quickViewOpen(position) {
  if (!analyticsEnabled) {
    return;
  }

  var user = digitalData.user;
  var page = digitalData.page;
  page.pageLevel4 = digitalData.page.pageLevel3;
  page.pageHierarchy = digitalData.page.pageLevel3;
  var attributes = digitalData.attributes;
  var productList = digitalData.product.item;
  var digitalCustomData = {};
  digitalCustomData.user = user;
  digitalCustomData.page = page;
  digitalCustomData.attributes = attributes;
  digitalCustomData.page.pageProductViewType = 'quick';
  var eventInfoName = {
    eventName: eventNamevalue('quickView') //static value

  };
  var eventInfo = {
    eventInfo: eventInfoName
  };
  var eventInfoNameVal = new Array();
  eventInfoNameVal.push(eventInfo);
  digitalCustomData.event = eventInfoNameVal;
  var productListArray = [];

  for (var i = 0; i < productList.length; i++) {
    productListArray.push({
      productID: productList[i].productID,
      productName: formatString(productList[i].productName),
      productPriceType: productList[i].productPriceType,
      productStockMessage: formatString(productList[i].productStockMessage),
      productPosition: position > -1 ? position + 1 + '' : '0',
      productPrice: productList[i].productPrice,
      productList: formatString(productList[i].productWebCategory),
      productWebCategory: formatString(productList[i].productWebCategory)
    });
  }

  digitalCustomData.product = {
    item: productListArray
  };
  digitalData = digitalCustomData;
}

function findProductFit(button) {
  if (button) {
    return button.text().trim();
  } else if ($('.rl-quickShop-dialog').length > 0) {
    return $('.rl-quickShop-dialog .polo-fit-container-list').length > 0 ? $('.rl-quickShop-dialog .polo-fit-container-list').children('.selected').eq(0).text().trim() : '';
  } else if ($('.polo-fit-container-list').children().length > 0) {
    return $($('.polo-fit-container-list').children('.selected')[0]).text().trim();
  } else {
    return '';
  }
}

function clickpersonal(currpersonal) {
  if (!analyticsEnabled) {
    return;
  }

  var $currpersonal = currpersonal;

  if ($currpersonal.closest('.product-add-to-cart').siblings('.product-options') != undefined) {
    var $personalizeerror = $currpersonal.closest('.product-add-to-cart').siblings('.product-options');

    if ($personalizeerror.find('.personalize-check .input-checkbox').prop("checked") == true && !currpersonal.hasClass('disabled-size')) {
      var errorBlock = $currpersonal.closest('.product-add-to-cart').find('.pdp-messaging .pdp-error-msg');
      errorBlock.text(''); //Separate blocks for US and EU

      if (Resources.CURRENT_LOCALE == 'en_US') {
        var fontval = 0;
        $personalizeerror.find('.personalize-initials input').each(function () {
          if ($(this).val().trim().length > 0) {
            fontval++;
          }
        });

        if (fontval == $personalizeerror.find('.personalize-initials input').length) {
          $currpersonal.removeClass('font-check-disabled');
          $currpersonal.prop('disabled', false);
        } else {
          $currpersonal.removeClass('font-check-disabled').addClass('font-check-disabled');
          var embroiderySection = $personalizeerror.find('.embroidery-section');
          var embossingSection = $personalizeerror.find('.embossing-section');
          var engravingSection = $personalizeerror.find('.engraving-section');

          if (embroiderySection.length > 0 || embossingSection.length > 0 || engravingSection.length > 0) {
            var initialErrMsg = "";

            if (embroiderySection.length > 0 && embroiderySection.find('.personalize-initials input:text').length != 0 && embroiderySection.find('.personalize-initials input:text').val().length == 0) {
              initialErrMsg = Resources.MONOGRAM_ENTER_INITIALS;
            } else if (embossingSection.length > 0 && embossingSection.find('.personalize-initials input:text').length != 0 && embossingSection.find('.personalize-initials input:text').val().length == 0) {
              initialErrMsg = Resources.MONOGRAM_ENTER_INITIALS_EMBOSSING;
            } else if (engravingSection.length > 0 && engravingSection.find('.personalize-initials input:text').length != 0 && engravingSection.find('.personalize-initials input:text').val().length == 0) {
              initialErrMsg = Resources.MONOGRAM_ENTER_INITIALS_ENGRAVING;
            }
          }

          errorBlock.text(initialErrMsg);
          $currpersonal.prop('disabled', true);
        }
      } else {
        var fontval = $personalizeerror.find('.personalize-initials input').val().length;

        if (fontval > 0) {
          $currpersonal.removeClass('font-check-disabled');
          $currpersonal.prop('disabled', false);
        } else {
          $currpersonal.removeClass('font-check-disabled').addClass('font-check-disabled');
          errorBlock.text(Resources.MONOGRAM_ENTER_INITIALS);
          $currpersonal.prop('disabled', true);
        }
      }
    }
  }
}

function quickFilter(reftype, selection) {
  if (!analyticsEnabled) {
    return;
  }

  var digitalCustomData = {};
  var pagename = formatString(digitalData.page.pageName);
  var eventInfoName = {
    eventName: eventNamevalue('quickFilter') //static value

  };
  var eventInfo = {
    eventInfo: eventInfoName
  };
  var eventInfoNameVal = new Array();
  eventInfoNameVal.push(eventInfo);
  digitalCustomData.event = eventInfoNameVal;
  digitalCustomData.attributes = {
    refinementType: formatString(reftype).toLowerCase(),
    refinementValue: selection.trim().toLowerCase()
  };
  digitalCustomData.page = {
    pageName: pagename
  };
  digitalData = digitalCustomData;
}

function navClick(cgid) {
  if (!analyticsEnabled) {
    return;
  }

  var pagename = formatString(digitalData.page.pageName);

  if (digitalData.cart) {
    delete digitalData.cart;
  }

  if (digitalData.product) {
    delete digitalData.product;
  }

  if (digitalData.search) {
    delete digitalData.search;
  }

  var eventInfoName = {
    eventName: eventNamevalue('topNavClick') //static value

  };
  var eventInfo = {
    eventInfo: eventInfoName
  };
  var eventInfoNameVal = new Array();
  eventInfoNameVal.push(eventInfo);
  digitalData.event = eventInfoNameVal;
  digitalData.page = {
    pageName: pagename
  };
  digitalData.attributes = {
    navigationLink: formatString(cgid)
  };
}

function storeLocatorInteraction(eventName, value) {
  try {
    var storeName = '';

    if (eventName == 'bapclick') {
      var storeNameText = $('.store-locator-details h1').text() || $('#store-' + value + '-link').text();
      storeName = storeNameText.trim(); //If storeName is still empty, check for BOPIS

      if (storeName == '' && $('input[value="' + value + '"]').length > 0) {
        var storeInput = $('input[value="' + value + '"]');
        storeName = storeInput.closest('.findinstore-wrapper').find('.store-name').text().trim();
      }
    }

    var eventInfo = {
      eventName: eventNamevalue('storeLocator' + eventName),
      eventValue: value,
      storeName: storeName
    };
    digitalData.event = eventInfo;
  } catch (e) {//Do Nothing
  }
}

function trackPZImpressions(entries) {
  var pzNewClasses = [];
  var sessionStorageImpressions = sessionStorage.getItem('userPZImpressions') ? sessionStorage.getItem('userPZImpressions').split('|') : []; //For impressions, ensure we only send once regardless of how many elements are tagged or how often the are moved in/out of the viewport. We also need
  //to check that the user hasn't been presented with this experience on a previous page in their session to keep the data clean (using session storage)

  entries.forEach(function (entry) {
    entry.target.classList.forEach(function (value, key, listObj) {
      var pzExperience = value.substring(3); //Need to account for elements with height/width of 0 plus fixed position elements which won't have an offsetParent

      var isVisible = entry.target.offsetParent != null || $(entry.target).css('position') == 'fixed' && $(entry.target).is(':visible');

      if (isVisible && entry.isIntersecting && /^pz-/.test(value) && !sessionStorageImpressions.includes(pzExperience)) {
        pzNewClasses.push(pzExperience);
        sessionStorageImpressions.push(pzExperience);
      }
    });
  });
  var pzExperienceStr = pzNewClasses.join('|');

  if (pzExperienceStr) {
    var eventInfo = {
      eventName: eventNamevalue('pzImpression'),
      experience: pzExperienceStr
    }; //We also need to ensure we remember a user has already seen this experience (e.g. on a multi page exprience or they navigated away and came back to it)
    //We can use session storage

    sessionStorage.setItem('userPZImpressions', sessionStorageImpressions.join('|'));
    digitalData.event = eventInfo;
  }
} //This has to be done manually since Fluid overwrites our data layer as part of the configuration


function setCYOFindingMethod(item) {
  //Finding method
  var refABTag, refSearchTerm, isRefRefinement, isWishList, isCrossSell, isFunnel;
  var productFindingMethod = '',
      crossSellType = '';
  var referrer = document.referrer;
  var refSearchParams = new URLSearchParams(referrer.split('?')[1]);
  var curSearchParams = new URLSearchParams(document.location.search);
  var productWebCategory = curSearchParams.get('webcat');

  if (referrer) {
    refABTag = refSearchParams.get('ab');
    refSearchTerm = refSearchParams.get('q') || refSearchParams.get('searchTerm') || refSearchParams.get('searchtermred');
    isRefRefinement = referrer.indexOf('/r/') > -1 && referrer.indexOf('/r/sale') == -1;
    isWishList = referrer.indexOf('/wishlist') > -1;
  } //If we couldn't get ab tag or search term from referrer, it may be set in the current URL


  if (!refABTag) {
    refABTag = curSearchParams.get('ab');
  }

  if (!refSearchTerm) {
    refSearchTerm = curSearchParams.get('q') || curSearchParams.get('searchTerm') || curSearchParams.get('searchtermred');
  } //Set funnel boolean if there is no webcat, customer was in cart and there was a cgid, or customer was in checkout 


  isFunnel = !productWebCategory && referrer && (referrer.indexOf('/cart') > -1 && curSearchParams.get('cgid') || referrer.toLowerCase().indexOf('/checkout') > -1 || referrer.toLowerCase().indexOf('/startcheckout') > -1); //Set xsell boolean if this was a webcat to be cleaned other than breadcrumb/search suggestion or the customer was coming from the cart with no cgid or webcat (cart rec via QS)

  isCrossSell = productWebCategory && webcatsForCleaning.includes(productWebCategory) && productWebCategory != 'breadcrumb' && productWebCategory != 'search/suggestion' || referrer && referrer.indexOf('/cart') > -1 && !curSearchParams.get('cgid') && !curSearchParams.get('webcat');

  if (isCrossSell) {
    crossSellType = productWebCategory; //At this point, any click coming from the cart had no cgid which means it was a cart recommendation

    if (referrer && referrer.indexOf('/cart') > -1) {
      crossSellType = 'recommendation/cart';
    }
  }

  if (isWishList) {
    productFindingMethod = 'wishlist';
  } else if (isRefRefinement) {
    productFindingMethod = 'refinement';
  } else if (refSearchTerm && !isCrossSell || productWebCategory == 'search/suggestion') {
    productFindingMethod = productWebCategory == 'search/suggestion' ? 'search suggestion' : 'search';
  } else if (refABTag) {
    productFindingMethod = 'content';
  } else if (isCrossSell) {
    productFindingMethod = 'cross-sell';
  } else if (isFunnel) {
    productFindingMethod = 'cart/checkout';
  } else if (productWebCategory) {
    productFindingMethod = 'browse';
  } else {
    productFindingMethod = 'direct';
  }

  item.productFindingMethod = productFindingMethod;
  item.crossSellType = crossSellType;
}

function setOriginalSKU(productSKU) {
  originalSKU = productSKU;
}

function initAdobeDtm() {
  if (digitalData.page.pageName && digitalData.page.pageName.indexOf(':helpdesk:landingpage') > -1) {
    if (typeof pageContext != 'undefined' && pageContext.ns == 'error') {
      var title = "errorpage:error"; // per DIGITAL-16088

      var pageName = digitalData.page.pageName.replace('helpdesk:landingpage', title);
      digitalData.page.pageName = formatString(pageName);
    } else if (document.title.length > 0) {
      var title = document.title.split('|')[0].trim();
      var pageName = digitalData.page.pageName.replace('helpdesk:landingpage', title);
      digitalData.page.pageName = formatString(pageName);
    }
  } //on cick of visible products on cart page


  $('#cart-table .product-list-item .name a').on('click', function () {
    var pagename = formatString(digitalData.page.pageName);
    var productprice = $(this).closest('.cart-details').find('.price-sales').text() != '' ? $(this).closest('.cart-details').find('.js-product-grid-prices').val() : $(this).closest('.cart-details').find('.price-standard').text();

    if (digitalData.cart) {
      delete digitalData.cart;
    }

    var eventInfoName = {
      eventName: eventNamevalue('productClick') //static value

    };
    var eventInfo = {
      eventInfo: eventInfoName
    };
    var eventInfoNameVal = new Array();
    eventInfoNameVal.push(eventInfo);
    digitalData.event = eventInfoNameVal;
    digitalData.product = {
      item: {
        productID: $(this).data('masterid').toString(),
        productName: formatString($(this).data('pname')),
        productStockMessage: formatString($(this).data('stockmsg')),
        productPosition: $(this).closest('.cart-row').data('position').toString(),
        productPrice: productprice,
        productWebCategory: formatString($(this).data('webcat'))
      }
    };
    digitalData.page = {
      pageName: pagename
    };
  }); //click of visible product on recommendation

  $(document).off('click', '.cart-recommendations .product-tile').on('click', '.cart-recommendations .product-tile', function () {
    var productprice = $(this).closest('.product-tile').find('.js-product-grid-prices').val();
    var pageName = formatString(digitalData.page.pageName);

    if (digitalData.cart) {
      delete digitalData.cart;
    }

    var eventInfoName = {
      eventName: eventNamevalue('productClick') //static value

    };
    var eventInfo = {
      eventInfo: eventInfoName
    };
    var eventInfoNameVal = new Array();
    eventInfoNameVal.push(eventInfo);
    digitalData.event = eventInfoNameVal;
    var position = $(this).closest('ul').children('li').index($(this).parent());
    digitalData.product = {
      item: {
        productID: $(this).data('itemid').toString(),
        productName: formatString($(this).data('pname')),
        productPosition: position,
        productPrice: productprice,
        productList: formatString($(this).data('webcat')),
        productWebCategory: formatString($(this).data('webcat'))
      }
    };
    digitalData.page = {
      pageName: pageName
    };
  }); //On click of visible product in the category grid page and color swatch click on PLP

  $('.js-category-grid-product .product-tile a:not("#quickviewbutton")').off('click').on('click', function () {
    // if the target of the click isn't the container nor a descendant of the container
    if ($(this).hasClass('swatch')) {
      var digitaldatacolor = {};
      var pagename = digitalData.page.pageName;
      digitaldatacolor.user = digitalData.user;
      var eventInfoName = {
        eventName: eventNamevalue('colorSwatchClick') //static value

      };
      var eventInfo = {
        eventInfo: eventInfoName
      };
      var eventInfoNameVal = new Array();
      eventInfoNameVal.push(eventInfo);
      digitaldatacolor.event = eventInfoNameVal;
      var siblingCount = $(this).parent().siblings().length + 1;
      var siblingIndex = $(this).parent().index() + 1;
      digitaldatacolor.attributes = {
        productID: $(this).closest('.product-tile').data('masterid'),
        swatchColor: $(this).data('color'),
        swatchPosition: siblingIndex + ':' + siblingCount
      };
      digitaldatacolor.page = {
        pageName: pagename
      };
      digitalData = digitaldatacolor;

      if (digitalData.product) {
        delete digitalData.product;
      }
    } else {
      if (digitalData.product) {
        delete digitalData.product;
      }

      if (digitalData.search) {
        delete digitalData.search;
      }
    }

    plpProductClick($(this).closest('div.product-tile'), 'productClick');
  }); //To track broken image

  var styleID = new Array();
  var item = new Array();
  var counter = 1;
  var pname = '';
  var isWL, productList;
  $('.js-category-grid-product .product-tile .product-image .thumb-link').each(function (index) {
    if ($('body').find('#QuickViewDialog').length > 0) {
      return false;
    }

    digitalData.product = {};
    var altText = formatString($(this).find('img').attr('alt'));

    if (altText == 'The product image is missing!') {
      styleID.push($(this).closest('.js-category-grid-product .product-tile').data('masterid'));

      if (SitePreferences.ANALYTICS_ENABLED != null && SitePreferences.ANALYTICS_ENABLED != undefined && SitePreferences.ANALYTICS_ENABLED) {
        dataLayer.push = {
          event: 'noimage',
          eventLabel: styleID
        };
      }
    }

    $(window).on('load', function () {
      if (index == 0) {
        var eventInfoName = {
          eventName: eventNamevalue('productImpressions') //static value

        };

        if ($('#QuickViewDialog').length == 0) {
          var eventInfo = {
            eventInfo: eventInfoName
          };
          var eventInfoNameVal = new Array();
          eventInfoNameVal.push(eventInfo);
          digitalData.event = eventInfoNameVal;
        }
      }
    });
    pname = formatString($(this).closest('.product-tile').data('pname'));
    isWL = $(this).closest('.wl-list-container').length > 0;
    productList = isWL ? formatString($(this).closest('.grid-tile').data('listname')) || 'wishlist' : formatString($(this).closest('.product-tile').data('webcat'));
    item.push({
      productName: formatString(pname),
      productID: $(this).closest('.product-tile').data('masterid') + '',
      productPrice: $(this).closest('.product-tile').find('.product-pricing .js-product-grid-prices').val(),
      productWebCategory: formatString($(this).closest('.product-tile').data('webcat')),
      productList: productList,
      productPosition: $(this).closest('.js-category-grid-product').data('position') + '',
      productGroup: $(this).closest('.product-tile').data('productgroup') || ''
    });
    counter++;
    digitalData.product.item = item;
  }); //My account clicks

  $('.account .nav-item a, .my-account-login a').off('click').on('click', function () {
    try {
      var linkText = $(this).find('.nav-promo-head').length > 0 ? $(this).find('.nav-promo-head').text().trim() : $(this).find('.nav-text').text().trim();
      var eventInfo = {
        eventName: eventNamevalue('myAccountLinkClick'),
        //static value
        linkText: linkText || $(this).text().trim()
      };
      digitalData.event = eventInfo;
    } catch (e) {//Do nothing
    }
  }); //Click of 'Remember Me' on account pages

  $('#rememberme-1, #rememberme-2, #rememberme-3').off('click').on('click', function () {
    var user = digitalData.user;
    var pageName = formatString(digitalData.page.pageName);
    var digitalCustomData = {};
    digitalCustomData.page = {
      pageName: pageName
    };
    var eventInfoName = {
      eventName: eventNamevalue('rememberMe') //static value

    };
    var eventInfo = {
      eventInfo: eventInfoName
    };
    var eventInfoNameVal = new Array();
    eventInfoNameVal.push(eventInfo);
    digitalCustomData.event = eventInfoNameVal;
    digitalCustomData.user = user;
    var rmChkDiv = $(this).closest('.field-wrapper')[0];
    var rmChkBox = $(rmChkDiv).find('.input-checkbox')[0];
    var rmChecked = $(rmChkBox).prop('checked');
    digitalCustomData.attributes = {
      rememberMeChecked: rmChecked
    };
    digitalData = digitalCustomData;
  }); //click of anchorLinkClick on PDP

  $('#product-nav-container a').off('click').on('click', function () {
    var eventInfoName = {
      eventName: eventNamevalue('anchorLinkClick') //static value

    };
    var eventInfo = {
      eventInfo: eventInfoName
    };
    var eventInfoNameVal = new Array();
    eventInfoNameVal.push(eventInfo);
    digitalData.event = eventInfoNameVal;
    digitalData.attributes = {
      navigationLink: 'additional products'
    };
  }); //click on my account button

  $(document).off('click', '.largebutton, .createAccount, .js-registration-form .btn-submit, .checkout-registration .btn-primary').on('click', '.largebutton, .createAccount, .js-registration-form .btn-submit, .checkout-registration .btn-primary', function () {
    var pagename = formatString(digitalData.page.pageName);
    var nameEvent = '';
    var digitalCustomData = {};
    var location = pagename.indexOf('cart') > -1 ? 'cart' : pagename.indexOf('checkout:checkout') > -1 ? 'checkout' : pagename.indexOf('checkout:confirmation') > -1 ? 'confirmation' : '';
    digitalCustomData.user = digitalData.user; //If there is no valid function on the submission just count it

    if (typeof $(this).closest('form').valid === 'undefined' || $(this).closest('form').valid()) {
      nameEvent = 'myAccountStart';
      digitalCustomData.attributes = {
        accountCreationLocation: $(this).data('position') || location
      };
    } else {
      nameEvent = 'visitorError';
      var errorFiled = '';
      var errorMessages = '';
      $('.required.error').each(function (index) {
        if (Resources.CURRENT_LOCALE == 'en_US') {
          errorFiled = errorFiled + (index == 0 ? $($(this).closest('.input-wrapper').find('span')[0]).text() : ',' + $($(this).closest('.input-wrapper').find('span')[0]).text());
        } else if ($(this).attr('placeholder') != undefined) {
          errorFiled = errorFiled + (index == 0 ? $(this).attr('placeholder').replace('*', '').trim() : ',' + $(this).attr('placeholder').replace('*', '').trim());
        }

        errorMessages = errorMessages + (index == 0 ? $($(this).closest('.input-wrapper').find('span')[0]).text() : ',' + $($(this).closest('.input-wrapper').find('span')[0]).text());
      });
      digitalCustomData.attributes = {
        errorField: errorFiled,
        errorMessage: errorMessages
      };
    }

    var eventInfoName = {
      eventName: eventNamevalue(nameEvent) //static value

    };
    var eventInfo = {
      eventInfo: eventInfoName
    };
    var eventInfoNameVal = new Array();
    eventInfoNameVal.push(eventInfo);
    digitalCustomData.event = eventInfoNameVal;
    digitalCustomData.page = {
      pageName: pagename
    };
    digitalData = digitalCustomData;
  }); //click of social share icons on pdp

  $('.socialsharing a').off('click').on('click', function () {
    var pagename = formatString(digitalData.page.pageName);

    if (digitalData.promo) {
      delete digitalData.promo;
    }

    var eventInfoName = {
      eventName: eventNamevalue('socialShare') //static value

    };
    var eventInfo = {
      eventInfo: eventInfoName
    };
    var eventInfoNameVal = new Array();
    eventInfoNameVal.push(eventInfo);
    digitalData.event = eventInfoNameVal;
    digitalData.product = {
      productID: $(this).data('masterid') + '',
      productName: formatString($(this).data('pname'))
    };
    digitalData.page = {
      pageName: pagename
    };
    digitalData.attributes = {
      socialShareType: $(this).text().trim()
    };
  }); //click on pagination event

  $('.pagination-number a').off('click').on('click', function () {
    var pagename = formatString(digitalData.page.pageName);

    if (digitalData.product) {
      delete digitalData.product;
    }

    if (digitalData.search) {
      delete digitalData.search;
    }

    var eventInfoName = {
      eventName: eventNamevalue('Pagination') //static value

    };
    var eventInfo = {
      eventInfo: eventInfoName
    };
    var eventInfoNameVal = new Array();
    eventInfoNameVal.push(eventInfo);
    digitalData.event = eventInfoNameVal;
    digitalData.page = {
      pageName: pagename,
      pagePagination: $(this).data('count') + ''
    };
  }); //click on PDP tab Open

  $('.product-add-to-cart a.store-finder').on('click', function () {
    captureClickEvent('pdpFindinStore', 'product');
  });
  $('.product-secondary-information a').off('click').on('click', function () {
    var digitalDataPDP = {};
    var pagename = digitalData.page.pageName;
    digitalDataPDP.user = digitalData.user;
    digitalDataPDP.page = {
      pageName: pagename
    };
    digitalDataPDP.event = {
      eventInfo: {
        eventName: eventNamevalue('pdpTabOpen') //static value

      }
    };
    digitalDataPDP.attributes = {
      pdpTabClicked: $(this).text().trim()
    };
    digitalDataPDP.product = {
      item: [{
        productName: $(this).closest('.product-detail').find('.product-name').text().trim(),
        productID: formatString($(this).closest('.product-detail').find('.product-number span').data('masterid').toString()),
        productWebCategory: digitalData.product.item[0].productWebCategory,
        productFindingMethod: digitalData.product.item[0].productFindingMethod,
        crossSellType: digitalData.product.item[0].crossSellType
      }]
    };
    digitalData = digitalDataPDP;
  }); // Fits on Multi-Fit PDP

  $('.polo-fit-container .fit-button').on('click', function () {
    var digitalDataPDP = {};
    var pagename = digitalData.page.pageName;
    digitalDataPDP.user = digitalData.user;
    digitalDataPDP.page = {
      pageName: pagename
    };
    digitalDataPDP.event = {
      eventInfo: {
        eventName: eventNamevalue('pdpFitClick') //static value

      }
    };
    digitalDataPDP.attributes = {
      pdpTabClicked: $(this).text().trim(),
      productFit: findProductFit($(this))
    };
    digitalDataPDP.product = {
      item: [{
        productName: $(this).closest('.product-detail').find('.product-name').text().trim(),
        productID: formatString($(this).closest('.product-detail').find('.product-number span').data('masterid').toString()),
        productFit: findProductFit($(this)),
        productWebCategory: digitalData.product.item[0].productWebCategory,
        productFindingMethod: digitalData.product.item[0].productFindingMethod,
        crossSellType: digitalData.product.item[0].crossSellType
      }]
    };
    digitalData = digitalDataPDP;
  }); //click on addToWishlist on pdp page (includes CM)

  $(document).off('click', '.add-to-favorites .save-To-favorites, .move-to-wishlist-from-cart').on('click', '.add-to-favorites .save-To-favorites, .move-to-wishlist-from-cart', function () {
    var eventInfoName = {
      eventName: eventNamevalue('wishlistAdd') //static value

    };
    var eventInfo = {
      eventInfo: eventInfoName
    };
    var eventInfoNameVal = new Array();
    eventInfoNameVal.push(eventInfo);
    digitalData.event = eventInfoNameVal;

    if (isCM) {
      digitalData.attributes = {
        productID: $(this).closest('.wishlist-pdp').data('item') || $(this).data('pid')
      };
    } else {
      if ($(this).hasClass('move-to-wishlist-from-cart')) {
        var parentRow = $(this).closest('.cart-row');
        digitalData.product = {
          item: [{
            productID: $(parentRow).find('.name a').length > 0 ? $(parentRow).find('.name a').data('masterid').toString() : '',
            productSku: $(parentRow).find('.name a').data('itemid'),
            productName: formatString($(parentRow).find('.name a').data('pname')),
            productStockMessage: $(parentRow).find('.name a').data('stockmsg'),
            productWebCategory: formatString($(parentRow).find('.name a').data('webcat'))
          }]
        };
      } else if ($('.gift-card-options').length > 0) {
        var giftCardType = $('.gift-card-links .active').eq(0).attr('id') == 'virtual-gc' ? 'virtual' : 'traditional';
        var productPrice, productWebCategory;

        if (Resources.CURRENT_LOCALE != 'en_US') {
          giftCardType = 'virtual';
        }

        if (giftCardType == 'virtual') {
          productPrice = $('#dwfrm_giftcert_purchase_gcAmount').val().replace(/\D/g, '');
          productWebCategory = $('#GiftCertificateForm #AddToBasketButton').data('webcat');
        } else {
          productPrice = $('.gc-amounts .selected').text().replace(/\D/g, '');
          productWebCategory = $('#GiftCertificateForm .add-to-cart').data('webcat');
        }

        digitalData.product = {
          item: [{
            productID: $('#pdp-ProductContent').val(),
            productName: $('.product-name').eq(0).text().trim(),
            productPrice: productPrice,
            productWebCategory: productWebCategory,
            productGiftCardType: giftCardType
          }]
        };
      }
    }
  });
  $(document).off('click', 'a.remove-from-favorites').on('click', 'a.remove-from-favorites', function () {
    try {
      var products = [];
      var productID = getParameterByName('productID', $(this).attr('href'));
      var productTile = $('[data-masterid="' + productID + '"]');
      var listName = formatString(productTile.parents(".wl-list-container").find('.wishlist-heading h1').text().trim());
      var product = {
        productID: productID,
        productName: productTile.data('pname'),
        productPrice: productTile.find('.js-product-grid-prices').val(),
        productStockMessage: productTile.data('stockmsg'),
        productGroup: productTile.data('productgroup') || '',
        productWebCategory: 'wishlist',
        productWishListName: listName
      };
      products.push(product);
      var eventInfo = {
        eventName: eventNamevalue('removeFromList'),
        eventAttributes: {
          products: products
        }
      };
      digitalData.event = eventInfo;
    } catch (e) {//Do Nothing
    }
  }); //breadcrumb elements click event

  $('.plp-info-breadcrumb .breadcrumb-element').off('click').on('click', function () {
    var counter = 0;
    var pagename = formatString(digitalData.page.pageName);
    var pageBreadcrumbLink = $(this).text().trim();
    $('.plp-info-breadcrumb a').each(function () {
      var linkname = $(this).text().trim();
      counter++;

      if (linkname == pageBreadcrumbLink) {
        return false;
      }
    });
    var eventInfoName = {
      eventName: eventNamevalue('breadcrumbClick') //static value

    };
    var eventInfo = {
      eventInfo: eventInfoName
    };
    var eventInfoNameVal = new Array();
    eventInfoNameVal.push(eventInfo);
    digitalData.event = eventInfoNameVal;
    digitalData.page = {
      pageName: pagename
    };
    digitalData.attributes = {
      pageBreadcrumbLink: $(this).text().trim(),
      pageBreadcrumbPosition: counter + ':' + $(this).closest('.plp-info-breadcrumb').find('a').length
    };

    if (digitalData.product) {
      delete digitalData.product;
    }
  }); //click on remove wishlist link

  $('.delete-item').on('click', function () {
    var eventInfoName = {
      eventName: eventNamevalue('wishlistRemove') //static value

    };
    var eventInfo = {
      eventInfo: eventInfoName
    };
    var eventInfoNameVal = new Array();
    eventInfoNameVal.push(eventInfo);
    digitalData.event = eventInfoNameVal;
    digitalData.product = {
      item: {
        productStockMessage: formatString($(this).data('stockmsg'))
      }
    };
  }); //click on addToWishlist on Cart page

  $('.product-list-item .add-to-wishlist').on('click', function () {
    var eventInfoName = {
      eventName: eventNamevalue('wishlistAdd') //static value

    };
    var eventInfo = {
      eventInfo: eventInfoName
    };
    var eventInfoNameVal = new Array();
    eventInfoNameVal.push(eventInfo);
    digitalData.event = eventInfoNameVal;
    digitalData.product = {
      item: {
        productID: $(this).data('masterid').toString(),
        productSKU: $(this).data('productsku'),
        productName: formatString($(this).data('name')),
        productStockMessage: formatString($(this).data('stockmsg')),
        productWebCategory: 'search'
      }
    };
  }); //For You wishlist click

  $(document).off('.for-you-wishlist .product-tile, .myRL-wishlist .product-tile').on('click', '.for-you-wishlist .product-tile, .myRL-wishlist .product-tile', function () {
    try {
      var products = [];
      var productTile = $(this);
      var productWebCategory = $(this).closest('.for-you-wishlist').length > 0 ? 'wishlist' : 'account-for-you';
      var productPosition = $(this).closest('.for-you-wishlist').length > 0 ? $('.for-you-wishlist .product-tile').index(productTile) : $('.myRL-wishlist .product-tile').index(productTile);
      var product = {
        productID: productTile.data('masterid'),
        productName: productTile.data('pname'),
        productPrice: productTile.find('.js-product-grid-prices').val(),
        productStockMessage: productTile.data('stockmsg'),
        productGroup: productTile.data('productgroup') || '',
        productPosition: productPosition,
        productWebCategory: productWebCategory
      };
      products.push(product);
      var eventInfo = {
        eventName: eventNamevalue('clickThroughWishist'),
        eventAttributes: {
          products: products
        }
      };
      digitalData.event = eventInfo;
    } catch (e) {//Do Nothing
    }
  }); //click on addTocart button on gift card

  $(document).off('click', '#GiftCertificateForm #AddToBasketButton, #GiftCertificateForm .add-to-cart').on('click', '#GiftCertificateForm #AddToBasketButton, #GiftCertificateForm .add-to-cart', function () {
    var digitalCustomData = {};
    var eventInfoVal = [];
    var items = [];
    var eventInfo = {
      eventName: eventNamevalue('addToCart') //static value

    };
    var productID = $(this).data('pid');
    var productSKU = $(this).data('productsku');
    var productName = $('.product-name').eq(0).text().trim();
    var productWebcat = $(this).data('webcat');
    var giftCardType = $('.gift-card-links .active').eq(0).attr('id') == 'virtual-gc' ? 'virtual' : 'traditional';
    var giftCardMessage = $('#dwfrm_giftcert_purchase_includegcmessage').is(':checked') ? 'true' : 'false';
    var productPrice;
    var site = /^(RalphLauren_EU|RalphLauren_GB|RLEU_Sterling|RalphLauren_NonEU)$/;

    if ($('#dwfrm_giftcert_purchase_deliveryDate').length > 0) {
      var curDate = new Date();
      curDate.setHours(0);
      var vgcSelectedDate = $('#dwfrm_giftcert_purchase_deliveryDate').val();

      if (site.test(Resources.CURRENT_SITE)) {
        var vgcDeliveryDate = new Date(vgcSelectedDate.split('/')[1] + '/' + vgcSelectedDate.split('/')[0] + '/' + vgcSelectedDate.split('/')[2]);
      } else {
        var vgcDeliveryDate = new Date(vgcSelectedDate);
      }

      var dateDiff = Math.abs(vgcDeliveryDate - curDate);
      dateDiff = Math.round(dateDiff / (1000 * 60 * 60 * 24));

      if (site.test(Resources.CURRENT_SITE)) {
        var vgcDate = vgcSelectedDate.split('/')[2] + '-' + vgcSelectedDate.split('/')[1] + '-' + vgcSelectedDate.split('/')[0];
      } else {
        var vgcDate = vgcSelectedDate.split('/')[2] + '-' + vgcSelectedDate.split('/')[0] + '-' + vgcSelectedDate.split('/')[1];
      }

      vgcDate = vgcDate + '$' + dateDiff;
    } //In EU, there will be no active tab since there is only virtual


    if (Resources.CURRENT_LOCALE != 'en_US') {
      giftCardType = 'virtual';
    }

    if (giftCardType == 'virtual') {
      productPrice = $('#dwfrm_giftcert_purchase_gcAmount').val().replace(/\D/g, '');
    } else {
      productPrice = $('.gc-amounts .selected').text().replace(/\D/g, '');
    }

    var item = {
      productID: productID,
      productSKU: productSKU,
      productAddedFrom: $(this).closest('#QuickViewDialog').length > 0 ? 'quickViewPDP' : 'PDP',
      productName: productName,
      productStockMessage: 'IN_STOCK',
      productPrice: productPrice,
      productTotal: productPrice,
      productPriceType: 'FP',
      productWebCategory: productWebcat,
      productDivision: '',
      productBrand: 'Polo Ralph Lauren',
      productCategory: 'gift cards',
      productGiftCardType: giftCardType,
      productGiftCardMessage: giftCardMessage,
      productQty: 1,
      productCtlParent: '',
      productRating: '',
      productReviews: '',
      productFit: '',
      productMonogram: '',
      productColor: '',
      productStore: '',
      isProductFit: false,
      isInStorePickup: false,
      productPersonalized: '',
      productVariant: '',
      productSize: '',
      cyoProductPrice: '',
      cyoDtgFlag: '',
      cyoProductFlag: ''
    };

    if ($('#dwfrm_giftcert_purchase_deliveryDate').length > 0) {
      item.vgcScheduledDate = vgcDate;
    }

    items.push(item);
    eventInfoVal.push(eventInfo);
    digitalCustomData.page = digitalData.page;
    digitalCustomData.event = eventInfoVal;
    digitalCustomData.product = {
      item: items
    };
    digitalData = digitalCustomData;
  }); //AddToCart PDP click (including CYO)

  $(document).off('click', '[class*="add-to-cart"]:button, .fc-add-to-cart-container').on('click', '[class*="add-to-cart"]:button, .fc-add-to-cart-container', function () {
    //Let BOPIS handler deal with BOPIS add to cart clicks, let swatch handler deal with swatch clicks
    if ($(this).parents('.storepickupform').length > 0 || $(this).parents('#GiftCertificateForm').length > 0 || $('.swatches-tabs').length > 0) {
      return;
    }

    var searchTerms, searchRedirect, productWebcat, productCtlParent, qsCategory;
    var searchParams = new URLSearchParams(window.location.search);
    searchTerms = searchParams.get('searchTerms');
    searchRedirect = searchParams.get('redirect');
    productWebcat = searchParams.get('webcat'); //Get product's actual category for qs

    qsCategory = $('.rl-quickshop-modal .js-cat-name').val(); //We need to capture the initial finding method and cross sell type before the first cart add
    //Checking for item array instead of page template since Fluid is overwriting our data layer (!!!)

    if (!originalProductFindingMethod && digitalData.product && digitalData.product.item[0]) {
      originalProductFindingMethod = digitalData.product.item[0].productFindingMethod;
      originalCrossSellType = digitalData.product.item[0].crossSellType;
    }

    var isSearchRedirect = searchTerms !== '' && searchRedirect === '' ? true : false;
    clickpersonal($(this));

    if (Resources.CURRENT_LOCALE == 'en_US' && $('.Profanity').length > 0) {
      $(this).closest('.pdpForm').validate();

      if (!$('.Profanity').valid()) {
        e.preventDefault();
        e.stopPropagation();
        return;
      }
    } //Clean non-category webcats and replace with page load data layer value. For QS, use the product's primary category.


    if (!productWebcat || webcatsForCleaning.includes(productWebcat)) {
      if (digitalData.product && digitalData.product.item[0] && !qsCategory) {
        productWebcat = digitalData.product.item[0].productWebCategory;
      } else if (qsCategory) {
        productWebcat = qsCategory;
      } else {
        //If there is no product array this is most likely Fluid, in which case we cannot set v20 to anything of value based on data layer
        productWebcat = 'cyo';
      }
    } //CYO


    if ($('#fluidConfigure').length > 0) {
      var user = digitalData.user;
      var page = digitalData.page;
      var digitalCustomData = {};
      window.digitalCYOData = {};
      var eventInfoName = {
        eventName: eventNamevalue('addToCart') //static value

      };
      var eventInfo = {
        eventInfo: eventInfoName
      };
      var eventInfoNameVal = new Array();
      eventInfoNameVal.push(eventInfo);
      digitalCustomData.event = eventInfoNameVal;
      var item = digitalData.product.item[0];
      var items = [];

      if (!item) {
        item = digitalData.product.item;
      }

      var productDivision;

      if (digitalData.page.pageName.toLowerCase().indexOf('women') > -1) {
        productDivision = 'Women';
      } else if (digitalData.page.pageName.toLowerCase().indexOf('men') > -1) {
        productDivision = 'Men';
      } else if (digitalData.page.pageName.toLowerCase().indexOf('kids') > -1 || digitalData.page.pageName.toLowerCase().indexOf('girls') > -1 || digitalData.page.pageName.toLowerCase().indexOf('boys') > -1) {
        productDivision = 'Kids';
      } else if (digitalData.page.pageName.toLowerCase().indexOf('baby') > -1) {
        productDivision = 'Baby';
      } else {
        productDivision = 'Create Your Own';
      } //Additional props for rule/data layer consistency


      item.productID = $('.fc-attribute-header-style-number').text().trim().substring(1);
      item.cyoShellID = $('[name=cyoShell]').eq(0).val();
      item.productQty = 1;
      item.productPrice = $('.fc-price-container').text().trim().replace(/[^0-9.,]/g, '').replace(',', '.');
      item.cyoDtgFlag = item.cyoShellID == 'dtg' ? 'DTG' : 'CYO';
      item.productAddedFrom = 'PDP';
      item.productDivision = productDivision;
      item.productBrand = 'Create Your Own';
      item.productCategory = 'Create Your Own';
      item.productWebCategory = productWebcat;
      item.productStockMessage = 'IN_STOCK';
      item.productCtlParent = '';
      item.productRating = '';
      item.productReviews = '';
      item.productFit = '';
      item.productMonogram = $('.fc-attribute-value-swatch.fc-swatch-selected').eq(2).parent().attr('aria-label') || '';
      item.productColor = '', item.isProductFit = false;
      item.productPersonalized = '';
      item.productStore = '';
      item.cyoProductFlag = 1;
      item.isInStorePickup = false;
      item.giftCardType = '';
      item.giftCardMessage = '';
      item.personalizationType = 'true:fluid';

      try {
        setCYOFindingMethod(item);
      } catch (e) {
        item.productFindingMethod = '';
        item.productCrossSellType = '';
      }

      delete item.productCurrency;
      items.push(item);
      digitalCustomData.product = {
        item: items
      };
      digitalCustomData.user = user;
      digitalCustomData.page = page;
      digitalCYOData = digitalCustomData;
    } else if (!$(this).hasClass('disabled-size') && !$(this).hasClass('font-check-disabled')) {
      var parentDiv = $('.product-detail-section').eq(0);
      var customDiv = $('UL.personalize-checkbox DIV.field-wrapper INPUT.input-checkbox')[0];
      var pagename = formatString(digitalData.page.pageName);
      var pdpTemplate = $(this).data('pdptemplate');
      var productPid = $(this).siblings('[name="masterProdId"]').val();
      var productSku = $(this).siblings('#pid').val();
      var productName = parentDiv.find('.product-name').text().trim();
      var productPrice = parentDiv.find('.product-price [id^=master-]').data('price-value') / 100;
      var productPriceType = parentDiv.find('.product-price .price-sales.no-promotion').length > 0 ? 'FP' : 'MRKD';
      var prodPersonalized = '';
      var prodMonogram = '';
      var productBrand = $('.brand-name').eq(0).text().trim();
      var productDivision = $('.menu-category .current-division > button').text().trim();
      var productAddedFrom = $('#add-to-cart').closest('#QuickViewDialog').length > 0 ? 'quickViewPDP' : 'PDP';
      var productGroup = $(this).siblings('#product_group').val() != 'null' ? $(this).siblings('#product_group').val() : '';
      var productCategory = $(this).siblings('.js-cat-name').val();
      var productFit = findProductFit();
      var productFindingMethod;
      var crossSellType;

      if (customDiv && customDiv.checked) {
        var embroideryColor = $('.personalize-open .attribute .personalize-selected-clr').text().trim().toLowerCase();
        var embroideryStyle = $('.personalize-open .attribute.personalize-char .selected-val.selected').text().trim().toLowerCase();
        prodPersonalized = productPid + ":" + embroideryColor + ":" + embroideryStyle;
        prodMonogram = embroideryStyle;
      } //Complete the look


      if ($(this).parents('.pdp-the-look').length > 0) {
        var parentDiv = $(this).parents('.look-product-top-content');
        productName = $(this).data('pname');
        productPrice = Number($(this).data('pricevalue'));
        productPriceType = parentDiv.find('.product-price .price-sales.no-promotion').length > 0 ? 'FP' : 'MRKD';
        productWebcat = parentDiv.find('.js-cat-name').val();
        productCtlParent = $('.product-number span').eq(0).data('masterid');
        productFindingMethod = 'cross-sell';
        crossSellType = 'completethelook';
      } //Product set


      if ($(this).parents('.product-set-list').length > 0) {
        var parentDiv = $(this).parents('.product-set-details');
        productName = $(this).data('pname');
        productSku = $(this).data('productsku');
        productPid = $(this).data('masterid');
        productWebcat = $(this).data('webcat') || productWebcat;
        productPrice = parentDiv.find('.product-price [id^=master-]').data('price-value') / 100;
        ;
        productPriceType = parentDiv.find('.product-price .price-sales.no-promotion').length > 0 ? 'FP' : 'MRKD';
      } //Quickshop


      if ($(this).parents('.rl-quickshop-modal').length > 0) {
        productName = $('.rl-quickshop-modal .product-name').text().trim();
        productPrice = $('.rl-quickshop-modal .product-price [id^="master-"]').data('price-value') / 100;
        productPriceType = $('.rl-quickshop-modal .product-price .price-sales').length > 0 ? 'MRKD' : 'FP';
        productBrand = $('.rl-quickshop-modal .brand-name').text().trim();
        productWebcat = $('.rl-quickshop-modal .js-cat-name').val();
        productDivision = 'quickshop';
        productAddedFrom = 'quickshop'; //Cart must have xsell type of 'recommendation/cart' here since line item clicks don't open QS

        if (document.location.href.indexOf('/cart') > -1) {
          productFindingMethod = 'cross-sell';
          crossSellType = 'recommendation/cart';
        } else if ($('.rl-quickshop-modal #productWebcat').val() == 'wardrobe-complementary') {
          productFindingMethod = 'cross-sell';
          crossSellType = 'wardrobe';
        } else if (digitalData.page.pageType == 'product') {
          productFindingMethod = 'cross-sell';
          crossSellType = 'completethelook';
        } else if (digitalData.page.pageType == 'quizresults') {
          productFindingMethod = 'cross-sell';
          crossSellType = 'stylequiz';
        }
      }

      var user = digitalData.user;
      var digitalCustomData = {};
      var eventInfoName = {
        eventName: eventNamevalue('addToCart') //static value

      };
      var eventInfo = {
        eventInfo: eventInfoName
      };
      var eventInfoNameVal = new Array();
      eventInfoNameVal.push(eventInfo);
      digitalCustomData.event = eventInfoNameVal;
      pdpTemplate = $('#add-to-cart').closest('#QuickViewDialog').length > 0 ? 'quickViewPDP' : pdpTemplate;

      if (!productWebcat) {
        productWebcat = $(this).siblings('#productWebcat').val();
      }

      var giftCard = $(this).data('cgid');
      var items = [];
      var prodWebcatFormatted = productWebcat ? productWebcat.replace(/\//g, '-').replace(/ /g, '-').toLowerCase() : productWebcat; //FIXME: check productStockMessage and productAddedFrom logic

      if (Resources.CURRENT_LOCALE == 'en_US') {
        var item = {
          productID: productPid,
          productSKU: productSku,
          productAddedFrom: productAddedFrom,
          productName: productName,
          productStockMessage: 'IN_STOCK',
          productPrice: productPrice,
          productTotal: productPrice,
          productPriceType: productPriceType,
          productQty: 1,
          productDivision: productDivision,
          productBrand: productBrand,
          productCategory: productCategory || prodWebcatFormatted,
          productWebCategory: productWebcat,
          productGroup: productGroup,
          productCtlParent: productCtlParent || '',
          productRating: '',
          productReviews: '',
          productFit: productFit,
          productMonogram: prodMonogram,
          productColor: '',
          productFinish: $('.attribute.finish').length > 0 ? $('.attribute.finish').find('li.selected a').data('color') : '',
          productHardware: $('.attribute.hardware').length > 0 ? $('.attribute.hardware').find('option:selected').data('label') : '',
          productShade: $('.rlhome-variations-drop-cont').length > 0 && $('.attribute.shade').length > 0 ? $('.attribute.shade').find('li.selected a').data('color') : $('#va-shades').find('option:selected').data('label'),
          productStore: '',
          isProductFit: productFit != '',
          isInStorePickup: false,
          productPersonalized: prodPersonalized,
          productVariant: '',
          productSize: '',
          cyoProductPrice: '',
          cyoDtgFlag: '',
          cyoProductFlag: '',
          giftCardType: '',
          giftCardMessage: '',
          personalizationType: prodMonogram ? 'true:monogram' : 'false',
          virtualstoreid: digitalData.page.virtualstoreid ? digitalData.page.virtualstoreid : '',
          productFindingMethod: productFindingMethod || originalProductFindingMethod,
          crossSellType: crossSellType || originalCrossSellType
        };
      } else {
        var productQuantityForDataLayer = $(this).closest('.pdpForm').find('[name$="Quantity"]').val() != undefined ? $(this).closest('.pdpForm').find('[name$="Quantity"]').val() : '1'; //DIGITAL-15878 Update quantity as selected donation amount

        if ($('.donation-value-group').length > 0) {
          productQuantityForDataLayer = $('.donationVal.selected').length > 0 ? $('.donationVal.selected').attr('value') : '1';
        }

        var item = {
          productID: productPid,
          productSKU: productSku,
          productAddedFrom: productAddedFrom,
          productName: productName,
          productStockMessage: 'IN_STOCK',
          productPrice: productPrice,
          productTotal: productPrice,
          productPriceType: productPriceType,
          productQty: 1,
          productDivision: productDivision,
          productBrand: productBrand,
          productCategory: $('.js-cat-name').eq(0).val() || prodWebcatFormatted,
          productWebCategory: productWebcat,
          productGroup: productGroup,
          productCtlParent: productCtlParent || '',
          productRating: '',
          productReviews: '',
          productFit: productFit,
          productMonogram: prodMonogram,
          productColor: '',
          productStore: '',
          productQuantity: productQuantityForDataLayer,
          isProductFit: productFit != '',
          isInStorePickup: false,
          productPersonalized: prodPersonalized,
          productVariant: '',
          productSize: '',
          cyoProductPrice: '',
          cyoDtgFlag: '',
          cyoProductFlag: '',
          giftCardType: '',
          giftCardMessage: '',
          personalizationType: prodMonogram ? 'true:monogram' : 'false',
          virtualstoreid: digitalData.page.virtualstoreid ? digitalData.page.virtualstoreid : '',
          productFindingMethod: productFindingMethod || originalProductFindingMethod,
          crossSellType: crossSellType || originalCrossSellType
        };
      }

      items.push(item);
      digitalCustomData.product = {
        item: items
      };
      digitalCustomData.attributes = {
        isAppliedPromoActive: $(this).data('coupon') == true ? 'yes' : 'no',
        isImplicitPromoActive: $(this).data('promo') == true ? 'yes' : 'no'
      };
      digitalCustomData.user = user;
      digitalCustomData.page = digitalData.page;
      digitalCustomData.page.pageName = pagename;
      digitalCustomData.page.pdpTemplate = giftCard != null && giftCard.toString().indexOf('Gift Cards') > -1 ? 'giftCard' : pdpTemplate; //We need to maintain digitalData.cart to manage updates of newly added products

      if (digitalData.page.pageType == 'cart') {
        digitalCustomData.cart = digitalData.cart;
        digitalCustomData.cart.item.push(item);
        digitalCustomData.cart.cartedProductCount = digitalCustomData.cart.item.length;
      }

      digitalData = digitalCustomData;
    }
  }); //Add To Cart for PDP BOPIS

  $(document).off('click', '.storepickupform .add-to-cart').on('click', '.storepickupform .add-to-cart', function () {
    var searchTerms = '';
    var searchRedirect = '';
    var isSearchRedirect = false;
    var productAddedFrom = digitalData.page.pageType == 'cart' ? 'CART BOPIS' : 'PDP BOPIS';
    var searchParams = new URLSearchParams(window.location.search);
    searchTerms = searchParams.get('searchTerms');
    searchRedirect = searchParams.get('redirect');
    var isSearchRedirect = searchTerms !== '' && searchRedirect === '' ? true : false;
    var pagename = formatString(digitalData.page.pageName);
    var pdpTemplate = formatString(digitalData.page.pdpTemplate);
    var standardPrice = $(".look-product-top-content .js-product-standard-prices").val();
    var salePrice = $(".look-product-top-content .js-product-sales-price").val();
    var productPrice = salePrice ? salePrice : standardPrice;
    var productPriceType = salePrice != standardPrice ? 'MRKD' : 'FP';
    var user = digitalData.user;
    var digitalCustomData = {};
    var deliveryOption = $(this).siblings('#deliveryOption').val();
    var productFit = findProductFit();
    var productWebCat = formatString($('#productWebcat').eq(0).val()); //Clean non-category webcats and replace with existing data layer value

    if (digitalData.product && (!productWebCat || webcatsForCleaning.includes(productWebCat))) {
      productWebCat = digitalData.product.item[0].productWebCategory;
    }

    var eventInfoName = {
      eventName: eventNamevalue('addToCart'),
      //static value
      deliveryOption: deliveryOption
    };
    var eventInfo = {
      eventInfo: eventInfoName
    };
    var eventInfoNameVal = new Array();
    var bopisItems = [];

    if ($('.secondarySizesWrap').length == 0) {
      //FIXME: check productStockMessage and productAddedFrom logic
      var bopisItem = {
        productID: $(this).siblings('#pdp-ProductContent').val(),
        productSKU: $(this).siblings('#pid').val(),
        productAddedFrom: productAddedFrom,
        productName: formatString($('.pdp-main-fis .product-name').text().trim()),
        productStockMessage: 'IN_STOCK',
        productPrice: Number(productPrice).toFixed(2),
        productPriceType: productPriceType,
        productTotal: Number(productPrice).toFixed(2),
        productQty: 1,
        productStore: deliveryOption == 'pickupinstore' ? $(this).siblings('#storeID').val() : '',
        productDivision: digitalData.page.pageType == 'cart' ? 'cart' : $('.menu-category .current-division > button').text().trim(),
        productBrand: $('.pdp-main-fis .brand-name').text().trim(),
        productCategory: digitalData.page.pageType == 'cart' ? 'cart' : $('.js-cat-name').eq(0).val(),
        productWebCategory: productWebCat,
        productCtlParent: '',
        productRating: '',
        productReviews: '',
        productFit: productFit,
        productPersonalized: '',
        productMonogram: '',
        productVariant: '',
        productSize: '',
        productColor: '',
        productRecipeID: '',
        isInStorePickup: deliveryOption == 'pickupinstore',
        isProductFit: productFit != '',
        cyoProductPrice: '',
        cyoDtgFlag: '',
        cyoProductFlag: '',
        giftCardType: '',
        giftCardMessage: '',
        personalizationType: 'false',
        virtualstoreid: digitalData.page.virtualstoreid ? digitalData.page.virtualstoreid : '',
        productFindingMethod: digitalData.product && digitalData.product.item[0].productFindingMethod || '',
        crossSellType: digitalData.product && digitalData.product.item[0].crossSellType || ''
      };
      bopisItems.push(bopisItem);
    } else {//FIXME: BOPIS sheeting/towels
    }

    eventInfoNameVal.push(eventInfo);
    digitalCustomData.event = eventInfoNameVal;
    digitalCustomData.product = {
      item: bopisItems
    };
    digitalCustomData.page = digitalData.page;
    digitalCustomData.page.pageName = pagename;
    digitalCustomData.page.pdpTemplate = pdpTemplate;
    digitalCustomData.user = user;
    digitalData = digitalCustomData;
  }); //Add To Cart click for sheeting/towels

  $('[class*="add-all-to-cart"]:button').off('click').on('click', function (e) {
    if ($('.Profanity').length > 0) {
      $(this).closest('.pdpForm').validate();

      if (!$('.Profanity').valid()) {
        e.preventDefault();
        e.stopPropagation();
        return;
      }
    }

    var pagename = formatString(digitalData.page.pageName);
    var pdpTemplate = 'multiplePDP';
    var prodWebCategory, embroideryColor, embroideryStyle, prodCtlParent;
    var searchTerms = '';
    var searchRedirect = '';
    var isSearchRedirect = false;
    var searchParams = new URLSearchParams(window.location.search);
    searchTerms = searchParams.get('searchTerms');
    searchRedirect = searchParams.get('redirect');
    prodWebCategory = searchParams.get('webcat');
    var isSearchRedirect = searchTerms !== '' && searchRedirect === '' ? true : false;
    var selectedBeddingName = $('h1').text().trim() + ' - ' + $(this).closest('.product-detail-section').find('.product-name').text().trim();
    var selectedBeddingPrice = $(this).closest('.product-detail-section').find('.standardPrice').length > 0 ? $(this).closest('.product-detail-section').find('.standardPrice') : $(this).closest('.product-detail-section').find('.js-product-standard-prices');
    var user = digitalData.user;
    var digitalCustomData = {};
    var eventInfoName = {
      eventName: eventNamevalue('addToCart') //static value

    };
    var eventInfo = {
      eventInfo: eventInfoName
    };
    var eventInfoNameVal = new Array();
    eventInfoNameVal.push(eventInfo);
    digitalCustomData.event = eventInfoNameVal;
    var items = [];
    var customDiv = $('UL.personalize-checkbox DIV.field-wrapper INPUT.input-checkbox')[0]; //Complete the look

    if ($(this).parents('.look-product-top-content').length > 0) {
      //prodWebCategory = 'completethelook';
      prodCtlParent = $('.product-number span').eq(0).data('masterid');
    } else if (prodWebCategory == 'completethelook') {
      prodCtlParent = sessionStorage.getItem("ctlParent");
    }

    if (!prodWebCategory || webcatsForCleaning.includes(prodWebCategory)) {
      prodWebCategory = digitalData.product.item[0].productCategory;
    } else if (prodWebCategory.indexOf('#') > -1) {
      prodWebCategory = prodWebCategory.split('#')[0];
    }

    var prodWebcatFormatted = prodWebCategory.replace(/\//g, '-').replace(/ /g, '-').toLowerCase();

    if (customDiv && customDiv.checked) {
      embroideryColor = $('.personalize-open .attribute .personalize-selected-clr').text().trim().toLowerCase();
      embroideryStyle = $('.personalize-open .attribute.personalize-char .selected-val.selected').text().trim().toLowerCase();
    }

    for (var i = 0; i < selectedBeddingPrice.length; i++) {
      if ($(selectedBeddingPrice[i]).text() == '' && $(selectedBeddingPrice[i]).val() == '') {
        continue;
      }

      var prodPID = $(selectedBeddingPrice[i]).parent().siblings('.masterProductID').val();
      var prodQty = Number($(selectedBeddingPrice[i]).parent().siblings('.inventoryPDP').find('.transformToDropdownPDP').val());
      var prodType = $(selectedBeddingPrice[i]).parent().siblings('.secondarySizesWrap').find('.secondarySizesUrl').val() ? ' - ' + $(selectedBeddingPrice[i]).parent().siblings('.secondarySizesWrap').find('.secondarySizesUrl').val() : '';
      var prodSize = $(selectedBeddingPrice[i]).parent().siblings('.size').find('.towel-name').text();
      var prodColor = $(selectedBeddingPrice[i]).closest('.attribute-group').find('.colorswatch').data('color');
      var prodSalesPrice = $(selectedBeddingPrice[i]).parent().find('.salesPrice.active').text() ? $(selectedBeddingPrice[i]).parent().find('.salesPrice.active').text().substr(1) : $(selectedBeddingPrice[i]).siblings('.js-product-sales-price').val();
      var prodStandardPrice = $(selectedBeddingPrice[i]).text().substr(1) || $(selectedBeddingPrice[i]).val();
      var prodName = selectedBeddingName + ' - ' + prodSize + prodType;
      var prodPrice = Number(prodSalesPrice || prodStandardPrice);
      var prodPriceType = !prodSalesPrice || prodSalesPrice == prodStandardPrice ? 'FP' : 'MRKD';
      var prodSpecSku = $(selectedBeddingPrice[i]).parent().siblings('.sheetingPID').val() || $(selectedBeddingPrice[i]).parent().siblings('[name="pid"]').val(); //FIXME: check productStockMessage and productAddedFrom logic

      if (prodQty > 0) {
        var item = {
          productID: prodPID,
          productSKU: prodSpecSku,
          productAddedFrom: 'PDP',
          productQty: prodQty,
          productName: prodName,
          productColor: prodColor,
          productSize: prodSize,
          productVariant: prodColor + '|' + prodSize,
          productStockMessage: 'IN_STOCK',
          productPrice: prodPrice,
          productPriceType: prodPriceType,
          productTotal: prodPrice * prodQty,
          productDivision: $('.menu-category .current-division > button').text().trim(),
          productBrand: $('.brand-name:first').text().trim(),
          productCategory: prodWebcatFormatted,
          productWebCategory: prodWebCategory,
          productCtlParent: prodCtlParent || '',
          productPersonalized: embroideryColor ? prodPID + ":" + embroideryColor + ":" + embroideryStyle : '',
          productMonogram: '',
          productRating: '',
          productReviews: '',
          productFit: '',
          productStore: '',
          isProductFit: false,
          isInStorePickup: false,
          cyoProductPrice: '',
          cyoDtgFlag: '',
          cyoProductFlag: '',
          giftCardType: '',
          giftCardMessage: '',
          personalizationType: embroideryColor ? 'true:monogram' : 'false',
          virtualstoreid: digitalData.page.virtualstoreid ? digitalData.page.virtualstoreid : '',
          productFindingMethod: digitalData.product.item[0].productFindingMethod || '',
          crossSellType: digitalData.product.item[0].crossSellType || ''
        };
        items.push(item);
      }
    } //Users can click add to bag with no valid products so we need to check the item list before continuing


    if (items.length == 0) {
      return;
    }

    digitalCustomData.product = {
      item: items
    };
    digitalCustomData.page = {
      pageName: pagename,
      pdpTemplate: pdpTemplate
    };
    digitalCustomData.attributes = {
      isAppliedPromoActive: $(this).data('coupon') == true ? 'yes' : 'no',
      isImplicitPromoActive: $(this).data('promo') == true ? 'yes' : 'no'
    };
    digitalCustomData.user = user;
    digitalData = digitalCustomData;
  }); //Carousel click - starting with OOS but any additional carousel clicks to be handled here

  $(document).off('click', 'a[class*="carousel"]').on('click', 'a[class*="carousel"]', function () {
    if (this.className.includes('oos-btn')) {
      var direction = $(this).hasClass('oos-btn-prev-0') ? 'previous' : 'next';
      var eventInfoVal = [];
      var items = [];
      var eventInfo = {
        eventName: eventNamevalue(direction + 'Click'),
        eventPlacement: 'oos'
      };
      var productDiv = $(this).siblings('#oos-similar-caro').find('.swiper-slide-active .product-tile');
      var productID = productDiv.data('itemid');
      var productBrand = productDiv.children('.brand-name').text().trim();
      var productName = productDiv.children('.product-name').text().trim();
      var item = {
        productID: productID,
        productBrand: productBrand,
        productName: productName
      };
      eventInfoVal.push(eventInfo);
      items.push(item);
      digitalData.event = eventInfoVal;
      digitalData.product = {
        item: items
      };
    } else if (isCM && $(this).closest('.look-carousel').length > 0) {
      var direction = $(this).hasClass('single-btn-prev-0') ? 'previous' : 'next';
      var eventInfoVal = [];
      var eventInfo = {
        eventName: eventNamevalue(direction + 'Click'),
        eventPlacement: 'completethelook'
      };
      var productDiv = $(this).siblings('.horizontal-carousel').find('.swiper-slide-active .tile-product-info');
      var productID = productDiv.find('.product-number > span').data('masterid');
      var productBrand = 'Club Monaco';
      var productName = productDiv.find('.product-name').eq(0).text().trim();
      digitalData.attributes = {
        productID: productID,
        productBrand: productBrand,
        productName: productName
      };
      eventInfoVal.push(eventInfo);
      digitalData.event = eventInfoVal;
    }
  }); //change of category grid sort
  //desktop up uses custom select - mobile down uses normal select

  if ($(window).width() > 959) {
    $('#grid-sort-header').off('click').on('selectmenuchange', function () {
      var pagename = formatString(digitalData.page.pageName);

      if (digitalData.product) {
        delete digitalData.product;
      }

      if (digitalData.search) {
        delete digitalData.search;
      }

      var eventInfoName = {
        eventName: eventNamevalue('pageSort') //static value

      };
      var eventInfo = {
        eventInfo: eventInfoName
      };
      var eventInfoNameVal = new Array();
      eventInfoNameVal.push(eventInfo);
      digitalData.event = eventInfoNameVal;
      digitalData.attributes = {
        categorySortSelection: $(this).find(':selected').text()
      };
      digitalData.page = {
        pageName: pagename
      };
    });
  } else {
    $('#grid-sort-header').off('click').on('change', function () {
      var pagename = formatString(digitalData.page.pageName);

      if (digitalData.product) {
        delete digitalData.product;
      }

      if (digitalData.search) {
        delete digitalData.search;
      }

      var eventInfoName = {
        eventName: eventNamevalue('pageSort') //static value

      };
      var eventInfo = {
        eventInfo: eventInfoName
      };
      var eventInfoNameVal = new Array();
      eventInfoNameVal.push(eventInfo);
      digitalData.event = eventInfoNameVal;
      digitalData.attributes = {
        categorySortSelection: $(this).find(':selected').text()
      };
      digitalData.page = {
        pageName: pagename
      };
    });
  } //click of continue payment button giftbox singleshipping


  $('[name$="_shippingAddress_save"]').on('click', function () {
    if ($('input.giftBox-dataLayer').length > 0 && $('input.giftBox-dataLayer').val() != '') {
      var pageName = formatString(digitalData.page.pageName);
      var digitaldataGift = {};
      var eventInfoName = {
        eventName: eventNamevalue('addToCart') //static value

      };
      var eventInfo = {
        eventInfo: eventInfoName
      };
      var eventInfoNameVal = new Array();
      eventInfoNameVal.push(eventInfo);
      digitaldataGift.event = eventInfoNameVal;
      digitaldataGift.user = digitalData.user;
      digitaldataGift.page = {
        pageName: pageName
      };
      digitaldataGift.product = {
        item: JSON.parse($('input.giftBox-dataLayer').val())
      };
      digitaldataGift.attributes = {
        isAppliedPromoActive: 'no',
        isImplicitPromoActive: 'no'
      };
      digitalData = digitaldataGift;
    }
  }); //click of continue payment button giftbox multipage

  $('[name$="_shippingOptions_save"]').on('click', function () {
    var item = new Array();
    var pageName = formatString(digitalData.page.pageName);
    var promoapply = false;
    var couponapply = false;
    var digitaldataGift = {};
    digitaldataGift.product = {};
    digitaldataGift.user = digitalData.user;
    $('.checkoutmultishipping .cart-row .product-list-item a').each(function () {
      var promo = $(this).data('promo');
      var coupon = $(this).data('coupon');

      if (promo) {
        promoapply = true;
      }

      if (coupon) {
        couponapply = true;
      }

      item.push({
        productID: $(this).data('masterid') + '',
        productName: formatString($(this).data('pname')),
        productAddedFrom: formatString($(this).data('webcat')),
        productQuantity: $(this).data('qty') + '',
        productReviewRating: '',
        productSKU: $(this).data('productsku') + '',
        productReviewCount: '',
        productPrice: $(this).closest('.name').find('.js-product-price').val(),
        productWebCategory: formatString($(this).data('webcat')),
        productStockMessage: formatString($(this).data('stockmsg')),
        productPriceType: $(this).data('pricetype')
      });
      digitaldataGift.product.item = item;
    });
    var eventInfoName = {
      eventName: eventNamevalue('addToCart') //static value

    };
    var eventInfo = {
      eventInfo: eventInfoName
    };
    var eventInfoNameVal = new Array();
    eventInfoNameVal.push(eventInfo);
    digitaldataGift.event = eventInfoNameVal;
    digitaldataGift.page = {
      pageName: pageName
    };
    digitaldataGift.attributes = {
      isAppliedPromoActive: couponapply + '',
      isImplicitPromoActive: promoapply + ''
    };
    digitalData = digitaldataGift;
  }); //click on category grid refinement Left

  $(document).off('click touchend', '.refinement a, .refinement li #price-slider').on('click touchend', '.refinement a, .refinement li #price-slider', function (event) {
    if (event.type == 'touchend' && this.id != 'price-slider' || Resources.CURRENT_SITE.indexOf('ClubMonaco') > -1) {
      return;
    }

    var digitalDataRef = {};

    if ($(this).closest('#category-level-2').length > 0 || $(this).closest('#category-level-1').length > 0 || $(this).closest('.clear-all').length > 0) {
      return;
    }

    var pagename = formatString(digitalData.page.pageName);
    var stackedrefine = '';
    var reftype = '';
    var eventInfoName = {
      eventName: eventNamevalue('pageRefinementLeft') //static value

    };
    var eventInfo = {
      eventInfo: eventInfoName
    };
    var eventInfoNameVal = new Array();
    eventInfoNameVal.push(eventInfo);
    digitalDataRef.event = eventInfoNameVal; //Get unique refinement type for any previously selected refinement

    $('.refinements .selected a').each(function () {
      var refine = $(this).closest('.refinement').find('.RefineTitle').val();

      if (stackedrefine.indexOf(refine) < 0) {
        stackedrefine = stackedrefine == '' ? refine : stackedrefine + '|' + refine;
      }
    }); //Add current refinement if it isn't already in the string

    if ($(this).closest('li').hasClass('selected') == false) {
      var refineval = $(this).closest('.refinement').find('button .RefineTitle').val();

      if (stackedrefine.indexOf(refineval) < 0) {
        stackedrefine = stackedrefine == '' ? refineval : stackedrefine + '|' + refineval;
      }
    } //Need to revisit this later


    if ($(this).closest('li').hasClass('selected') == true) {
      reftype = $(this).closest('.refinement').find('button .RefineTitle').val();
      stackedrefine = stackedrefine == '' ? reftype : stackedrefine + '|' + reftype;
    } else {
      reftype = $(this).closest('.refinement').find('button .RefineTitle').val();
    } //Handle deselections


    if ($(this).closest('li').hasClass('selected') == true) {
      var refine = $(this).closest('.refinement').find('button .RefineTitle').val();

      try {
        if (stackedrefine.indexOf(refine + '|') >= 0) {
          stackedrefine = stackedrefine.replace(refine + '|', '');
        }

        if (stackedrefine.indexOf('|' + refine) >= 0) {
          stackedrefine = stackedrefine.replace('|' + refine, '');
        }

        if (stackedrefine.indexOf(refine) >= 0) {
          stackedrefine = stackedrefine.replace(refine, '');
        }
      } catch (e) {}
    } //Special case for previously selected price refinement


    if ($('.price-refinment-header .selectiontotal').text() != "" && stackedrefine.toLowerCase().indexOf('price') < 0) {
      stackedrefine = stackedrefine + '|Price';
    }

    digitalDataRef.attributes = {
      refinementType: formatString(reftype),
      refinementValue: this.id == 'price-slider' ? $('.min-price-lbl').text() + ' ' + $('.max-price-lbl').text() : formatString($(this).find('.RefineValue').val()),
      stackedRefinedType: formatString(stackedrefine)
    };
    digitalDataRef.page = {
      pageName: pagename
    };
    digitalData = digitalDataRef;
  }); //click on product set products on PDP

  $('.product-set-item .sub-product-item').off('click').on('click', function () {
    clickpersonal($(this));
    var pagename = formatString(digitalData.page.pageName);
    var StandardPrice = $(this).closest('.product-set-details').find('.js-product-standard-prices').val();
    var Salesprice = $(this).closest('.product-set-details').find('.js-product-sales-price').val();
    var productPrice = Salesprice != '' ? Salesprice : StandardPrice;
    productPrice = $(this).closest('.product-set-details').find('.js-product-normal-prices').length > 0 ? $(this).closest('.product-set-details').find('.js-product-normal-prices').val() : productPrice;
    var productPriceType = StandardPrice == Salesprice ? 'FP' : 'MRKD';
    productPriceType = $('.js-product-promo-price').length > 0 ? 'PROMO' : productPriceType;
    var eventInfoName = {
      eventName: eventNamevalue('addToCart') //static value

    };
    var eventInfo = {
      eventInfo: eventInfoName
    };
    var quantity = $(this).closest('.product-add-to-cart').find('[name$="Quantity"]').val() != undefined ? $(this).closest('.product-add-to-cart').find('[name$="Quantity"]').val() : '1';
    var eventInfoNameVal = new Array();
    eventInfoNameVal.push(eventInfo);
    digitalData.event = eventInfoNameVal;
    digitalData.product = {
      item: {
        productID: $(this).data('masterid').toString(),
        productSKU: $(this).data('productsku').toString(),
        productName: formatString($(this).data('pname')),
        productStockMessage: formatString($(this).data('stockmsg')),
        productWebCategory: formatString($(this).data('webcat')),
        productQuantity: quantity,
        productPrice: (new Number(productPrice) * new Number(quantity)).toFixed(2) + '',
        productPriceType: productPriceType,
        productAddedFrom: 'pdp',
        productReviewRating: '',
        productReviewCount: ''
      }
    };
    digitalData.page = {
      pageName: pagename,
      pdpTemplate: 'productSetPDP'
    };
    digitalData.attributes = {
      isAppliedPromoActive: $(this).data('coupon') == true ? 'yes' : 'no',
      isImplicitPromoActive: $(this).data('promo') == true ? 'yes' : 'no'
    };
  }); //click on remove product in cart page

  $('.product-list-item .remove-item').off('click').on('click', function () {
    var digitalDataRemove = {};
    var pagename = formatString(digitalData.page.pageName);
    delete digitalData.cart;
    digitalDataRemove.event = {
      eventInfo: {
        eventName: eventNamevalue('removeFromCart') //static value

      }
    };
    digitalDataRemove.product = {
      item: {
        productID: $(this).data('pid').toString(),
        productSKU: $(this).attr('data-productSKU'),
        productName: formatString($(this).data('name'))
      }
    };
    digitalDataRemove.page = {
      pageName: pagename
    };
    digitalData = digitalDataRemove;
  }); //Submit return/exchange

  $('button[name=dwfrm_orderreturn_finalize]').off('click').on('click', function () {
    var digitalCustomData = {};
    var pagename = formatString(digitalData.page.pageName);
    var eventInfoName = {
      eventName: eventNamevalue('returnOrExchange') //static value

    };
    var eventInfo = {
      eventInfo: eventInfoName
    };
    var eventInfoNameVal = new Array();
    eventInfoNameVal.push(eventInfo);
    digitalCustomData.event = eventInfoNameVal;
    var returnItems = [];
    var methodText = $('.returns-item').eq(0).find('.item-section-content .details-row').last().find('.detail-value').text().trim().toLowerCase();
    var orderid = $($('.returns-item')[0]).data('orderid');
    $('.returns-item').each(function (i) {
      var returnRow = $(this);
      var returnItem = {};
      var reasonText = returnRow.find('.item-section-content .details-row').eq(1).find('.detail-value.rl-only').text().replace(/[\n\r]null/g, '').trim().toLowerCase();
      var primaryReason = reasonText.split(',')[0].trim().toLowerCase() || '';
      var secondaryReason = reasonText.split(',')[1].trim().toLowerCase() || '';
      returnItem.isExchange = returnRow.data('action') == 'exchange';
      returnItem.isReturn = returnRow.data('action') == 'return';
      returnItem.isGiftReturn = returnRow.data('action') == 'gift return';
      returnItem.productId = returnRow.data('mfg');
      returnItem.skuId = returnRow.data('productid');
      returnItem.qty = parseInt(returnRow.data('quantity'));
      returnItem.primaryReason = primaryReason;
      returnItem.secondaryReason = secondaryReason;
      returnItem.method = methodText;
      returnItem.orderId = orderid;
      returnItems.push(returnItem);
    });
    var returnExchange = {};
    returnExchange.items = returnItems;
    digitalCustomData.page = {
      pageName: pagename
    };
    digitalCustomData.returnExchange = returnExchange;
    digitalData = digitalCustomData;
  }); //click on add to wishlist in cart page

  $('.js-add-to-wishlist').on('click', function () {
    if (SitePreferences.ANALYTICS_ENABLED != null && SitePreferences.ANALYTICS_ENABLED != undefined && SitePreferences.ANALYTICS_ENABLED) {
      dataLayer.push = {
        event: 'saveProduct',
        eventLabel: $(this).data('pid')
      };
    }
  }); //Add item to wishlist in PDP page

  $(document).on('click', '.js-wishlist', function () {
    if (SitePreferences.ANALYTICS_ENABLED != null && SitePreferences.ANALYTICS_ENABLED != undefined && SitePreferences.ANALYTICS_ENABLED) {
      dataLayer.push = {
        event: 'saveProduct',
        eventLabel: $('.add-to-cart').data('pid')
      };
    }
  }); //click on proceed to checkout in cart page

  $('[name$="cart_checkoutCart"]').on('click', function () {
    var pagename = formatString(digitalData.page.pageName);
    var eventInfoName = {
      eventName: eventNamevalue('cartCheckoutClick') //static value

    };
    var eventInfo = {
      eventInfo: eventInfoName
    };
    var eventInfoNameVal = new Array();
    eventInfoNameVal.push(eventInfo);
    digitalData.event = eventInfoNameVal;
    digitalData.attributes = {
      proceedCheckoutButtonLocation: $(this).data('button')
    };
    digitalData.page = {
      pageName: pagename
    };
  }); //click to procced to checkout on cart page

  $('.mini-cart-link-checkout').on('click', function () {
    var pageLocale = Resources.CURRENT_LOCALE;
    var pagename = pageLocale + ':' + 'minicart';

    if (digitalData.cart) {
      delete digitalData.cart;
    }

    if (digitalData.product) {
      delete digitalData.product;
    }

    if (digitalData.search) {
      delete digitalData.search;
    }

    var eventInfoName = {
      eventName: eventNamevalue('minicartCheckoutClick') //static value

    };
    var eventInfo = {
      eventInfo: eventInfoName
    };
    var eventInfoNameVal = new Array();
    eventInfoNameVal.push(eventInfo);
    digitalData.event = eventInfoNameVal;
    digitalData.page = {
      pageName: formatString(pagename)
    };
  }); //click on paypal button on checkout

  $('.paypalButton').on('click', function () {
    var pagename = formatString(digitalData.page.pageName);

    if (digitalData.cart) {
      delete digitalData.cart;
    }

    var eventInfoName = {
      eventName: eventNamevalue('checkoutPayPal') //static value

    };
    var eventInfo = {
      eventInfo: eventInfoName
    };
    var eventInfoNameVal = new Array();
    eventInfoNameVal.push(eventInfo);
    digitalData.event = eventInfoNameVal;
    digitalData.page = {
      pageName: pagename
    };
  }); //click of minicart viewbag link event

  $('.mini-cart-link-cart').on('click', function () {
    var pageLocale = Resources.CURRENT_LOCALE;
    var pagename = pageLocale + ':' + 'minicart';

    if (digitalData.cart) {
      delete digitalData.cart;
    }

    if (digitalData.product) {
      delete digitalData.product;
    }

    if (digitalData.search) {
      delete digitalData.search;
    }

    var eventInfoName = {
      eventName: eventNamevalue('minicartBagClick') //static value

    };
    var eventInfo = {
      eventInfo: eventInfoName
    };
    var eventInfoNameVal = new Array();
    eventInfoNameVal.push(eventInfo);
    digitalData.event = eventInfoNameVal;
    digitalData.page = {
      pageName: formatString(pagename)
    };
  }); //Cartographer

  $(document).off('click', '.question-group-next button, .question-group-submit button, .shows-recommendations').on('click', '.question-group-next button, .question-group-submit button, .shows-recommendations', function () {
    if (typeof questionsArray === 'undefined') {
      window.questionsArray = new Array();
    }

    var questionNumber = parseInt($(this).closest('.question-group').data('question-group-index'));
    var $question = $(this).closest('.question-group').find('.question');
    var $questionsOptionsInputs = $question.find('.question-options .question-choices input');
    var title = 'q' + questionNumber;
    var selections = new Array();
    $questionsOptionsInputs.each(function () {
      if ($(this).is(':checked')) {
        var selection = $(this).closest('.question-choice').find('input').data('slug');
        selections.push(selection);
      }
    });

    if (selections.length > 0) {
      var quizQuestion = {
        title: title,
        selection: selections
      };
      questionsArray.push(quizQuestion);
      digitalData.questions = questionsArray;
    }
  });
  $(document).off('click', '.question-group-back button').on('click', '.question-group-back button', function () {
    questionsArray.pop();
    digitalData.questions = questionsArray;
  }); //checkout with paypal event

  $('.checkout-paypal').on('click', function () {
    var pagename = formatString(digitalData.page.pageName);

    if (digitalData.cart) {
      delete digitalData.cart;
    }

    var eventInfoName = {
      eventName: eventNamevalue('checkoutPayPal') //static value

    };
    var eventInfo = {
      eventInfo: eventInfoName
    };
    var eventInfoNameVal = new Array();
    eventInfoNameVal.push(eventInfo);
    digitalData.event = eventInfoNameVal;
    digitalData.page = {
      pageName: pagename
    };
  });
  var pagename = '';
  $(window).on('load', function (e) {
    e.preventDefault();
    var eventInfoName;
    var eventInfo;
    var eventInfoNameVal = new Array();

    if ($('.storesCount').length > 0) {
      var storecount = $('.storesCount').val();
      pagename = formatString(digitalData.page.pageName);
      eventInfoName = {
        eventName: eventNamevalue('zipCodeSearch') //static value

      };
      eventInfo = {
        eventInfo: eventInfoName
      };
      eventInfoNameVal = new Array();
      eventInfoNameVal.push(eventInfo);
      digitalData.event = eventInfoNameVal;
      digitalData.attributes = {
        storeFoundSuccess: 'yes',
        storeResultCount: storecount,
        locationSearched: $('.postalCode').val()
      };
    }

    if ($('.LoginLocation').val() == 'header' || $('.LoginLocation').val() == 'MyAccountLogin' || $('.LoginLocation').val() === 'gated sale') {
      pagename = digitalData.page.pageName;
      eventInfoName = {
        eventName: eventNamevalue('accountSignIn') //static value

      };
      eventInfo = {
        eventInfo: eventInfoName
      };
      var addEvent = true;

      if (digitalData.event && digitalData.event.length > 0) {
        eventInfoNameVal = digitalData.event;

        for (var i = 0; i < eventInfoNameVal.length; i++) {
          if (eventInfoNameVal[i].eventInfo.eventName.includes("accountSignIn")) {
            //update the existing event
            eventInfoNameVal[i] = eventInfo;
            addEvent = false;
            break;
          }
        }
      } else {
        eventInfoNameVal = new Array();
      }

      if (addEvent) {
        eventInfoNameVal.push(eventInfo);
      }

      digitalData.event = eventInfoNameVal;
      digitalData.page = {
        pageName: pagename
      };

      if (digitalData.attributes) {
        digitalData.attributes.accountSigninLocation = $('.LoginLocation').val();
      } else {
        digitalData.attributes = {
          accountSigninLocation: $('.LoginLocation').val()
        };
      }

      if ($('.gatedSaleSignIn').val()) {
        digitalData.attributes.gatedSaleSignIn = $('.gatedSaleSignIn').val();
      }
    }

    if ($('.accountsignin').val() == 'createAccount' && $('input.update-profile-success').length == 0) {
      pagename = formatString(digitalData.page.pageName);
      eventInfoName = {
        eventName: eventNamevalue('myAccountComplete') //static value

      };
      eventInfo = {
        eventInfo: eventInfoName
      };
      eventInfoNameVal = new Array();
      eventInfoNameVal.push(eventInfo);
      digitalData.event = eventInfoNameVal;
      digitalData.page = {
        pageName: pagename
      };

      if ($('.LoginLocation').val() === 'gated sale') {
        digitalData.attributes = {
          accountCreationLocation: 'gated sale',
          gatedSaleCreation: $('.gatedSaleCreation').val()
        };
      } else {
        digitalData.attributes = {
          accountCreationLocation: 'registration'
        };
      }
    }

    if ($('div.sucess-checkedorder').length > 0) {
      eventInfoName = {
        eventName: eventNamevalue('checkOrderStatus') //static value

      };
      eventInfo = {
        eventInfo: eventInfoName
      };
      eventInfoNameVal = new Array();
      eventInfoNameVal.push(eventInfo);
      digitalData.event = eventInfoNameVal;
      digitalData.page = {
        pageName: formatString(digitalData.page.pageName.replace('OrderDetails', 'check order status')) //static value

      };
      digitalData.attributes = {
        checkOrderStatusSuccess: 'true',
        checkOrderStatusOrderNumber: $('div.order-date .order-number').text(),
        checkOrderStatusOrderStatus: $($('div.shipping-status div.shipping-status-order')[0]).text()
      };
    } else if ($('div.failed-checkedorder').length > 0) {
      eventInfoName = {
        eventName: eventNamevalue('checkOrderStatus') //static value

      };
      eventInfo = {
        eventInfo: eventInfoName
      };
      eventInfoNameVal = new Array();
      eventInfoNameVal.push(eventInfo);
      digitalData.event = eventInfoNameVal;
      digitalData.page = {
        pageName: formatString(digitalData.page.pageName.replace('MyAccountLogin', 'check order status')) //static value

      };
      digitalData.attributes = {
        checkOrderStatusSuccess: 'false',
        checkOrderStatusOrderNumber: $('.FindOrderNumber-error').val(),
        checkOrderStatusOrderStatus: ''
      };
    }

    $('.print-return-btn button.print-return').on('click', function () {
      eventInfoName = {
        eventName: eventNamevalue('printConfirmation') //static value

      };
      eventInfo = {
        eventInfo: eventInfoName
      };
      eventInfoNameVal = new Array();
      eventInfoNameVal.push(eventInfo);
      digitalData.event = eventInfoNameVal;
      digitalData.user = digitalData.user;
      digitalData.page = {
        pageName: formatString(digitalData.page.pageName.replace('OrderDetails', 'confirmation'))
      };
      digitalData.attributes = digitalData.attributes;
    });
    $('button.storesFind').off();
    $('button.storesFind').on('click', function (e) {
      e.preventDefault();
      var codeVal = '';
      var findType = '';
      var $this = $(this);
      var $searchKey = $this.closest('fieldset').find('input.searchKey');
      var searchRegex = new RegExp('[\/|\\\\]');
      var showPatternError = $searchKey.val() && searchRegex.test($searchKey.val());

      if (showPatternError && !$searchKey.siblings('span.error.regex').length) {
        $("<span id='" + $searchKey.attr('name') + "-error'" + " class='error regex'>" + window.Resources.STORE_PATTERN_ERROR + "</span>").insertAfter($searchKey);
        return;
      } else if (showPatternError) {
        $searchKey.siblings('span.error.regex').text(window.Resources.STORE_PATTERN_ERROR);
        $searchKey.siblings('span.error.regex').show();
        return;
      } else {
        $searchKey.siblings('span.error.regex').remove();
      }

      findType = $(this).closest('form').find('input[name$="findByValue"]').val();

      if ($(this).closest('form').find('input[name$="_storelocator_postalCode"]').val() != undefined) {
        codeVal = $(this).closest('form').find('input[name$="_storelocator_postalCode"]').val();
        findType = 'ZipCodeSearch';
      }

      if ($(this).closest('form').find('select[name$="_storelocator_country"]').val() != undefined) {
        codeVal = $(this).closest('form').find('select[name$="_storelocator_country"]').val();
        findType = 'CountrySearch';
      }

      if ($(this).closest('form').find('select[name$="_storelocator_state"]').val() != undefined) {
        codeVal = $(this).closest('form').find('select[name$="_storelocator_state"]').val();
        findType = 'StateSearch';
      }

      if ($(this).closest('form').find('select[name$="_storelocator_searchkey"]').val() != undefined) {
        codeVal = $(this).closest('form').find('select[name$="_storelocator_searchkey"]').val();
        findType = 'KeySearch';
      }

      if ($('.input-text.searchKey').val().length > 0) {
        var searchKey = $('.input-text.searchKey').val().toLowerCase();
        var countryname = '';
        var splitContent = '';

        if (searchKey.split(' ').length > 1) {
          for (var i = 0; i < searchKey.split(' ').length; i++) {
            splitContent = searchKey.split(' ')[i];

            if (i > 0) {
              countryname = countryname + ' ';
            }

            countryname = countryname + splitContent.charAt(0).toUpperCase() + splitContent.slice(1);
          }

          searchKey = countryname;
        } else {
          searchKey = searchKey.charAt(0).toUpperCase() + searchKey.slice(1);
        }

        if ($('.store-locator').find('.input-select.country option[label="' + searchKey + '"]').length > 0) {
          searchKey = $('.store-locator').find('.input-select.country option[label="' + searchKey + '"]').val();
          $(this).closest('form').find('input[name=countryCode]').val(searchKey);
        }
      }

      var pagename = digitalData.page.pageName;
      var storeFoundSuccessValue = 'no';
      var storeResultCount = '0';
      var applyName = $(this).attr('name');
      var data = $(this).closest('form').serialize() + '&' + applyName + '=x';
      var url = util.appendParamsToUrl($(this).closest('form').attr('action'), {
        format: 'ajax'
      });
      $.ajax({
        url: url,
        type: 'GET',
        data: data,
        success: function success(data) {
          storeResultCount = data.count;
          eventInfoName = {
            eventName: eventNamevalue(findType) //static value

          };
          eventInfo = {
            eventInfo: eventInfoName
          };
          eventInfoNameVal = new Array();
          eventInfoNameVal.push(eventInfo);
          digitalData.event = eventInfoNameVal;
          digitalData.page = {
            pageName: pagename
          };

          if (storeResultCount > 0) {
            storeFoundSuccessValue = 'yes';
          }

          if (storeResultCount === undefined) {
            storeResultCount = 0;
          }

          digitalData.attributes = {
            storeFoundSuccess: storeFoundSuccessValue,
            storeResultCount: storeResultCount.toString(),
            locationSearched: codeVal
          };

          if (digitalData.product) {
            delete digitalData.product;
          }

          $this.closest('form').find('button[type="submit"]').trigger('click');
        }
      });
    });
    $('.name-list ul li a').on('click', function () {
      var user = digitalData.user;
      var pageNameVal = digitalData.page.pageName;
      var digitalCustomData = {};
      digitalCustomData.page = {
        pageName: formatString(pageNameVal)
      };
      eventInfoName = {
        eventName: eventNamevalue('countryChanged') //static value

      };
      eventInfo = {
        eventInfo: eventInfoName
      };
      eventInfoNameVal = new Array();
      eventInfoNameVal.push(eventInfo);
      digitalCustomData.event = eventInfoNameVal;
      digitalCustomData.user = user;
      digitalData = digitalCustomData;
    }); //Different code needs to be maintained for EU and US. EU sends mobileMenuClose any time the user clicks "back", which does not actually close the menu
    //US does this explicitly when the menu is collapsed

    $('.menu-toggle').on('click', function () {
      if ($(this).attr('aria-expanded') == 'true') {
        captureClickEvent('mobileMenuOpen', null);
      } else {
        captureClickEvent('mobileMenuClose', null);
      }
    });

    if (!Resources.CURRENT_LOCALE == 'en_US') {
      $('.menu-category .click-back.mobile-up').on('click', function () {
        captureClickEvent('mobileMenuClose', null);
      });
      $('.left-nav .menu-toggle').on('click', function () {
        captureClickEvent('mobileMenuOpen', null);
      });
    }

    $('#RegistrationForm button[name$="_profile_confirm"]').on('click', function () {
      var pageName = '';

      if ($(this).closest('form').valid() && $('input[name$="_customer_addtoemaillist"]').prop('checked')) {
        if ($('div.col-1-form .create-account').length > 0) {
          pageName = 'account';
        } else if ($('div.col-1-form .edit-account').length > 0) {
          pageName = 'account';
        } else {
          pageName = 'checkout';
        }

        emialSignUp(pageName);
      }

      if ($('div.col-1-form .edit-account').length > 0 && !$(this).closest('form').valid()) {
        accountUpdate();
      }
    });
    $('#email-alert-signup button[name$="home-email"]').on('click', function () {
      if ($('#email-alert-address').valid()) {
        emialSignUp('footer');
      }
    });
    $('#email-signup-modalForm button[name$="home-email"]').on('click', function () {
      if ($('#email-signup-modal').valid()) {
        emialSignUp('modal');
      }
    });

    if ($('input.update-profile-success').length > 0) {
      accountUpdate();
    }

    $('div.cx-widget').on('click', function () {
      chatEvent();
    });
    var user,
        page,
        attributes,
        digitalDataPromo = {},
        promoContent = new Array();
    $('.digitalData').each(function (index) {
      if (index == 0) {
        user = digitalData.user;
        page = digitalData.page;
        attributes = digitalData.attributes;
      }

      var promoitem = {
        promotionID: $(this).attr('promotionID') != undefined ? $(this).attr('promotionID') : '',
        promotionName: $(this).attr('promotionName') != undefined ? $(this).attr('promotionName') : '',
        promotionPosition: $(this).attr('promotionPosition') != undefined ? $(this).attr('promotionPosition') : '',
        promotionCreative: $(this).attr('promotionCreative') != undefined ? $(this).attr('promotionCreative') : ''
      };
      promoContent.push(promoitem);

      if ($('.digitalData').length == index + 1) {
        digitalDataPromo.user = user;
        digitalDataPromo.page = page;
        digitalDataPromo.attributes = attributes;
        digitalDataPromo.promo = promoContent;
        digitalData = digitalDataPromo;
      }
    }); //Store Locator

    $('button[name=dwfrm_storelocator_findbysearchkey]').on('click', function () {
      storeLocatorInteraction('localsearch', $("#dwfrm_storelocator_searchKey").val());
    });
    $('button[name=dwfrm_storelocator_findbycountry]').off('click').on('click', function () {
      storeLocatorInteraction('intlSearch', $('#dwfrm_storelocator_country option:selected').text());
    });
    $('input[name$=_storelocator_searchKey]').off('blur').on('blur', function () {
      storeLocatorInteraction('searchkeychange', $("#dwfrm_storelocator_searchKey").val());
    });
    $('#dwfrm_storelocator_maxdistance').off('change').on('change', function () {
      storeLocatorInteraction('radiuschange', $('#dwfrm_storelocator_maxdistance').val());
    });
    $('a[class^="store-directory-"]').off('click').on('click', function () {
      var clickType = $(this).attr('class').split('-')[2];
      var clickText = $(this).text().split(' (')[0];
      storeLocatorInteraction(clickType, clickText);
    });
  });
  setTimeout(function () {
    $('#s7viewer_swatches div.s7thumb').off('click').on('click', function () {
      captureClickEvent('altImageClick', 'product');
    });
    $('.s7innercontainer .s7zoominbutton').off('click').on('click', function () {
      captureClickEvent('clickToEnlarge', 'product');
    });
  }, 1000);
  $('.digitalData a').off('click').on('click', function () {
    var parentDiv = $(this).closest('.digitalData');
    var user = digitalData.user;
    var pageName = formatString(digitalData.page.pageName);
    var digitalCustomData = {};
    digitalCustomData.page = {
      pageName: pageName
    };
    var eventInfoName = {
      eventName: eventNamevalue('promotionClick') //static value

    };
    var eventInfo = {
      eventInfo: eventInfoName
    };
    var eventInfoNameVal = new Array();
    eventInfoNameVal.push(eventInfo);
    digitalCustomData.event = eventInfoNameVal;
    digitalCustomData.user = user;
    var promoCreative = $(this).attr('promotionCreative') != undefined ? $(this).attr('promotionCreative') : parentDiv.attr('promotionCreative') != undefined ? parentDiv.attr('promotionCreative') : '';
    var promoName = $(this).attr('promotionName') != undefined ? $(this).attr('promotionName') : parentDiv.attr('promotionName') != undefined ? parentDiv.attr('promotionName') : '';
    var promoID = $(this).attr('promotionID') != undefined ? $(this).attr('promotionID') : parentDiv.attr('promotionID') != undefined ? parentDiv.attr('promotionID') : '';
    var promoPosition = $(this).attr('promotionPosition') != undefined ? $(this).attr('promotionPosition') : parentDiv.attr('promotionPosition') != undefined ? parentDiv.attr('promotionPosition') : '';
    var promoclick = '';

    if (parentDiv.length > 0) {
      promoclick = {
        promotionID: promoID,
        promotionName: promoName,
        promotionPosition: promoPosition,
        promotionCreative: promoCreative
      };
      digitalCustomData.promo = promoclick;
    }

    digitalData = digitalCustomData;
  }); //Wardrobe landing carousel click, excludes content clicks within the product modal

  $(document).off('click', '.wardrobe-modules:not(.wardrobe-detail-promotional-carousel) .wardrobe-slide').on('click', '.wardrobe-modules:not(.wardrobe-detail-promotional-carousel) .wardrobe-slide', function () {
    if (!analyticsEnabled) {
      return;
    }

    try {
      var eventInfo = {
        eventName: eventNamevalue('wardrobeCarouselClick'),
        carouselText: $(this).find('.slide-heading').text().trim()
      };
      digitalData.event = eventInfo;
    } catch (e) {//Do Nothing
    }
  }); //Wardobe product links

  $(document).off('click', '.wardrobe-detail-product .product-tile a:not(.is-quick-shoppable)').on('click', '.wardrobe-detail-product .product-tile a:not(.is-quick-shoppable)', function () {
    if (!analyticsEnabled) {
      return;
    }

    try {
      var products = [];
      var productDiv = $(this).closest('.product-tile');
      var productID = productDiv.data('masterid');
      var productName = productDiv.data('pname');
      var clickType = 'complementary'; //YMAL/similar product tiles dont have associated data so we have to grab it elsewhere

      if ($(this).closest('.wardrobe-detail-ymal').length > 0) {
        clickType = 'similar';
      }

      ;
      products.push({
        productID: productID,
        productName: productName
      });
      var eventInfo = {
        eventName: eventNamevalue('wardrobeItemClick'),
        clickType: clickType,
        products: products
      };
      digitalData.event = eventInfo;
    } catch (e) {//Do Nothing
    }
  }); //Wardrobe product modal content

  $(document).off('click', '.wardrobe-detail-brand a, .wardrobe-detail-promotional-carousel a').on('click', '.wardrobe-detail-brand a, .wardrobe-detail-promotional-carousel a', function () {
    if (!analyticsEnabled) {
      return;
    }

    try {
      var clickType = 'BrandContent';
      var clickText = $('.brand-name-text span').eq(0).text().trim();

      if ($(this).closest('.wardrobe-detail-promotional-carousel').length > 0) {
        clickType = 'ComplementContent';
        clickText = $(this).siblings('.slide-text').find('.slide-heading').text().trim();
      }

      var eventInfo = {
        eventName: eventNamevalue('wardrobe' + clickType + 'Click'),
        carouselText: clickText
      };
      digitalData.event = eventInfo;
    } catch (e) {//Do Nothing
    }
  });
  $('button[name$="_homeinquiry_submitinquiryform"]').on('click', function () {
    var user = digitalData.user;
    var pageName = formatString(digitalData.page.pageName);
    var inquiryTopic = $(this).parents('form').find('select[name$="_homeinquiry_inquiry_InquiryTopic"]').find('option:selected').text();
    var digitalCustomData = {};
    digitalCustomData.page = {
      pageName: pageName
    };
    var eventInfoName = {
      eventName: "enquirySubmit" //static value

    };
    var eventInfo = {
      eventInfo: eventInfoName
    };
    var eventInfoNameVal = new Array();
    eventInfoNameVal.push(eventInfo);
    digitalCustomData.event = eventInfoNameVal;
    digitalCustomData.user = user;
    digitalCustomData.attributes = {
      inquiryTopic: inquiryTopic
    };
    digitalData = digitalCustomData;
  }); // Experian tracking - dtm.js cannot be required from SFRA version of the file as it is not in the build

  var isIntervalStart = false;

  function trackExperian(event) {
    if (event.target.id != 'shippingAddressOnedefault' && event.target.id != 'dwfrm_profile_address_address1') {
      return;
    }

    var startFunction;
    setTimeout(function () {
      if ($('.edq-global-intuitive-address-suggestions').is(":visible") && !isIntervalStart) {
        isIntervalStart = true;
        startFunction = setInterval(startFunction, 1000);
      }
    }, 1500);

    function stopFunction() {
      clearInterval(startFunction);
      isIntervalStart = false;
    }

    function startFunction() {
      try {
        if (!$('.edq-global-intuitive-address-suggestions').is(":visible") && $('.edq-global-intuitive-address-suggestions').find('.selected').length > 0) {
          stopFunction();
          var eventInfo = {
            eventName: eventNamevalue('experianAddressSelect')
          };
          digitalData.event = eventInfo;
        }
      } catch (error) {//Do nothing
      }
    }
  }

  if (digitalData.page.pageType == 'checkout' || digitalData.page.pageSubType == 'AddressBook') {
    window.addEventListener('input', trackExperian, true);
  } //We need to add general PZ events here


  var sessionStorageInteractions = sessionStorage.getItem('userPZInteractions') ? sessionStorage.getItem('userPZInteractions').split('|') : [];
  var pzOptions = {
    root: null,
    rootMargin: '0px',
    threshold: .33
  }; //Track PZ impressions and interactions but wait for Monetate before invoking

  var pzObserver = new IntersectionObserver(trackPZImpressions, pzOptions);
  setTimeout(function () {
    try {
      //Impressions
      var pzTargets = document.querySelectorAll("[class*='pz-']");

      for (var i = 0; i < pzTargets.length; i++) {
        pzObserver.observe(pzTargets[i]);
      } //Interactions


      $("[class*='pz-']").off('click mousenter').on('click mouseenter', function (e) {
        var classList = $(this).attr("class");
        var classArr = classList.split(/\s+/);
        var pzClass;
        $.each(classArr, function (index, value) {
          if (/^pz-/.test(value) && !sessionStorageInteractions.includes(value.substring(3))) {
            pzClass = value.substring(3);
            sessionStorageInteractions.push(pzClass);
            return false;
          }
        });

        if (pzClass) {
          var eventInfo = {
            eventName: eventNamevalue('pzInteraction'),
            experience: pzClass,
            interactionType: e.type
          };
          sessionStorage.setItem('userPZInteractions', sessionStorageInteractions.join('|'));
          digitalData.event = eventInfo;
        }
      });
    } catch (e) {//Do nothing
    }
  }, 5000); //Virtual store - text clicks

  $(document).off('click', '.navigation-menu-top, #storeSelector, .tabsInfoNavigate, .powered-by-obsess, .musicContainer, .hoverable').on('click', '.navigation-menu-top, #storeSelector, .tabsInfoNavigate, .powered-by-obsess, .musicContainer, .hoverable', function () {
    var eventInfo = {
      eventName: eventNamevalue('virtualStoreTextClick')
    };
    digitalData.event = eventInfo;
  });
}

exports.init = function () {
  if (SitePreferences.ANALYTICS_ENABLED != undefined && SitePreferences.ANALYTICS_ENABLED) {
    if (digitalData != '' && digitalData != null) {
      initAdobeDtm();
    }
  }
}; //Old export implementations are toward the top of the file


exports.quickViewClick = plpProductClick;
exports.emialSignUp = emialSignUp;
exports.quickViewOpen = quickViewOpen;
exports.captureClickEvent = captureClickEvent;
exports.monogramValidation = clickpersonal;
exports.quickFilter = quickFilter;
exports.navClick = navClick;
exports.storeLocatorInteraction = storeLocatorInteraction;
exports.setOriginalSKU = setOriginalSKU; //Newer exports

exports.giftCardSwitchType = function (gcType) {
  if (!analyticsEnabled) {
    return;
  }

  var eventInfoVal = [];
  var eventInfo = {
    eventName: eventNamevalue('switchGiftCardType') //static value

  };
  eventInfoVal.push(eventInfo);
  digitalData.event = eventInfoVal;
  digitalData.attributes = {
    giftCardType: gcType
  };
};

exports.giftCardApply = function (giftCardNumber, status, balance) {
  if (!analyticsEnabled) {
    return;
  }

  var user = digitalData.user;
  var digitalCustomData = {};
  var eventInfoName = {
    eventName: eventNamevalue('checkGCBalance') //static value

  };
  var eventInfo = {
    eventInfo: eventInfoName
  };
  var eventInfoNameVal = new Array();
  eventInfoNameVal.push(eventInfo);
  digitalCustomData.event = eventInfoNameVal;
  digitalCustomData.user = user;
  digitalCustomData.page = {
    pageName: formatString(digitalData.page.pageName)
  };
  digitalCustomData.attributes = {
    checkGCBalanceSuccess: '' + status,
    GCBalance: '' + balance,
    GCCardID: giftCardNumber
  };
  digitalData = digitalCustomData;
};

exports.updateCart = function (cartevent) {
  if (!analyticsEnabled) {
    return;
  }

  var user = digitalData.user;
  var pageNameVal = digitalData.page.pageName.replace('shoppingBag', 'shopping bag');
  var digitalDataEmail = {};
  var eventInfoName = {
    eventName: eventNamevalue('updateCart') //static value

  };
  var eventInfo = {
    eventInfo: eventInfoName
  };
  var eventInfoNameVal = new Array();
  eventInfoNameVal.push(eventInfo);
  digitalDataEmail.event = eventInfoNameVal;
  digitalDataEmail.user = user;
  digitalDataEmail.page = {
    pageName: formatString(pageNameVal)
  };
  digitalData = digitalDataEmail;
  digitalData.attributes = {
    updateCartType: cartevent + ''
  };
};

exports.wishlistFullView = function (items) {
  if (!analyticsEnabled) {
    return;
  }

  try {
    var product;
    var products = [];
    var title = formatString($(items).parents(".wl-list-container").find('.wishlist-heading h1').text().trim());
    items.each(function (index) {
      product = {
        productID: $(this).data('masterid'),
        productName: $(this).data('pname'),
        productPrice: $(this).find('.js-product-grid-prices').val(),
        productStockMessage: $(this).data('stockmsg'),
        productPosition: index,
        productGroup: $(this).data('productgroup') || '',
        productWebCategory: 'wishlist',
        productWishListName: title
      };
      products.push(product);
    });
    var eventInfo = {
      eventName: eventNamevalue('viewWishList'),
      eventAttributes: {
        products: products
      }
    };
    digitalData.event = eventInfo;
  } catch (e) {//Do nothing
  }
}; //This also handled list deletion and renaming


exports.createList = function (listName, url) {
  var eventInfo;

  try {
    if (url.indexOf('remove=true') > -1) {
      eventInfo = {
        eventName: eventNamevalue('deleteWishList')
      };
    } else if (url.indexOf('selectedListName=') > -1) {
      eventInfo = {
        eventName: eventNamevalue('renameWishList')
      };
    } else {
      eventInfo = {
        eventName: eventNamevalue('createWishList')
      };
    }

    eventInfo.eventAttributes = {
      listName: listName
    };
    digitalData.event = eventInfo;
  } catch (e) {//Do Nothing
  }
}; //Move product to another wishlist


exports.moveToList = function (url) {
  if (!analyticsEnabled) {
    return;
  }

  try {
    var products = [];
    var listName = getParameterByName('listName', url);
    var productID = getParameterByName('productID', url);
    var productTile = $('[data-masterid="' + productID + '"]');
    var product = {
      productID: productID,
      productName: productTile.data('pname'),
      productPrice: productTile.find('.js-product-grid-prices').val() || productTile.find('.js-product-sales-price').val(),
      productStockMessage: productTile.data('stockmsg'),
      productGroup: productTile.data('productgroup') || '',
      productWebCategory: 'wishlist',
      productWishListName: listName
    };

    if ($('.pdp-container').find('#add-to-cart').length > 0) {
      var productID = $('.pdp-container').find('#add-to-cart').data('pid');
      var pdpProduct = $('[data-pid="' + productID + '"]');
      product = {
        productID: productID,
        productName: pdpProduct.data('pname'),
        productPrice: pdpProduct.data('pricevalue'),
        productStockMessage: pdpProduct.data('available'),
        productGroup: pdpProduct.data('productgroup') || '',
        productWebCategory: 'wishlist',
        productWishListName: listName
      };
    }

    products.push(product);
    var eventInfo = {
      eventName: eventNamevalue('moveToWishList'),
      eventAttributes: {
        products: products
      }
    };
    digitalData.event = eventInfo;
  } catch (e) {//Do Nothing
  }
}; //Share wishlist


exports.shareList = function (listName, method) {
  if (!analyticsEnabled) {
    return;
  }

  try {
    var eventInfo = {
      eventName: eventNamevalue('shareWishList'),
      eventAttributes: {
        listName: listName,
        method: method
      }
    };
    digitalData.event = eventInfo;
  } catch (e) {//Do Nothing
  }
}; //Sign in from wishlist page


exports.wishlistSignIn = function () {
  try {
    var eventInfo = {
      eventName: eventNamevalue('wishListSignIn')
    };
    digitalData.event = eventInfo;
  } catch (e) {//Do Nothing
  }
}; //Wishlist product details


exports.moreDetailsClick = function () {
  if (!analyticsEnabled) {
    return;
  }

  try {
    var materialNumber = $('.product-info-detail .info').eq(0).find('.value').text().trim();
    var supplierNumber = $('.product-info-detail .info').eq(1).find('.value').text().trim();
    var dateOfManufacture = $('.product-info-detail .info').eq(2).find('.value').text().trim();
    var eventInfo = {
      eventName: eventNamevalue('moreDetailsClick'),
      eventAttrtibutes: {
        materialNumber: materialNumber,
        supplierNumber: supplierNumber,
        dateOfManufacture: dateOfManufacture
      }
    };
    digitalData.event = eventInfo;
  } catch (e) {//Do nothing
  }
};

exports.footerNavClick = function (currentDiv) {
  if (!analyticsEnabled) {
    return;
  }

  var user = digitalData.user;
  var digitalDataContactUs = {};
  var eventInfoName = null;
  var eventInfo = null;
  var pagename = formatString(digitalData.page.pageName);
  eventInfoName = {
    eventName: eventNamevalue('FooterNavClick') //static value

  };
  eventInfo = {
    eventInfo: eventInfoName
  };
  var eventInfoNameVal = new Array();
  eventInfoNameVal.push(eventInfo);
  digitalDataContactUs.event = eventInfoNameVal;
  digitalDataContactUs.page = {
    pageName: pagename
  };
  digitalDataContactUs.attributes = {
    navigationLink: currentDiv.text()
  };
  digitalDataContactUs.user = user;
  digitalData = digitalDataContactUs;

  if (currentDiv.attr('title') == 'Contact Us') {
    var pageName = digitalData.page.pageName;
    digitalDataContactUs.page = {
      pageName: formatString(pageName)
    };
    eventInfoName = {
      eventName: eventNamevalue('contactCustomerService') //static value

    };
    eventInfo = {
      eventInfo: eventInfoName
    };
    eventInfoNameVal = new Array();
    eventInfoNameVal.push(eventInfo);
    digitalDataContactUs.event = eventInfoNameVal;
    digitalDataContactUs.user = user;
    digitalData = digitalDataContactUs;
  }
};

exports.addToDataLayer = function (group, name, value) {
  if (!analyticsEnabled) {
    return;
  }

  if (name && name !== '' && typeof value !== 'undefined') {
    var target = digitalData;

    if (group && group !== '') {
      if (!target[group]) {
        target[group] = {};
      }

      target = target[group];
    }

    target[name] = value;
  }
}; //on click of visible product swatch on PDP page


exports.colorSwatchClick = function ($this, type) {
  if (!analyticsEnabled) {
    return;
  }

  var swatchname = type || 'color';

  if ($this.hasClass('size')) {
    swatchname = 'size';
  }

  var eventInfoName = {
    eventName: eventNamevalue(swatchname + 'SwatchClick') //static value

  };
  var eventInfo = {
    eventInfo: eventInfoName
  };
  var eventInfoNameVal = new Array();
  eventInfoNameVal.push(eventInfo);
  digitalData.event = eventInfoNameVal; //Size and color are both stored in data-color

  if ($this.hasClass('size')) {
    digitalData.attributes = {
      swatchSize: $this.data('color')
    };
  } else {
    if (type) {
      digitalData.attributes = {
        swatchColor: $this.data('label')
      };
    } else {
      digitalData.attributes = {
        swatchColor: $this.data('color')
      };
    }
  }
}; //on click of visible product swatch on PDP page


exports.colorSwatchHover = function ($this) {
  if (!analyticsEnabled) {
    return;
  }

  var eventInfoName = {
    eventName: eventNamevalue('colorSwatchHover') //static value

  };
  var eventInfo = {
    eventInfo: eventInfoName
  };
  var eventInfoNameVal = new Array();
  eventInfoNameVal.push(eventInfo);
  digitalData.event = eventInfoNameVal;
  var siblingCount = $this.parent().siblings().length + 1;
  var siblingIndex = $this.parent().index() + 1; //Size and color are both stored in data-color

  digitalData.attributes = {
    productID: $this.closest('.product-tile').data('masterid'),
    swatchColor: $this.data('color'),
    swatchPosition: siblingIndex + ':' + siblingCount
  };
}; //click on shipping same as billing checkbox


exports.shippingSameAsBilling = function () {
  if (!analyticsEnabled) {
    return;
  }

  if ($('input[name$="_shippingAddress_useAsBillingAddress"]').prop('checked')) {
    var user = digitalData.user;
    var pageNameVal = formatString(digitalData.page.pageName);
    var digitalCustomData = {};
    digitalCustomData.page = {
      pageName: pageNameVal
    };
    var eventInfoName = {
      eventName: eventNamevalue('checkoutShippingSameAsBilling') //static value

    };
    var eventInfo = {
      eventInfo: eventInfoName
    };
    var eventInfoNameVal = new Array();
    eventInfoNameVal.push(eventInfo);
    digitalCustomData.event = eventInfoNameVal;
    digitalCustomData.user = user;
    digitalData = digitalCustomData;
  }
}; //click on site logo event


exports.primaryLogo = function () {
  if (!analyticsEnabled) {
    return;
  }

  var pagename = formatString(digitalData.page.pageName);

  if (digitalData.cart) {
    delete digitalData.cart;
  }

  if (digitalData.product) {
    delete digitalData.product;
  }

  if (digitalData.search) {
    delete digitalData.search;
  }

  if (digitalData.transaction) {
    delete digitalData.transaction;
  }

  var eventInfoName = {
    eventName: eventNamevalue('logoClick') //static value

  };
  var eventInfo = {
    eventInfo: eventInfoName
  };
  var eventInfoNameVal = new Array();
  eventInfoNameVal.push(eventInfo);
  digitalData.event = eventInfoNameVal;
  digitalData.page = {
    pageName: pagename
  };
}; //click on apply coupon button event


exports.promoApply = function (code, codeStatus) {
  if (!analyticsEnabled) {
    return;
  }

  var pagename = formatString(digitalData.page.pageName);
  delete digitalData.cart;
  var eventInfoName = {
    eventName: eventNamevalue('promoApplied') //static value

  };
  var eventInfo = {
    eventInfo: eventInfoName
  };
  var eventInfoNameVal = new Array();
  eventInfoNameVal.push(eventInfo);
  digitalData.event = eventInfoNameVal;
  digitalData.page = {
    pageName: pagename
  };
  digitalData.attributes = {
    promoCodeEntered: formatString(code),
    promoCodeFailed: codeStatus + ''
  };
}; //Quickview modal opened


exports.quickView = function () {
  if (!analyticsEnabled) {
    return;
  }

  var eventInfoName = {
    eventName: eventNamevalue('quickView') //static value

  };
  var eventInfo = {
    eventInfo: eventInfoName
  };
  var eventInfoNameVal = new Array();
  eventInfoNameVal.push(eventInfo);
  digitalData.event = eventInfoNameVal;
};

exports.forgotPassword = function () {
  if (!analyticsEnabled) {
    return;
  }

  var digitalDataPass = {};
  var pagename = formatString(digitalData.page.pageName);
  digitalDataPass.user = digitalData.user;
  var eventInfoName = {
    eventName: eventNamevalue('forgotPassword') //static value

  };
  var eventInfo = {
    eventInfo: eventInfoName
  };
  var eventInfoNameVal = new Array();
  eventInfoNameVal.push(eventInfo);
  digitalDataPass.event = eventInfoNameVal;
  digitalDataPass.page = {
    pageName: pagename
  };
  digitalData = digitalDataPass;
}; //Enter wardrobe click


exports.displayWardrobeProducts = function () {
  try {
    var wardrobeProducts = [];
    var wardrobeDivisions = [];
    $('.wardrobe-product-tile').each(function () {
      var href = $(this).find('a').attr('href');
      var productID = href.split('pid=')[1];
      var productName = $(this).find('.wardrobe-product-name').text().trim();
      wardrobeProducts.push({
        productID: productID,
        productName: productName
      });
    });
    $('.division-item').each(function () {
      wardrobeDivisions.push($(this).data('division').toLowerCase());
    });
    var eventInfo = {
      eventName: eventNamevalue('wardrobeDisplay'),
      products: wardrobeProducts,
      divisions: wardrobeDivisions
    };
    digitalData.event = eventInfo;
  } catch (e) {//Do Nothing
  }
}; //Wardrobe product click


exports.wardrobeProductClick = function (productDiv) {
  try {
    var wardrobeProducts = [];
    var href = productDiv.attr('href');
    var productID = href.split('pid=')[1];
    var productName = productDiv.find('.wardrobe-product-name').text().trim();
    wardrobeProducts.push({
      productID: productID,
      productName: productName
    });
    var eventInfo = {
      eventName: eventNamevalue('wardrobeDetailClick'),
      products: wardrobeProducts
    };
    digitalData.event = eventInfo;
  } catch (e) {//Do Nothing
  }
};

exports.wardrobeDivisionClick = function (division) {
  try {
    var eventInfo = {
      eventName: eventNamevalue('wardrobeDivisionClick'),
      division: division.toLowerCase()
    };
    digitalData.event = eventInfo;
  } catch (e) {//Do Nothing
  }
}; //AEP QS Event


exports.quickShopOpen = function () {
  try {
    var products = [];
    var qsModal = $('.rl-quickshop-modal');
    var productID = qsModal.find('.product-number span').data('masterid');
    var productName = qsModal.find('.product-name').text().trim();
    var productBrand = qsModal.find('.brand-name').text().trim();
    var productPrice = qsModal.find('[id^=master-]').data('price-value');
    var productWebcat = qsModal.find('#productWebcat').val();
    productPrice = productPrice / 100;
    var product = {
      productID: productID,
      productName: productName,
      productBrand: productBrand,
      productPrice: productPrice,
      productWebcat: productWebcat
    };
    products.push(product);
    var eventInfo = {
      eventName: eventNamevalue('quickShopOpen'),
      pageType: digitalData.page.pageType || '',
      pageSubType: digitalData.page.pageSubType || '',
      products: products
    };
    digitalData.event = eventInfo; //Send to Edge Network, this doesn't work in QS template code

    var aepData = $('#aaProductView').data('aa-productviewdata');

    if (aepData) {
      var productListItems = JSON.parse(aepData.productListItems);

      if (aepData.sha256Email) {
        alloy("sendEvent", {
          "xdm": {
            "_polo": {
              "userAgent": aepData.userAgent,
              "ipAddress": aepData.ipAddress,
              "conversionURL": aepData.conversionURL,
              "conversionTimestamp": Number(aepData.currentTime),
              "optOut": window.OptanonActiveGroups.match('4') ? false : true,
              "region": aepData.region,
              "pdpTemplate": aepData.pdpTemplate,
              "viewType": "quick"
            },
            "commerce": {
              "productViews": {
                "value": 1
              }
            },
            "web": {
              "webPageDetails": {
                "server": window.location.hostname
              }
            },
            "productListItems": productListItems,
            "_id": aepData._id,
            "identityMap": {
              "Emails": [{
                "id": aepData.sha256Email,
                "primary": false
              }]
            },
            "eventType": "commerce.productViews"
          }
        });
      } else {
        alloy("sendEvent", {
          "xdm": {
            "_polo": {
              "userAgent": aepData.userAgent,
              "ipAddress": aepData.ipAddress,
              "conversionURL": aepData.conversionURL,
              "conversionTimestamp": aepData.currentTime,
              "optOut": window.OptanonActiveGroups.match('4') ? false : true,
              "region": aepData.region,
              "pdpTemplate": aepData.pdpTemplate,
              "viewType": "quick"
            },
            "productListItems": productListItems,
            "_id": aepData._id,
            "eventType": "commerce.productViews"
          }
        });
      }
    }
  } catch (e) {//Do nothing
  }
}; //AEP Add To Cart Event


exports.addToCart = function (aepData) {
  if (aepData && aepData.peProductsJSON) {
    var productListItems = JSON.parse(aepData.peProductsJSON);
    alloy("sendEvent", {
      "xdm": {
        "_polo": {
          "userAgent": aepData.userAgent,
          "ipAddress": aepData.ipAddress,
          "conversionURL": window.location.href,
          "conversionTimestamp": aepData.conversionTimestamp,
          "optOut": window.OptanonActiveGroups && window.OptanonActiveGroups.match('4') ? false : true,
          "region": aepData.aepRegion,
          "locale": aepData.locale,
          "pdpTemplate": aepData.pdpTemplate
        },
        "commerce": {
          "productListAdds": {
            "value": 1
          },
          "productListOpens": {
            "value": 1
          }
        },
        "web": {
          "webPageDetails": {
            "server": window.location.host
          }
        },
        "productListItems": productListItems,
        "_id": aepData._id,
        "identityMap": {
          "Emails": [{
            "id": aepData.sha256Email,
            "primary": false
          }]
        },
        "eventType": "commerce.productListAdds"
      }
    });
  }
}; //Home PDP Filter Engagement


exports.pdpFilterEngagement = function (e) {
  try {
    var digitaldatacolor = {};
    var material = $(e.target).val();
    var pagename = digitalData.page.pageName;
    digitaldatacolor.user = digitalData.user;
    var eventInfoName = {
      eventName: eventNamevalue('pdpFilterEngagement') //static value

    };
    var eventInfo = {
      eventInfo: eventInfoName
    };
    var eventInfoNameVal = new Array();
    eventInfoNameVal.push(eventInfo);
    digitaldatacolor.event = eventInfoNameVal;
    digitaldatacolor.attributes = {
      productID: $('.product-details-wrapper').data('masterid'),
      material: material.split('-')[1]
    };
    digitaldatacolor.page = {
      pageName: pagename
    };
    digitalData = digitaldatacolor;
  } catch (e) {//Do nothing
  }
};

exports.experianAddressSave = function () {
  var eventInfo = {
    eventName: eventNamevalue('experianAddressSave')
  };
  digitalData.event = eventInfo;
};

exports.simpleSearch = function (searchTerm) {
  var eventInfo = {
    eventName: eventNamevalue('simpleSearchQuery'),
    searchTerm: searchTerm
  };
  digitalData.event = eventInfo;
};

exports.simpleSearchResults = function () {
  try {
    var count = Number($('.productsearch-result-main').text().trim().split(' ')[0]);
    var searchParams = new URLSearchParams(document.location.search);
    var searchTerm = searchParams.get('q');
    var eventInfo = {
      eventName: eventNamevalue('simpleSearchResults')
    };
    var search = {
      searchTerm: searchTerm,
      searchResults: Number(count),
      searchType: 'simple'
    };
    digitalData.event = eventInfo;
    digitalData.search = search;
  } catch (e) {
    console.log('Error building simple search data layer: ' + e.message);
  }
};

exports.virtualStoreProductClick = function (productID) {
  var eventInfo = {
    eventName: eventNamevalue('virtualStoreProductClick'),
    productID: productID
  };
  digitalData.event = eventInfo;
};

exports.updateCartQty = function (productSKU, preSelectQty, qty) {
  var updateType, productID, ind;
  var item = [];

  try {
    //If both quantities are 0, this is only an edit. 
    //If no pre-selected quantity was passed or it's greater than the new qty, this is a removal, otherwise it's an addition
    if (preSelectQty == 0 && qty == 0) {
      updateType = 'edit';
    } else {
      updateType = preSelectQty == null || preSelectQty > qty ? 'removed' : 'added';
    } //We don't have the master productid on the page here, we need to try to match SKUs and get it from the data layer


    if (digitalData.cart && digitalData.cart.item) {
      //If this was an edit, we need to match on the original SKU and update the data layer with the new one
      if (updateType == 'edit') {
        ind = digitalData.cart.item.findIndex(function (p) {
          return p.productSKU == originalSKU;
        });
        digitalData.cart.item[ind].productSKU = productSKU;
      } else {
        ind = digitalData.cart.item.findIndex(function (p) {
          return p.productSKU == productSKU;
        }); //Quantity is in the data layer as a string on page load

        var _qty = Number(digitalData.cart.item[ind].productQuantity); //We need to manage the data layer qty and capture the added/removed product. Quantity can stay as a number, it makes no difference in Launch.


        if (updateType == 'added') {
          digitalData.cart.item[ind].productQuantity = ++_qty;
        } else {
          digitalData.cart.item[ind].productQuantity = --_qty;
        }

        item.push(digitalData.cart.item[ind]);
      }

      productID = digitalData.cart.item[ind].productID;
    }

    var eventInfo = {
      eventName: eventNamevalue('cartQtyChange'),
      productID: productID,
      updateType: updateType
    };

    if (updateType == 'added' || updateType == 'edit') {
      eventInfo.productAddedFrom = 'cart';
    }

    digitalData.event = eventInfo;

    if (item.length > 0) {
      digitalData.product = digitalData.product || {};
      digitalData.product.item = item;
    }
  } catch (e) {
    console.log('Error handling cart update: ' + e.message);
  }
};

exports.handleSwatchAction = function (action, productID) {
  var fromCartWidget = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  if (!analyticsEnabled) {
    return;
  }

  try {
    var method = 'swatchresults'; //Products must be inside an array to use the Adobe string builder

    var products = [];
    var product = digitalData.product.item.find(function (p) {
      return p.productID == productID;
    }); //If we didn't find the product, user is trying to remove an added product of a type they aren't currently viewing, so grab what we can from the cart widget

    if (!product) {
      var swatchLink = $('a.remove-item[data-pid="' + productID + '"');
      var swatchType = swatchLink.closest('.swatches-type').data('type');
      var swatchDiv = swatchLink.closest('.selected-swatch');
      product = {};
      product.productID = productID;
      product.productName = swatchDiv.find('img').attr('title');
      product.productWebCategory = swatchType;
      product.productStockMessage = 'IN_STOCK'; //We need to include all properties for the string builder even if the value is unknown

      product.productPosition = 0;
      product.productPrice = 0;
    } //We need to parse a number from productPrice, which is coming through as a range. We can split on '-' and grab the first element since range isn't applicable for swatches


    if (typeof product.productPrice === 'string' && product.productPrice.indexOf('-') > -1) {
      product.productPrice = Number(product.productPrice.split('-')[0].trim());
    }

    products.push(product);

    if ($('.rl-toaster').is(':visible')) {
      method = 'infomodal';
    } else if (fromCartWidget) {
      method = 'cartwidget';
    }

    var eventInfo = {
      eventName: eventNamevalue(action + 'Swatch'),
      method: method,
      products: products
    };
    digitalData.event = eventInfo;
  } catch (e) {//Do nothing, can log to the console while debugging
  }
};

/***/ }),

/***/ "./app_foundation/cartridge/js/progress.js":
/*!*************************************************!*\
  !*** ./app_foundation/cartridge/js/progress.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function centerLoader() {
  $('.loader').each(function () {
    var $indic = $(this).find('.loader-indicator');

    if ($indic && $indic.css('position') != 'fixed') {
      var bound = this.getBoundingClientRect();
      var wH = $(window).height();

      if (bound.height > 1.5 * $indic.height()) {
        var h = Math.max(0, bound.top > 0 ? Math.min(bound.height, wH - bound.top) : Math.min(bound.bottom, wH));

        if (h > $indic.height()) {
          $indic.css('top', bound.top > 0 ? h / 2 : -bound.top + h / 2);
        } else {
          $indic.css('top', '50%');
        }
      }
    }
  });
}

function track() {
  if ($('.loader').length == 0) {
    $(window).off('scroll', centerLoader);
  } else {
    if ($('.loader').length == 1) {
      $(window).on('scroll', centerLoader);
    }

    centerLoader();
  }
}
/**
 * @function
 * @description Shows an AJAX-loader on top of a given container
 * @param {Element} container The Element on top of which the AJAX-Loader will be shown
 */


var show = function show(container, noIndicator, clickThru) {
  var target = !container || $(container).length === 0 ? $('body') : $(container);
  var $loader = target.find('.loader');

  if ($loader.length == 0) {
    target.addClass('has-loader');
    $loader = $('<div/>').addClass('loader ' + (noIndicator ? 'noIndicator' : ''));

    if (!noIndicator) {
      $loader.append($('<div/>').addClass('loader-indicator'));
    } else {}

    $loader.append($('<div/>').addClass('loader-bg'));

    if (!clickThru) {
      $loader.appendTo(target);
    }
  } else {
    if (!clickThru) {
      $loader.remove();
      return null;
    }

    if (!noIndicator) {
      $loader.remove('.loader-indicator');
    }
  }

  if ($loader) {
    if (target[0].scrollHeight > target.height()) {
      $loader.css('height', target[0].scrollHeight);
    } else {
      $loader.css('height', '');
    }

    $loader.show();
  }

  track();
  return $loader;
};
/**
 * @function
 * @description Hides an AJAX-loader
 */


var hide = function hide(container) {
  var target = !container || $(container).length === 0 ? $('body') : $(container);
  target.find('.loader').remove();
  target.removeClass('has-loader');
  track();
};

exports.show = show;
exports.hide = hide;

/***/ }),

/***/ "./app_foundation/cartridge/js/util.js":
/*!*********************************************!*\
  !*** ./app_foundation/cartridge/js/util.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");

var currentLocale = 'en-US'; // var US_regex=/^[+-]?[0-9]{1,3}(?:[0-9]*(?:,[0-9]{3})*(?:\.[0-9]{2})?)$/; // 10,123.25

var EU_regex = /^[+-]?[0-9]{1,3}(?:[0-9]*|(?:\.[0-9]{3})*(?:,[0-9]{2})?)$/; // 10.123,25

var browser, device, support;
var max_mobile_breakpoint = 768;
var util = {
  /**
   * @function
   * @description appends the parameter with the given name and value to the given url and returns the changed url
   * @param {String} url the url to which the parameter will be added
   * @param {String} name the name of the parameter
   * @param {String} value the value of the parameter
   */
  appendParamToURL: function appendParamToURL(url, name, value) {
    // quit if the param already exists
    if (url.indexOf(name + '=') !== -1) {
      return url;
    }

    var separator = url.indexOf('?') !== -1 ? '&' : '?';
    return url + separator + name + '=' + encodeURIComponent(value);
  },

  /**
   * @function
   * @description appends the parameters to the given url and returns the changed url
   * @param {String} countrySelect The selected country
   */
  updateStateOptions: function updateStateOptions(form) {
    var $form = $(form);
    var $country = $form.find('select[id$="_country"]');
    var $frmState = $form.find('select[id*="_state"]');
    var stVal = $frmState.val();
    var country = $country.val();
    var countryObj;

    if (country != undefined) {
      countryObj = window.Countries[country];
    }

    var arrHtml = '';
    var arrlist = '';
    var selectID = '';
    var selectName = '';
    var autocomplete = '';
    var inputField;
    var selectBox;
    var noPostalCountries = window.NonPostalCountries;
    $form.find('[id*="_state"]').closest('.form-row').find('span.error').remove();
    $form.find('[id*="_state"]').removeClass('error'); // if statement execute only for the countries which has states as dropdown( ex : UK, US, CA)

    if (countryObj != undefined && countryObj != null && countryObj.regions != undefined && countryObj.regions != null && Object.keys(countryObj.regions).length > 0) {
      selectID = 'id="' + $form.find('[name*="_state"]').attr('id') + '"';
      selectName = 'name="' + $form.find('[name*="_state"]').attr('name') + '"';
      autocomplete = 'autocomplete="address-level1"';
      inputField = $('<input class="input-text state" placeholder="State" type="text" ' + selectID + ' ' + selectName + ' ' + autocomplete + ' />');
      arrHtml = '<option class="select-option" id="" value="">Select a State</option>';

      for (var stateValue in countryObj.regions) {
        arrHtml += '<option class="select-option" id="' + stateValue + '" value="' + stateValue + '">' + countryObj.regions[stateValue] + '</option>';
        arrlist += '<li>' + countryObj.regions[stateValue] + '</li>';
      }

      selectBox = $('<select class="input-select required" ' + selectID + ' ' + selectName + ' ' + autocomplete + ' style="text-transform: capitalize;">' + arrHtml + '</select>');

      if (noPostalCountries != undefined && noPostalCountries && noPostalCountries.indexOf(country) > -1) {
        $form.find('select[name*="_state"]').replaceWith($(inputField));
        $form.find('input[name*="_state"]').closest('.form-row').find('label').first().html('State/Province');
        $form.find('input[name*="_state"]').closest('.form-row').removeClass('required').find('label .required-indicator').remove();
        $form.find('input[name$="_postal"]').closest('.form-row').find('label').first().html('Post Code');

        if ($form.find('input[name$="_postal"]').hasClass('required')) {
          $form.find('input[name$="_postal"]').removeClass('required');
          $form.find('input[name$="_postal"]').removeClass('error');
          $form.find('[id$="postal-error"]').css("display", "none");
        }
      } else if (country !== 'US' && country != 'CA') {
        $form.find('select[name*="_state"]').replaceWith($(inputField));
        $form.find('input[name*="_state"]').closest('.form-row').find('label').first().html('State/Province');
        $form.find('input[name*="_state"]').closest('.form-row').removeClass('required').find('label .required-indicator').remove();
        $form.find('input[name$="_postal"]').closest('.form-row').find('label').first().html('* Post Code');

        if (!$form.find('input[name$="_postal"]').hasClass('required')) {
          $form.find('input[name$="_postal"]').addClass('required');
        }
      } else {
        $form.find('input[name*="_state"]').replaceWith($(selectBox));
        $form.find('select[name*="_state"]').replaceWith($(selectBox));
        $form.find('select[name*="_state"]').closest('.form-row').addClass('required').find('label').first().html('State');

        if (window.EdqConfig && window.EdqConfig.GLOBAL_INTUITIVE_MAPPING[3] && window.EdqConfig.GLOBAL_INTUITIVE_MAPPING[3].field) {
          window.EdqConfig.GLOBAL_INTUITIVE_MAPPING[3].field = document.getElementById('dwfrm_profile_address_states_stateCode');
        }

        if (!$form.find('input[name$="_postal"]').hasClass('required')) {
          $form.find('input[name$="_postal"]').addClass('required');
        }

        if (!$form.find('select[name*="_state"]').closest('.form-row').find('label').find('span').hasClass('required-indicator')) {
          $form.find('select[name*="_state"]').closest('.form-row').find('label').prepend('<span class="required-indicator"> * </span>');
        }

        $form.find('input[name$="_postal"]').closest('.form-row').find('label').first().html('* Zip Code');

        if (stVal && stVal != undefined && stVal != null) {
          $form.find('select[name*="_state"]').val(stVal);
        }
      }

      var sesnstate = $('input[name$="stateSessionVal"]').val();

      if (sesnstate && sesnstate != undefined && sesnstate != 'null' && (stVal == undefined || stVal == 'null') && country && (country == 'US' || country == 'CA')) {
        $form.find('select[id*="_state"]').val(sesnstate);
      }

      $('select').each(function () {
        if ($(this).find('option:selected').val() == null || $(this).find('option:selected').val() == '') {
          $(this).removeClass('valid');
        } else {
          $(this).addClass('valid');
        }
      });
      $('select').on('change', function () {
        if ($(this).find('option:selected').val() == null || $(this).find('option:selected').val() == '') {
          $(this).removeClass('valid');
        } else {
          $(this).addClass('valid');
        }
      });
    }
  },

  /**
   * @function
   * @description appends the parameters to the given url and returns the changed url
   * @param {String} url the url to which the parameters will be added
   * @param {Object} params
   */
  appendParamsToUrl: function appendParamsToUrl(url, params) {
    var _url = url.split('#');

    _.each(params, function (value, name) {
      _url[0] = this.appendParamToURL(_url[0], name, value);
    }.bind(this));

    return _url.join('#');
  },

  /**
   * @function
   * @description remove the parameter and its value from the given url and returns the changed url
   * @param {String} url the url from which the parameter will be removed
   * @param {String} name the name of parameter that will be removed from url
   */
  removeParamFromURL: function removeParamFromURL(url, name) {
    if (url.indexOf('?') === -1 || url.indexOf(name + '=') === -1) {
      return url;
    }

    var hash;
    var params;
    var domain = url.split('?')[0];
    var paramUrl = url.split('?')[1];
    var newParams = []; // if there is a hash at the end, store the hash

    if (paramUrl.indexOf('#') > -1) {
      hash = paramUrl.split('#')[1] || '';
      paramUrl = paramUrl.split('#')[0];
    }

    params = paramUrl.split('&');

    for (var i = 0; i < params.length; i++) {
      // put back param to newParams array if it is not the one to be removed
      if (params[i].split('=')[0] !== name) {
        newParams.push(params[i]);
      }
    }

    return domain + '?' + newParams.join('&') + (hash ? '#' + hash : '');
  },

  /**
   * @function
   * @description extract the query string from URL
   * @param {String} url the url to extra query string from
   **/
  getQueryString: function getQueryString(url) {
    var qs;

    if (!_.isString(url)) {
      return;
    }

    var a = document.createElement('a');
    a.href = url;

    if (a.search) {
      qs = a.search.substr(1); // remove the leading ?
    }

    return qs;
  },

  /**
   * @function
   * @description extract the query variable from URL
   * @param {String} pair[1] the url to extra query variable from
   **/
  getQueryVariable: function getQueryVariable(url, name) {
    var query = url.substring(1);
    var vars = query.split('&');

    for (var i = 0; i < vars.length; i++) {
      var pair = vars[i].split('=');

      if (decodeURIComponent(pair[0]) == name) {
        return decodeURIComponent(pair[1]);
      }
    }

    return undefined;
  },

  /**
   * @function
   * @description
   * @param {String}
   * @param {String}
   */
  elementInViewport: function elementInViewport(el, offsetToTop) {
    var top = el.offsetTop,
        left = el.offsetLeft,
        width = el.offsetWidth,
        height = el.offsetHeight;

    while (el.offsetParent) {
      el = el.offsetParent;
      top += el.offsetTop;
      left += el.offsetLeft;
    }

    if (typeof offsetToTop !== 'undefined') {
      top -= offsetToTop;
    }

    if (window.pageXOffset !== null) {
      return top < window.pageYOffset + window.innerHeight && left < window.pageXOffset + window.innerWidth && top + height > window.pageYOffset && left + width > window.pageXOffset;
    }

    if (document.compatMode === 'CSS1Compat') {
      return top < window.document.documentElement.scrollTop + window.document.documentElement.clientHeight && left < window.document.documentElement.scrollLeft + window.document.documentElement.clientWidth && top + height > window.document.documentElement.scrollTop && left + width > window.document.documentElement.scrollLeft;
    }
  },

  /**
   * @function
   * @description Appends the parameter 'format=ajax' to a given path
   * @param {String} path the relative path
   */
  ajaxUrl: function ajaxUrl(path) {
    return this.appendParamToURL(path, 'format', 'ajax');
  },

  /**
   * @function
   * @description
   * @param {String} url
   */
  toAbsoluteUrl: function toAbsoluteUrl(url) {
    if (url.indexOf('http') !== 0 && url.charAt(0) !== '/') {
      url = '/' + url;
    }

    return url;
  },

  /**
   * @function
   * @description Loads css dynamically from given urls
   * @param {Array} urls Array of urls from which css will be dynamically loaded.
   */
  loadDynamicCss: function loadDynamicCss(urls) {
    var i,
        len = urls.length;

    for (i = 0; i < len; i++) {
      this.loadedCssFiles.push(this.loadCssFile(urls[i]));
    }
  },

  /**
   * @function
   * @description Loads css file dynamically from given url
   * @param {String} url The url from which css file will be dynamically loaded.
   */
  loadCssFile: function loadCssFile(url) {
    return $('<link/>').appendTo($('head')).attr({
      type: 'text/css',
      rel: 'stylesheet'
    }).attr('href', url); // for i.e. <9, href must be added after link has been appended to head
  },
  // array to keep track of the dynamically loaded CSS files
  loadedCssFiles: [],

  /**
   * @function
   * @description Removes all css files which were dynamically loaded
   */
  clearDynamicCss: function clearDynamicCss() {
    var i = this.loadedCssFiles.length;

    while (0 > i--) {
      $(this.loadedCssFiles[i]).remove();
    }

    this.loadedCssFiles = [];
  },

  /**
   * @function
   * @description Extracts all parameters from a given query string into an object
   * @param {String} qs The query string from which the parameters will be extracted
   */
  getQueryStringParams: function getQueryStringParams(qs) {
    if (!qs || qs.length === 0) {
      return {};
    }

    var params = {},
        unescapedQS = encodeURIComponent(qs);
    unescapedQS = decodeURIComponent(unescapedQS); // Use the String::replace method to iterate over each
    // name-value pair in the string.

    unescapedQS.replace(new RegExp('([^?=&]+)(=([^&]*))?', 'g'), function ($0, $1, $2, $3) {
      params[$1] = $3;
    });
    return params;
  },
  fillAddressFields: function fillAddressFields(address, $form) {
    var creditCardType = $('[id$="_creditCard_type"]').val();

    for (var field in address) {
      if (field === 'ID' || field === 'UUID' || field === 'key') {
        continue;
      } // if the key in address object ends with 'Code', remove that suffix
      // keys that ends with 'Code' are postalCode, stateCode and countryCode


      $form.find('[name$="' + field.replace('Code', '') + '"]').val(address[field]);

      if ($form.find('[name$="' + field.replace('Code', '') + '"]').hasClass('latincheck')) {
        $form.find('[name$="' + field.replace('Code', '') + '"]').trigger('blur');
      } // update the state fields


      if (field === 'countryCode') {
        $form.find('[name$="country"]').trigger('change'); // retrigger state selection after country has changed
        // this results in duplication of the state code, but is a necessary evil
        // for now because sometimes countryCode comes after stateCode

        $form.find('[name$="state"]').val(address.stateCode);
      }
    }

    $('[id$="_creditCard_type"]').val(creditCardType).trigger('change');
  },
  personalizeCheck: function personalizeCheck() {
    var $currObj = $('.personalize-check .input-checkbox');
    $currObj.prop("checked", false);
    $('.personalize-initials input').on('focus', function () {
      $(this).closest('.product-options').siblings('.product-add-to-cart').find('#add-to-cart').removeClass('font-check-disabled');
      $(this).closest('.product-options').siblings('.product-add-to-cart').find('#add-to-cart').prop('disabled', false);
    });

    if (window.location.href.indexOf('personalizeIt') > -1) {
      $currObj.prop("checked", true).trigger('change');
      var mobileScroll = $('.product-col-1.product-image-container').height() + $(".product-top-content .personalize-checkbox").position().top - $('.top-banner-sticky').height();
      var desktopScroll = $(".product-top-content .personalize-checkbox").position().top;
      var scrollPositionTop = $(window).width() < 960 ? mobileScroll : desktopScroll;
      $(window).on('load', function () {
        $('.personalize-close').addClass('personalize-open');
        $('html, body').animate({
          'scrollTop': scrollPositionTop + 20
        }, 500);
      });
    }

    $currObj.on('change', function () {
      var $checkedValue = $(this).closest('.product-options');

      if ($(this).is(":checked")) {
        $checkedValue.find('.personalize-close').addClass('personalize-open');

        if (SitePreferences.MONETATE_PLP_QUICK_SHOP && $('.plp').length > 0 && window.matchMedia('(max-width: 960px)') && $('.rl-quickShop-dialog.monetate-plp-qs').height() >= window.innerHeight) {
          $('.rl-quickShop-dialog.monetate-plp-qs').css('top', 0).animate({
            scrollTop: $(document).height()
          });
        }

        $checkedValue.find('.personalize-value .personalize-Yes').prop("checked", true);
        $checkedValue.find('.personalize-value .personalize-No').prop("checked", false);
        $(".personalize-close").find(".personalize-char ul.value li:first-child").trigger("click");

        if ($checkedValue.find('.attribute.sheeting-size-variant').length > 0 || $checkedValue.find('.attribute.towel-size-variant').length > 0) {
          var sizeCheckboxLen = $checkedValue.find('.personalize-size-variants .size-checkbox').length,
              check = 0;
          $checkedValue.find('.personalize-size-variants .size-checkbox').each(function () {
            if ($(this).hasClass("hide")) {
              check++;
            }
          });

          if (sizeCheckboxLen != check) {
            $checkedValue.find(".personalize-size-variants").removeClass("hide");
            $checkedValue.find(".all-qty-zero-error-msg").addClass("hide");
          } else {
            $checkedValue.find(".personalize-size-variants").addClass("hide");
            $checkedValue.find(".all-qty-zero-error-msg").removeClass("hide");
          }
        }
      } else {
        var $closingpersonal = $checkedValue.siblings('.product-add-to-cart').find('#add-to-cart');
        $checkedValue.find('.personalize-close').removeClass('personalize-open');
        $checkedValue.find('.personalize-value .personalize-No').prop("checked", true);
        $checkedValue.find('.personalize-value .personalize-Yes').prop("checked", false);

        if (!$closingpersonal.hasClass('disabled-size')) {
          $closingpersonal.removeClass('font-check-disabled');
          $closingpersonal.prop('disabled', false);
          $checkedValue.siblings('.product-add-to-cart').find('.pdp-messaging .pdp-error-msg').text('');
        }

        $checkedValue.find('.personalize-variations .size-checkbox').each(function (i, e) {
          if ($('.personalize-product', this).is(':checked')) {
            $(".personalize-product", this).trigger("click");
          }
        });
        $('.monogramingAmount').hide();
        $('.product-add-to-cart').find('#add-all-to-cart').prop('disabled', false);
        $('.product-add-to-cart').find('.monogramCls .pdp-error-msg').text('');
      }

      var selectioncount, selectioncolor;

      if ($(window).width() >= 480) {
        selectioncount = 5;
        selectioncolor = 9;
      } else {
        selectioncount = 3;
        selectioncolor = 5;
      }

      var $personalizeli = $(this).closest('.product-options').find('.personalize-close .personalize-color li');
      var $personalizelichar = $(this).closest('.product-options').find('.personalize-close .personalize-char li');

      if ($personalizeli.length > selectioncolor) {
        $personalizeli.closest('.jcarousel-wrapper').removeClass('no-slide');
        $personalizeli.closest('.jcarousel-content') // responsive slides
        .on('jcarousel:create jcarousel:reload', function () {}).jcarousel({});
        $personalizeli.closest('.jcarousel-wrapper').find('.jcarousel-control-prev-color').on('jcarouselcontrol:active', function () {
          $(this).removeClass('inactive');
        }).on('jcarouselcontrol:inactive', function () {
          $(this).addClass('inactive');
        }).jcarouselControl({
          target: '-=1'
        });
        $personalizeli.closest('.jcarousel-wrapper').find('.jcarousel-control-next-color').on('jcarouselcontrol:active', function () {
          $(this).removeClass('inactive');
        }).on('jcarouselcontrol:inactive', function () {
          $(this).addClass('inactive');
        }).jcarouselControl({
          target: '+=1'
        });
      } else {
        $personalizeli.closest('.jcarousel-wrapper').addClass('no-slide');
      }

      if ($personalizelichar.length > selectioncount) {
        $personalizelichar.closest('.jcarousel-wrapper').removeClass('no-slide');
        $personalizelichar.closest('.jcarousel-content') // responsive slides
        .on('jcarousel:create jcarousel:reload', function () {}).jcarousel({});
        $personalizelichar.closest('.jcarousel-wrapper').find('.jcarousel-control-prev').on('jcarouselcontrol:active', function () {
          $(this).removeClass('inactive');
        }).on('jcarouselcontrol:inactive', function () {
          $(this).addClass('inactive');
        }).jcarouselControl({
          target: '-=1'
        });
        $personalizelichar.closest('.jcarousel-wrapper').find('.jcarousel-control-next').on('jcarouselcontrol:active', function () {
          $(this).removeClass('inactive');
        }).on('jcarouselcontrol:inactive', function () {
          $(this).addClass('inactive');
        }).jcarouselControl({
          target: '+=1'
        });
      } else {
        $personalizelichar.closest('.jcarousel-wrapper').addClass('no-slide');
      }
    });
    $('.personalize-close .value li:first-child').addClass('selected-val').addClass("selected");
    $('.personalize-close .value li:first-child input[type=radio]').prop("checked", true);
    $(".personalize-close").find(".personalize-color .personalize-selected-clr").html($('input[type=radio]', $('.personalize-close .value li:first-child')).data("embroiderycolor"));
    $(document).on("click", '.product-options .option-dropdown .value li', function () {
      var $selectionli = $(this).closest('.product-options').siblings('.product-add-to-cart').find('#add-to-cart');
      var $selectedColor = $('input[type=radio]', $(this)).data("embroiderycolor");

      if ($(this).find('input[type=radio]').is(":checked")) {
        $(this).addClass('selected-val').addClass("selected");
        $(this).siblings().removeClass('selected-val').removeClass('selected');
        $(".personalize-close").find(".personalize-color .personalize-selected-clr").html($selectedColor);
      }

      if (!$selectionli.hasClass('disabled-size') && $(this).closest('.option-dropdown').hasClass('personalize-char')) {
        $selectionli.removeClass('font-check-disabled');
        $selectionli.prop('disabled', false);
        $selectionli.closest('.product-add-to-cart').find('.pdp-messaging .pdp-error-msg').text('');
      }
    });
    $(".product-options .personalize-close ul.value li").on('hover', function () {
      $(this).addClass("selected-val");
    }, function () {
      if (!$(this).hasClass("selected")) {
        $(this).removeClass("selected-val");
      }
    });
    $('.personalize-initials input.input-text').on('input', function (event) {
      var thsInput = $(this);
      var regE = thsInput.val().replace(/[^a-zA-Z]/g, '');
      var parentDIV = "";
      thsInput.val(regE);
      var thsval = thsInput.val();

      if (thsInput.closest('.embroidery-section').length > 0) {
        parentDIV = $('.embroidery-section');
      } else if (thsInput.closest('.embossing-section').length > 0) {
        parentDIV = $('.embossing-section');
      } else if (thsInput.closest('.engraving-section').length > 0) {
        parentDIV = $('.engraving-section');
      }

      var selectedFont = parentDIV.find(".personalize-char ul.value li.selected-val").attr("date-casetype");
      var inputLength = parseInt(parentDIV.find(".personalize-char ul.value li.selected-val").attr("data-limitval"));

      if (selectedFont == "lower") {
        thsInput.val(thsval.toLowerCase());
      } else if (selectedFont == "upper") {
        thsInput.val(thsval.toUpperCase());
      }

      if (thsval.length > inputLength) {
        this.value = thsval.slice(0, inputLength);
      }
    });
    $(".personalize-close").find(".personalize-char ul.value li").on("click", function () {
      var parentDIV = "";
      var placeholder = "";
      var setIntialLen = parseInt($(this).data("limitval"));
      var selLetterType = $(this).attr("date-casetype");
      var selCharVal = $(this).attr("date-charval").toUpperCase();
      var InitilDefault = Resources.MONOGRAM_INITIAL_PLACEHOLDER;

      if ($(this).closest('.embroidery-section').length > 0) {
        parentDIV = $('.embroidery-section');
      } else if ($(this).closest('.embossing-section').length > 0) {
        parentDIV = $('.embossing-section');
      } else if ($(this).closest('.engraving-section').length > 0) {
        parentDIV = $('.engraving-section');
      }

      var intialInput = $(".personalize-initials input.input-text", parentDIV);
      var initialLabel = $(".personalize-initials label", parentDIV);
      var letterCase = "";
      var maxLen = 3;

      if (selCharVal.toLowerCase() == 'text') {
        InitilDefault = Resources.MONOGRAM_ENTER_TEXT;
      }

      intialInput.attr("placeholder", InitilDefault);
      initialLabel.html(InitilDefault);
      $(".your-initials-block .enter-upto-3l .letter-length", parentDIV).text(Resources['MONOGRAM_INITIAL_' + selCharVal]);
      intialInput.val("");

      if (setIntialLen == 1) {
        placeholder = selLetterType == "upper" ? selCharVal.toUpperCase() : selLetterType == "lower" ? selCharVal.toLowerCase() : InitilDefault;
        maxLen = 1;
      } else if (setIntialLen == 2) {
        placeholder = selLetterType == "upper" ? selCharVal.toUpperCase() : selLetterType == "lower" ? selCharVal.toLowerCase() : InitilDefault;
        maxLen = 2;
      } else if (setIntialLen == 3) {
        placeholder = selLetterType == "upper" ? selCharVal.toUpperCase() : selLetterType == "lower" ? selCharVal.toLowerCase() : InitilDefault;
        maxLen = 3;
      } else {
        placeholder = InitilDefault;
        maxLen = setIntialLen;
      }

      var letterCase = selLetterType == "upper" ? "uppercase" : selLetterType == "lower" ? "lowercase" : "initial";
      intialInput.attr("maxlength", maxLen).css("text-transform", letterCase);
    });
  },
  collectionPDPthumbnailSlider: function collectionPDPthumbnailSlider() {
    var mobileSwiperProductSet = new Swiper('.s7viewer-productset', {
      direction: 'horizontal',
      pagination: {
        el: '.s7viewer-productset .swiper-pagination',
        type: 'bullets'
      },
      centeredSlides: true,
      allowTouchMove: false,
      spaceBetween: 10,
      breakpoints: {
        992: {
          allowTouchMove: true
        }
      }
    });
    var thumbnailSwiperInstances = {};
    $('.alt-image-slider-wrapper').each(function (index, element) {
      var $this = $(".product-thumbnails", $(this));
      $this.addClass('slider-target-instance-' + index);
      $this.siblings('.horizontal-carousel-control-prev').addClass('thumbnail-btn-prev-' + index);
      $this.siblings('.horizontal-carousel-control-next').addClass('thumbnail-btn-next-' + index);
      thumbnailSwiperInstances[index] = new Swiper('.slider-target-instance-' + index, {
        slidesPerView: 6,
        spaceBetween: 9,
        loop: false,
        watchOverflow: true,
        navigation: {
          nextEl: '.thumbnail-btn-next-' + index,
          prevEl: '.thumbnail-btn-prev-' + index
        },
        breakpoints: {
          1200: {
            slidesPerView: 3
          }
        }
      });
    });
  },
  collectionPDPSlider: function collectionPDPSlider() {
    var collectionSwiperInstances = {};
    $('.productset-image-slider-wrapper').each(function (index, element) {
      var $this = $(".product-thumbnails", $(this));
      $this.addClass('slider-target-instance-' + index);
      $this.closest('.product-primary-image').siblings('.setswiper-pagination').addClass('setswiper-pagination-' + index);
      $this.siblings('.horizontal-carousel-control-prev').addClass('thumbnail-btn-prev-' + index);
      $this.siblings('.horizontal-carousel-control-next').addClass('thumbnail-btn-next-' + index);
      collectionSwiperInstances[index] = new Swiper('.slider-target-instance-' + index, {
        slidesPerView: 1,
        spaceBetween: 0,
        loop: true,
        watchOverflow: true,
        navigation: {
          nextEl: '.thumbnail-btn-next-' + index,
          prevEl: '.thumbnail-btn-prev-' + index
        },
        pagination: {
          el: '.setswiper-pagination-' + index,
          type: 'bullets',
          clickable: true,
          renderBullet: function renderBullet(index, className) {
            var total = this.slides.length - this.loopedSlides * 2;
            var customClass = 'pagination-reg';
            return '<div class="swiper-pagination-bar ' + customClass + ' ' + className + '"></div>';
          }
        },
        centeredSlides: true,
        allowTouchMove: true
      });
    });
  },

  /**
   * @function
   * @description Updates the number of the remaining character
   * based on the character limit in a text area
   */
  limitCharacters: function limitCharacters() {
    $('form').find('textarea[data-character-limit]').each(function () {
      var characterLimit = $(this).data('character-limit');
      var charCountHtml = String.format(Resources.CHAR_LIMIT_MSG, '<span class="char-remain-count">' + characterLimit + '</span>', '<span class="char-allowed-count">' + characterLimit + '</span>');
      var charCountContainer = $(this).next('div.char-count');

      if (charCountContainer.length === 0) {
        charCountContainer = $('<div class="char-count"/>').insertAfter($(this));
      }

      charCountContainer.html(charCountHtml); // trigger the keydown event so that any existing character data is calculated

      $(this).trigger('change');
    });
  },

  /**
   * @function
   * @description Binds the onclick-event to a delete button on a given container,
   * which opens a confirmation box with a given message
   * @param {String} container The name of element to which the function will be bind
   * @param {String} message The message the will be shown upon a click
   */
  setDeleteConfirmation: function setDeleteConfirmation(container, message) {
    $(container).on('click', '.delete', function () {
      return window.confirm(message);
    });
  },

  /**
   * @function
   * @description Scrolls a browser window to a given x point
   * @param {String} The x coordinate
   */
  scrollBrowser: function scrollBrowser(xLocation) {
    $('html, body').animate({
      scrollTop: xLocation
    }, 500);
  },
  phoneValidation: function phoneValidation() {},
  isMobile: function isMobile() {
    var mobileAgentHash = ['mobile', 'tablet', 'phone', 'ipad', 'ipod', 'android', 'blackberry', 'windows ce', 'opera mini', 'palm'];
    var idx = 0;
    var isMobile = false;
    var userAgent = navigator.userAgent.toLowerCase();

    while (mobileAgentHash[idx] && !isMobile) {
      isMobile = userAgent.indexOf(mobileAgentHash[idx]) >= 0;
      idx++;
    }

    return isMobile || 'ontouchstart' in window;
  },
  isTablet: function isTablet() {
    var isTablet = false;
    var userAgent = navigator.userAgent;
    var platform = navigator.platform;

    if (/tablet|Tablet|iPad/.test(userAgent) || platform === 'MacIntel' && navigator.maxTouchPoints > 1 || platform == 'iPad' || /Android/.test(userAgent) && userAgent.indexOf('Mobile') === -1) {
      isTablet = true;
    }

    return isTablet;
  },
  isMobileSize: function isMobileSize() {
    if (window.innerWidth <= max_mobile_breakpoint - 1) {
      return true;
    } else {
      return false;
    }
  },
  isLandscapeOrientation: function isLandscapeOrientation() {
    return window.screen.orientation.angle;
  },

  /**
   * Get the value of a querystring
   * @param  {String} field The field to get the value of
   * @param  {String} url   The URL to get the value from (optional)
   * @return {String}       The field value
   */
  getQueryStringValue: function getQueryStringValue(field, url) {
    var href = url ? url : window.location.href;
    var reg = new RegExp('[?&]' + field + '=([^&#]*)', 'i');
    var string = reg.exec(href);
    return string ? string[1] : null;
  },
  expand: function expand($el) {
    return $el.attr('aria-hidden', false).attr('aria-expanded', true);
  },
  contract: function contract($el) {
    return $el.attr('aria-hidden', true).attr('aria-expanded', false);
  },
  checkForLatin: function checkForLatin(address) {
    var regXLatin = /[^\u0020-\u007F\u00A0-\u024F\u1E00-\u1EFF]/g;

    if (address != undefined) {
      var strAddress = address.address1 + address.address2 + address.firstName + address.lastName + address.city + address.phone;
      return regXLatin.test(strAddress);
    }
  },
  checkForSpecialCharacter: function checkForSpecialCharacter(address) {
    var regExpr = /^\s*(?:\+?(\d{1,3}))?[-. (]*(\d{3})[-. )]*(\d{3})[-. ]*(\d{4})(?: *x(\d+))?\s*$/;

    if (address != undefined) {
      var strAddress = address.phone;
      return !regExpr.test(strAddress);
    }
  },
  checkForSpecialCharForAddr: function checkForSpecialCharForAddr(address) {
    var regExpr = /^[a-zA-Z0-9\(\s\'\-\#\.\,\/\)]+$/;

    if (address != undefined) {
      var strAddress = address.address1 + address.address2;
      return regExpr.test(strAddress);
    }

    return true;
  },
  checkForEmptyStateCode: function checkForEmptyStateCode(address) {
    if (address != undefined) {
      var stateCd = address.stateCode;
      var showFrm = false;

      if (stateCd == null || stateCd == undefined) {
        showFrm = true;
      }

      return showFrm;
    }
  },
  getCreditCardType: function getCreditCardType(accountNumber) {
    //start without knowing the credit card type
    var result = 'unknown'; //first check for MasterCard

    if (/^(?:5[1-5][0-9]{2}|222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]/.test(accountNumber)) {
      result = 'masterCard';
    } else if (/^(5018|5020|5038|5612|5893|5811|6304|6759|6761|6763|67|5000|6771|6333|6799|6762|0604|6790)[0-9]{8,19}$/.test(accountNumber)) {
      result = 'maestro';
    } else if (/^4/.test(accountNumber)) {
      result = 'visa';
    } else if (/^3[47]/.test(accountNumber)) {
      result = 'americanExpress';
    } else if (/^(6011|622(12[6-9]|1[3-9][0-9]|[2-8][0-9]{2}|9[0-1][0-9]|92[0-5]|64[4-9])|65|64)/.test(accountNumber) || /^(?:2131|1800)\d{11,14}|352[8-9]\d{12,15}|35[3-7]\d{13,16}|35[8]\d{13,16}$/.test(accountNumber) || /^30[0-5]\d{13,16}|3095\d{12,15}$/.test(accountNumber)) {
      result = 'discover';
    }

    return result;
  },
  appendcreditcardType: function appendcreditcardType(type, cardType) {
    switch (type) {
      case 'masterCard':
      case 'Master':
        cardType.val('Master').trigger('change');
        break;

      case 'visa':
      case 'Visa':
        cardType.val('Visa').trigger('change');
        break;

      case 'americanExpress':
      case 'Amex':
        cardType.val('Amex').trigger('change');
        break;

      case 'discover':
      case 'Discover':
        cardType.val('Discover').trigger('change');
        break;

      case 'jcb':
      case 'JCB':
        cardType.val('JCB').trigger('change');
        break;

      case 'maestro':
      case 'Maestro':
        cardType.val('Maestro').trigger('change');
        break;

      default:
        break;
    }
  },
  formatPrice: function formatPrice(val, addFraction) {
    if (Intl && Intl.NumberFormat) {
      return new Intl.NumberFormat(currentLocale, {
        minimumFractionDigits: addFraction ? 2 : 0,
        maximumFractionDigits: addFraction ? 2 : 0,
        style: 'currency',
        currency: Resources.CURRENCY_CODE
      }).format(val);
    } else {
      return Resources.CURRENCY_SYMBOL + val;
    }
  },
  intlPriceToCleanUS: function intlPriceToCleanUS(s) {
    s = unescape(s);

    if (EU_regex.test(s)) {
      s = s.replace('.', '').replace(',', '.');
    } else {
      s = s.replace(',', '');
    }

    return s;
  },
  setCookie: function setCookie(cname, cvalue, exdays) {
    if (!exdays) {
      exdays = 3650;
    }

    var d = new Date();
    d.setTime(d.getTime() + exdays * 24 * 60 * 60 * 1000);
    var expires = "expires=" + d.toGMTString();
    document.cookie = cname + "=" + cvalue + ";" + expires + ";domain=." + window.location.hostname + ";path=/";
  },
  getCookie: function getCookie(cname) {
    var name = cname + "=";
    var decodedCookie = decodeURIComponent(document.cookie);
    var ca = decodedCookie.split(';');

    for (var i = 0; i < ca.length; i++) {
      var c = ca[i];

      while (c.charAt(0) == ' ') {
        c = c.substring(1);
      }

      if (c.indexOf(name) == 0) {
        return c.substring(name.length, c.length);
      }
    }

    return "";
  },

  /**
   * Execute callback function when the user has stopped resizing the screen.
   * @param callback {Function} The callback function to execute.
   */
  smartResize: function smartResize(callback) {
    var timeout;
    window.addEventListener('resize', function () {
      clearTimeout(timeout);
      timeout = setTimeout(callback, 100);
    });
    return callback;
  },
  cleanupID: function cleanupID(s) {
    return typeof s === 'string' ? s.replace(new RegExp('[^a-z0-9_\-]', 'gi'), '_').toLowerCase() : s;
  },
  padNumber: function padNumber(val, size) {
    var v = parseInt(val).toString();
    return v.length > size ? v : Array(size - v.length + 1).join("0") + v;
  },
  getBrowser: function getBrowser() {
    function calcBrowser() {
      var ua = window.navigator.userAgent.toLowerCase();

      function isSafari() {
        return ua.indexOf('safari') >= 0 && ua.indexOf('chrome') < 0 && ua.indexOf('android') < 0;
      }

      return {
        isEdge: !!window.navigator.userAgent.match(/Edge/g),
        isSafari: isSafari(),
        isWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window.navigator.userAgent)
      };
    }

    if (!browser) {
      browser = calcBrowser();
    }

    return browser;
  },
  getDevice: function getDevice(overrides) {
    function calcDevice(userAgent) {
      var support = util.getSupport();
      var platform = window.navigator.platform;
      var ua = userAgent || window.navigator.userAgent;
      var device = {
        ios: false,
        android: false
      };
      var screenWidth = window.screen.width;
      var screenHeight = window.screen.height;
      var android = ua.match(/(Android);?[\s\/]+([\d.]+)?/); // eslint-disable-line

      var ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
      var ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
      var iphone = !ipad && ua.match(/(iPhone\sOS|iOS)\s([\d_]+)/);
      var windows = platform === 'Win32';
      var macos = platform === 'MacIntel'; // iPadOs 13 fix

      var iPadScreens = ['1024x1366', '1366x1024', '834x1194', '1194x834', '834x1112', '1112x834', '768x1024', '1024x768'];

      if (!ipad && macos && support.touch && iPadScreens.indexOf(screenWidth + "x" + screenHeight) >= 0) {
        ipad = ua.match(/(Version)\/([\d.]+)/);
        if (!ipad) ipad = [0, 1, '13_0_0'];
        macos = false;
      } // ipadOs another trick!!


      if (!ipad && macos && support.touch) {
        if (ua.toLowerCase().indexOf('macintosh') > -1 && navigator.maxTouchPoints && navigator.maxTouchPoints > 2) {
          ipad = ua.match(/(Version)\/([\d.]+)/);
          macos = false;
        }
      } // Android


      if (android && !windows) {
        device.os = 'android';
        device.android = true;
      }

      if (ipad || iphone || ipod) {
        device.os = 'ios';
        device.ios = true;
      } // Export object


      return device;
    }

    if (!device) {
      device = calcDevice(overrides);
    }

    return device;
  },
  getSupport: function getSupport() {
    function calcSupport() {
      return {
        touch: !!('ontouchstart' in window || window.DocumentTouch && document instanceof window.DocumentTouch),
        pointerEvents: !!window.PointerEvent && 'maxTouchPoints' in window.navigator && window.navigator.maxTouchPoints >= 0,
        observer: function checkObserver() {
          return 'MutationObserver' in window || 'WebkitMutationObserver' in window;
        }(),
        passiveListener: function checkPassiveListener() {
          var supportsPassive = false;

          try {
            var opts = Object.defineProperty({}, 'passive', {
              // eslint-disable-next-line
              get: function get() {
                supportsPassive = true;
              }
            });
            window.addEventListener('testPassiveListener', null, opts);
          } catch (e) {// No support
          }

          return supportsPassive;
        }(),
        gestures: function checkGestures() {
          return 'ongesturestart' in window;
        }()
      };
    }

    if (!support) {
      support = calcSupport();
    }

    return support;
  },

  /**
   * @function
   * @description Forces the keyboard to open on mobile
   * @param {Element} searchInputField The element to which the function will be bind
   * @param {Number} timeout The amount of time to set for the timeout
   */
  focusAndOpenKeyboard: function focusAndOpenKeyboard(searchInputField, timeout) {
    if (searchInputField) {
      if (!timeout) {
        timeout = 100;
      } // Align temp input element approximately where the input element is
      // so the cursor doesn't jump around


      var __tempEl__ = document.createElement('input');

      __tempEl__.style.position = 'absolute';
      __tempEl__.style.top = searchInputField.offsetTop + 'px';
      __tempEl__.style.left = searchInputField.offsetLeft + 'px';
      __tempEl__.style.height = 0;
      __tempEl__.style.opacity = 0; // Put this temp element as a child of the page <body> and focus on it

      document.body.appendChild(__tempEl__);

      __tempEl__.focus(); // The keyboard is open. Now do a delayed focus on the target element


      setTimeout(function () {
        searchInputField.focus();
        searchInputField.click(); // Remove the temp element

        document.body.removeChild(__tempEl__);
      }, timeout);
    }
  },
  capitalizeString: function capitalizeString(str) {
    str = str == null ? '' : String(str).toLowerCase();
    return str.charAt(0).toUpperCase() + str.slice(1);
  },
  disableIphoneScroll: function disableIphoneScroll(listOfClassName) {
    var _array = listOfClassName,
        _i; // creating variable only once


    if (Array.isArray(listOfClassName)) {
      for (_i = 0; _i <= _array.length - 1; _i++) {
        var element = document.getElementsByClassName(_array[_i]);

        if (element !== undefined) {
          element[0].addEventListener('touchmove', function (e) {
            e.preventDefault();
          }, false);
        }
      }
    } else if (typeof listOfClassName === 'string') {
      var element = document.getElementsByClassName(_array);

      if (element !== undefined) {
        element[0].addEventListener('touchmove', function (e) {
          e.preventDefault();
        }, false);
      }
    }
  },
  usedBackButton: function usedBackButton() {
    if (window.performance) {
      var navEntries = window.performance.getEntriesByType('navigation');

      if (navEntries.length > 0 && navEntries[0].type === 'back_forward') {
        return true;
      } else if (window.performance.navigation && window.performance.navigation.type == window.performance.navigation.TYPE_BACK_FORWARD) {
        return true;
      }
    }

    return false;
  },

  /**
   * @function
   * @description remove all attributes which are undefined, null or '' (empty string) in an object
   * @param {Object} obj The object to clean
   * @return {Object}    The updated object
   */
  cleanObj: function cleanObj(obj) {
    try {
      for (var propName in obj) {
        if (obj[propName] === null || obj[propName] === 'null' || obj[propName] === undefined || obj[propName] === '') {
          delete obj[propName];
        }
      }

      return obj;
    } catch (error) {
      // error happened. return original object
      return obj;
    }
  },

  /**
   * @function
   * @description check if the value is undefined, null or '' (empty string)
   * @param {string} val the element value
   * @return {boolean} returns true if empty
   */
  isInvalidValue: function isInvalidValue(val) {
    return val === undefined || val === 'undefined' || val === null || val === 'null' || val === '';
  }
};
module.exports = util;

/***/ }),

/***/ "./app_foundation_sfra/cartridge/client/default/js/adyenCheckout.js":
/*!**************************************************************************!*\
  !*** ./app_foundation_sfra/cartridge/client/default/js/adyenCheckout.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* eslint-disable */

var store = __webpack_require__(/*! adyenCartridge/store/index */ "./int_adyen_SFRA/cartridge/store/index.js");

var _require = __webpack_require__(/*! ./adyen_checkout/renderGenericComponent */ "./app_foundation_sfra/cartridge/client/default/js/adyen_checkout/renderGenericComponent.js");

var renderGenericComponent = _require.renderGenericComponent;

var _require2 = __webpack_require__(/*! ./adyen_checkout/checkoutConfiguration */ "./app_foundation_sfra/cartridge/client/default/js/adyen_checkout/checkoutConfiguration.js");

var setCheckoutConfiguration = _require2.setCheckoutConfiguration;

var _require3 = __webpack_require__(/*! adyen/adyen_checkout/helpers */ "./int_adyen_SFRA/cartridge/client/default/js/adyen_checkout/helpers.js");

var assignPaymentMethodValue = _require3.assignPaymentMethodValue;
var showValidation = _require3.showValidation;
var paymentFromComponent = _require3.paymentFromComponent;

var _require4 = __webpack_require__(/*! adyen/adyen_checkout/validateComponents */ "./int_adyen_SFRA/cartridge/client/default/js/adyen_checkout/validateComponents.js");

var validateComponents = _require4.validateComponents;
$('#dwfrm_billing .submit-payment').click(function apiRequest(e) {
  e.preventDefault();
  var form = $('#dwfrm_billing');
  var url = form.attr('action');
  $.ajax({
    type: 'POST',
    url: url,
    data: form.serialize(),
    async: false,
    success: function success(data) {
      store.formErrorsExist = 'fieldErrors' in data;
    }
  });
});
setCheckoutConfiguration();

if (window.cardholderNameBool !== 'null') {
  store.checkoutConfiguration.paymentMethodsConfiguration.card.hasHolderName = true;
  store.checkoutConfiguration.paymentMethodsConfiguration.card.holderNameRequired = true;
}

if (window.installments) {
  try {
    var installments = JSON.parse(window.installments);
    store.checkoutConfiguration.paymentMethodsConfiguration.card.installments = installments;
  } catch (e) {} // eslint-disable-line no-empty

}

if (window.googleMerchantID !== 'null' && window.Configuration.environment === 'live') {
  var id = 'merchantIdentifier';
  store.checkoutConfiguration.paymentMethodsConfiguration.paywithgoogle.configuration[id] = window.googleMerchantID;
} // Submit the payment


$('button[value="submit-payment"]').on('click', function () {
  if (store.paypalTerminatedEarly) {
    paymentFromComponent({
      cancelTransaction: true,
      merchantReference: document.querySelector('#merchantReference').value
    });
    store.paypalTerminatedEarly = false;
  }

  if (document.querySelector('#selectedPaymentOption').value === 'AdyenPOS') {
    document.querySelector('#terminalId').value = document.querySelector('#terminalList').value;
  }

  if (document.querySelector('#selectedPaymentOption').value === 'AdyenComponent') {
    assignPaymentMethodValue();
    validateComponents();
    return showValidation();
  }

  return true;
});
/**
 * Assigns stateData value to the hidden stateData input field
 * so it's sent to the backend for processing
 */

module.exports.methods = {
  renderGenericComponent: renderGenericComponent
};

/***/ }),

/***/ "./app_foundation_sfra/cartridge/client/default/js/adyen_checkout/checkoutConfiguration.js":
/*!*************************************************************************************************!*\
  !*** ./app_foundation_sfra/cartridge/client/default/js/adyen_checkout/checkoutConfiguration.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* eslint-disable */
var baseCheckoutConfiguration = __webpack_require__(/*! adyen/adyen_checkout/checkoutConfiguration */ "./int_adyen_SFRA/cartridge/client/default/js/adyen_checkout/checkoutConfiguration.js");

var helpers = __webpack_require__(/*! adyen/adyen_checkout/helpers */ "./int_adyen_SFRA/cartridge/client/default/js/adyen_checkout/helpers.js");

var _require = __webpack_require__(/*! adyen/commons/index */ "./int_adyen_SFRA/cartridge/client/default/js/commons/index.js");

var onBrand = _require.onBrand;
var onFieldValid = _require.onFieldValid;

var store = __webpack_require__(/*! adyenCartridge/store/index */ "./int_adyen_SFRA/cartridge/store/index.js");

function getCardConfig() {
  return {
    enableStoreDetails: showStoreDetails,
    onChange: function onChange(state) {
      store.isValid = state.isValid;
      var method = state.data.paymentMethod.storedPaymentMethodId ? 'storedCard'.concat(state.data.paymentMethod.storedPaymentMethodId) : store.selectedMethod;

      if (method) {
        store.updateSelectedPayment(method, 'isValid', store.isValid);
        store.updateSelectedPayment(method, 'stateData', state.data);
      }

      var isunChecked = $('.paymentBlockContainer #component_scheme .adyen-checkout__card-input .adyen-checkout__loading-input__form .adyen-checkout__store-details .adyen-checkout__checkbox :input').hasClass('unchecked');
      var ischecked = $('.paymentBlockContainer #component_scheme .adyen-checkout__card-input .adyen-checkout__loading-input__form .adyen-checkout__store-details .adyen-checkout__checkbox :input').hasClass('checked');

      if (!isunChecked && !ischecked) {
        $('.paymentBlockContainer #component_scheme .adyen-checkout__card-input .adyen-checkout__loading-input__form .adyen-checkout__store-details .adyen-checkout__checkbox :input').attr('checked', 'true');
      }

      if ($('.paymentBlockContainer').hasClass('myStoredCard')) {
        document.querySelector('.myStoredCard').classList.remove('hasValidStoreCardCVV');
      }

      var disablePlaceOrder = false;

      if ($('.adyen-checkout__field--cardNumber .adyen-checkout__field--valid')) {
        $('.adyen-checkout__field--cardNumber.adyen-checkout__label .adyen-checkout__label__text').removeClass('adyen-checkout__label__text--error');
      }

      if (state.data.paymentMethod.brand === 'bcmc') {
        document.querySelector('.adyen-checkout__field__cvc').classList.add('d-none');
        document.querySelector('.adyen-checkout__field--expiryDate').classList.remove('adyen-checkout__field--50');
        document.querySelector('.adyen-checkout__field--expiryDate').classList.add('mr-0');

        if ($('.gift-card-container').length > 0) {
          $('.adyen-checkout__field--cardNumber').addClass('adyen-checkout__field--error');
          $('.adyen-checkout__field--cardNumber .adyen-checkout__card__cardNumber__input').addClass('adyen-checkout__input--error');
          $('.adyen-checkout__field--cardNumber .adyen-checkout__label .adyen-checkout__label__text').addClass('adyen-checkout__label__text--error');

          if (!$('#bcmc-gc-error').length) {
            $('.adyen-checkout__field--cardNumber .adyen-checkout__label .adyen-checkout__input-wrapper').append('<span class="adyen-checkout__error-text" aria-live="polite" id="bcmc-gc-error">' + Resources.GC_BCMC_ERROR_MSG + '</span>');
          }

          disablePlaceOrder = true;
        } else {
          $('#bcmc-gc-error').remove();
          $('.redeem-gift-card').addClass('d-none');

          if ($('.js-redeem-gc').is(':checked')) {
            $('.js-redeem-gc').prop('checked', false).trigger('change');
          }
        }
      } else {
        $('.redeem-gift-card').removeClass('d-none');
        $('#bcmc-gc-error').remove();
        document.querySelector('.adyen-checkout__field__cvc').classList.remove('d-none');
        document.querySelector('.adyen-checkout__field--expiryDate').classList.add('adyen-checkout__field--50');
        document.querySelector('.adyen-checkout__field--expiryDate').classList.remove('mr-0');
      }

      var billingAddressFieldsFilled = document.querySelector('#billing-address-field-filled').getAttribute('value');

      if (state.data.paymentMethod.encryptedCardNumber && state.data.paymentMethod.encryptedExpiryMonth && state.data.paymentMethod.encryptedExpiryYear && state.data.paymentMethod.encryptedSecurityCode && state.data.paymentMethod.holderName && store.isValid === true) {
        if (billingAddressFieldsFilled === "false") {
          $('form#dwfrm_billing').closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', 'disabled');
        } else {
          if (!isunChecked && !ischecked) {
            $('.paymentBlockContainer #component_scheme .adyen-checkout__card-input .adyen-checkout__loading-input__form .adyen-checkout__store-details .adyen-checkout__checkbox :input').removeAttr('checked');
            $('.paymentBlockContainer #component_scheme .adyen-checkout__card-input .adyen-checkout__loading-input__form .adyen-checkout__store-details .adyen-checkout__checkbox .adyen-checkout__checkbox__input').trigger('click');
          }

          $('form#dwfrm_billing').closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', false);
        }

        document.querySelector('#adyen-component-form-field-filled').setAttribute('value', 'true');
        document.querySelector('#adyen-component-saved-form-field-filled').setAttribute('value', 'false');
        $('#adyen-component-form-field-filled').addClass('entered');
        document.querySelector('#adyenCard-holderName').setAttribute('value', $('.paymentBlockContainer #component_scheme .adyen-checkout__card-input .adyen-checkout__loading-input__form .adyen-checkout__card__holderName .adyen-checkout__label .adyen-checkout__input-wrapper :input ').val());
      } else if (state.data.paymentMethod.storedPaymentMethodId && state.data.paymentMethod.encryptedSecurityCode && store.isValid === true || state.data.paymentMethod.storedPaymentMethodId && store.isValid === true && state.data.paymentMethod.brand == 'bcmc') {
        if (billingAddressFieldsFilled === "false") {
          $('form#dwfrm_billing').closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', 'disabled');
        } else {
          $('form#dwfrm_billing').closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', false);
        }

        document.querySelector('#adyen-component-form-field-filled').setAttribute('value', 'false');
        document.querySelector('#adyen-component-saved-form-field-filled').setAttribute('value', 'true');
        $('#saved_cards').find('option:selected').addClass('entered');

        if ($('.paymentBlockContainer').hasClass('myStoredCard')) {
          document.querySelector('.myStoredCard').classList.add('hasValidStoreCardCVV');
        }
      } else if (state.data.paymentMethod.encryptedCardNumber && state.data.paymentMethod.encryptedExpiryMonth && state.data.paymentMethod.encryptedExpiryYear && state.data.paymentMethod.brand == 'bcmc' && state.data.paymentMethod.holderName && store.isValid === true) {
        if (billingAddressFieldsFilled === "false") {
          $('form#dwfrm_billing').closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', 'disabled');
        } else {
          if (!isunChecked && !ischecked) {
            $('.paymentBlockContainer #component_scheme .adyen-checkout__card-input .adyen-checkout__loading-input__form .adyen-checkout__store-details .adyen-checkout__checkbox :input').removeAttr('checked');
            $('.paymentBlockContainer #component_scheme .adyen-checkout__card-input .adyen-checkout__loading-input__form .adyen-checkout__store-details .adyen-checkout__checkbox .adyen-checkout__checkbox__input').trigger('click');
          }

          $('form#dwfrm_billing').closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', false);
        }

        document.querySelector('#adyen-component-form-field-filled').setAttribute('value', 'true');
      } else if (state.data.paymentMethod.storedPaymentMethodId && state.data.paymentMethod.encryptedSecurityCode && state.data.paymentMethod.holderName && state.data.paymentMethod.holderName && store.isValid === true) {
        if (billingAddressFieldsFilled === "false") {
          $('form#dwfrm_billing').closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', 'disabled');
        } else {
          $('form#dwfrm_billing').closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', false);
        }

        if ($('.paymentBlockContainer').hasClass('myStoredCard')) {
          document.querySelector('.myStoredCard').classList.add('hasValidStoreCardCVV');
        }
      } else if (state.data.paymentMethod.storedPaymentMethodId && state.data.paymentMethod.encryptedSecurityCode === undefined) {
        $('form#dwfrm_billing').closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', 'disabled');
        $('#saved_cards').find('option:selected').removeClass('entered');
      } else if (state.data.paymentMethod.holderName === "" && !state.data.paymentMethod.encryptedCardNumber && !state.data.paymentMethod.encryptedExpiryMonth && !state.data.paymentMethod.encryptedExpiryYear && !state.data.paymentMethod.encryptedSecurityCode) {
        var adyenComponentIsEntered = $('#adyen-component-form-field-filled').hasClass('entered');

        if (billingAddressFieldsFilled === "true" && adyenComponentIsEntered === true) {
          $('form#dwfrm_billing').closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', false);
        } else if ($('.submit-payment.zero-dollar-swatch-payment').length > 0) {
          $('form#dwfrm_billing').closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', false);
        } else {
          $('form#dwfrm_billing').closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', 'disabled');
        }
      } else {
        $('form#dwfrm_billing').closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', 'disabled');
        document.querySelector('#adyen-component-form-field-filled').setAttribute('value', 'false');
        document.querySelector('#adyen-component-saved-form-field-filled').setAttribute('value', 'false');
        $('#adyen-component-form-field-filled').removeClass('entered');
      }

      if (disablePlaceOrder) {
        $('form#dwfrm_billing').closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', 'disabled');
      }

      if ($('.adyen-checkout__card__holderName__input')) {
        var cardHolderName = $('.adyen-checkout__card__holderName__input').val();
        cardHolderName = cardHolderName.replace(/\s\s+/g, ' ');
        $('.adyen-checkout__card__holderName__input').val(cardHolderName);
        var result = /\\f/.test(cardHolderName);

        if (result) {
          if (!$('.cc-holdername-error').length) {
            $('.adyen-checkout__card__holderName .adyen-checkout__label').append($("<span>", {
              text: Resources.CC_INVALID_HOLDERNAME,
              addClass: "adyen-checkout__error-text cc-holdername-error"
            }));
            $('.adyen-checkout__field.adyen-checkout__card__holderName .adyen-checkout-input__inline-validation').hide();
            $('.adyen-checkout__field.adyen-checkout__card__holderName .adyen-checkout__label__text').addClass('adyen-checkout__label__text--error');
            $('.adyen-checkout__card__holderName__input').addClass('validation-error');
          }

          $('form#dwfrm_billing').closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', 'disabled');
        } else {
          if ($('.cc-holdername-error').length) {
            $('.cc-holdername-error').remove();
          }

          $('.adyen-checkout__card__holderName__input').removeClass('validation-error');
          $('.adyen-checkout__field.adyen-checkout__card__holderName .adyen-checkout-input__inline-validation').show();
          $('.adyen-checkout__field.adyen-checkout__card__holderName .adyen-checkout__label__text').removeClass('adyen-checkout__label__text--error');
        }
      }
    },
    onFieldValid: onFieldValid,
    onBrand: onBrand
  };
}

function getPaypalConfig() {
  store.paypalTerminatedEarly = false;
  return {
    showPayButton: true,
    environment: window.Configuration.environment,
    intent: window.paypalIntent,
    onSubmit: function onSubmit(state, component) {
      helpers.assignPaymentMethodValue();
      document.querySelector('#adyenStateData').value = JSON.stringify(store.selectedPayment.stateData);
      helpers.paymentFromComponent(state.data, component);
    },
    onCancel: function onCancel(data, component) {
      store.paypalTerminatedEarly = false;
      helpers.paymentFromComponent({
        cancelTransaction: true,
        merchantReference: document.querySelector('#merchantReference').value
      }, component);
    },
    onError: function onError(error, component) {
      store.paypalTerminatedEarly = false;

      if (component) {
        component.setStatus('ready');
      }

      document.querySelector('#showConfirmationForm').submit();
    },
    onAdditionalDetails: function onAdditionalDetails(state) {
      store.paypalTerminatedEarly = false;
      document.querySelector('#additionalDetailsHidden').value = JSON.stringify(state.data);
      document.querySelector('#showConfirmationForm').submit();
    },
    onClick: function onClick(data, actions) {
      if (store.paypalTerminatedEarly) {
        helpers.paymentFromComponent({
          cancelTransaction: true,
          merchantReference: document.querySelector('#merchantReference').value
        });
        store.paypalTerminatedEarly = false;
        return actions.resolve();
      }

      store.paypalTerminatedEarly = true;
      $('#dwfrm_billing').trigger('submit');

      if (store.formErrorsExist) {
        return actions.reject();
      }

      return null;
    }
  };
}

function getQRCodeConfig() {
  return {
    showPayButton: true,
    onSubmit: function onSubmit(state, component) {
      $('#dwfrm_billing').trigger('submit');

      if (store.formErrorsExist) {
        return;
      }

      helpers.assignPaymentMethodValue();
      document.querySelector('#adyenStateData').value = JSON.stringify(store.selectedPayment.stateData);
      helpers.paymentFromComponent(state.data, component);
    },
    onAdditionalDetails: function onAdditionalDetails(state
    /* , component */
    ) {
      document.querySelector('#additionalDetailsHidden').value = JSON.stringify(state.data);
      document.querySelector('#showConfirmationForm').submit();
    }
  };
}

function getMbwayConfig() {
  return {
    showPayButton: true,
    onSubmit: function onSubmit(state, component) {
      $('#dwfrm_billing').trigger('submit');
      helpers.assignPaymentMethodValue();

      if (store.formErrorsExist) {
        component.setStatus('ready');
        return;
      }

      if (document.getElementById('component_mbway')) {
        document.getElementById('component_mbway').querySelector('button').disabled = true;
      }

      helpers.paymentFromComponent(state.data, component);
      document.querySelector('#adyenStateData').value = JSON.stringify(store.selectedPayment.stateData);
    },
    onError: function onError()
    /* error, component */
    {
      document.querySelector('#showConfirmationForm').submit();
    },
    onAdditionalDetails: function onAdditionalDetails(state
    /* , component */
    ) {
      document.querySelector('#additionalDetailsHidden').value = JSON.stringify(state.data);
      document.querySelector('#showConfirmationForm').submit();
    }
  };
}

function getGooglePayConfig() {
  return {
    environment: window.Configuration.environment,
    onSubmit: function onSubmit() {
      helpers.assignPaymentMethodValue();
      document.querySelector('button[value="submit-payment"]').disabled = false;
      document.querySelector('button[value="submit-payment"]').click();
    },
    configuration: {
      gatewayMerchantId: window.merchantAccount
    },
    showPayButton: true,
    buttonColor: 'white'
  };
}

function handleOnChange(state) {
  var type = state.data.paymentMethod.type;
  store.isValid = state.isValid;

  if (!store.componentsObj[type]) {
    store.componentsObj[type] = {};
  } // Enable the Submit Shipping when Bank is selectd for iDeal


  if (type && (type === 'ideal' || type === 'dotpay') && state.isValid) {
    var _submitBtn = document.querySelector('.submit-payment');

    _submitBtn.disabled = !document.querySelector('.adyen-checkout__dropdown__element--active');
  }

  store.componentsObj[type].isValid = store.isValid;
  store.componentsObj[type].stateData = state.data;
}

function getAmazonpayConfig() {
  return {
    showPayButton: true,
    productType: 'PayAndShip',
    checkoutMode: 'ProcessOrder',
    environment: window.Configuration.environment,
    region: window.Configuration.region,
    placement: window.Configuration.placement,
    scopes: window.Configuration.scopes,
    locale: window.Configuration.locale,
    returnUrl: window.returnURL.replace('payment', 'placeOrder'),
    onClick: function onClick(resolve, reject) {
      $('#dwfrm_billing').trigger('submit');

      if (store.formErrorsExist) {
        reject();
      } else {
        helpers.assignPaymentMethodValue();
        resolve();
      }
    },
    onError: function onError() {}
  };
}

function getBcmcConfig() {
  return {
    hasHolderName: true,
    holderNameRequired: true,
    enableStoreDetails: true,
    name: 'Bancontact card'
  };
}

function setCheckoutConfiguration() {
  store.checkoutConfiguration.onChange = handleOnChange;
  store.checkoutConfiguration.showPayButton = false;
  store.checkoutConfiguration.clientKey = window.adyenClientKey;
  store.checkoutConfiguration.paymentMethodsConfiguration = {
    card: getCardConfig(),
    storedCard: getCardConfig(),
    boletobancario: {
      personalDetailsRequired: true,
      // turn personalDetails section on/off
      billingAddressRequired: false,
      // turn billingAddress section on/off
      showEmailAddress: false // allow shopper to specify their email address

    },
    paywithgoogle: getGooglePayConfig(),
    paypal: getPaypalConfig(),
    mbway: getMbwayConfig(),
    swish: getQRCodeConfig(),
    bcmc_mobile: getQRCodeConfig(),
    wechatpayQR: getQRCodeConfig(),
    amazonpay: getAmazonpayConfig(),
    bcmc: getBcmcConfig(),
    pix: getQRCodeConfig(),
    afterpay_default: {
      visibility: {
        personalDetails: 'editable',
        billingAddress: 'hidden',
        deliveryAddress: 'hidden'
      }
    },
    facilypay_3x: {
      visibility: {
        personalDetails: 'editable',
        billingAddress: 'hidden',
        deliveryAddress: 'hidden'
      }
    },
    ratepay: {
      visibility: {
        personalDetails: 'editable',
        billingAddress: 'hidden',
        deliveryAddress: 'hidden'
      }
    }
  };
  store.checkoutConfiguration.removePaymentMethods = ['bcmc'];
}

baseCheckoutConfiguration.getCardConfig = getCardConfig;
baseCheckoutConfiguration.getGooglePayConfig = getGooglePayConfig;
baseCheckoutConfiguration.getPaypalConfig = getPaypalConfig;
baseCheckoutConfiguration.getMbwayConfig = getMbwayConfig;
baseCheckoutConfiguration.getQRCodeConfig = getQRCodeConfig;
baseCheckoutConfiguration.getAmazonpayConfig = getAmazonpayConfig;
baseCheckoutConfiguration.setCheckoutConfiguration = setCheckoutConfiguration;
module.exports = baseCheckoutConfiguration;

/***/ }),

/***/ "./app_foundation_sfra/cartridge/client/default/js/adyen_checkout/helpers.js":
/*!***********************************************************************************!*\
  !*** ./app_foundation_sfra/cartridge/client/default/js/adyen_checkout/helpers.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */


function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError('Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.');
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === 'Object' && o.constructor) n = o.constructor.name;
  if (n === 'Map' || n === 'Set') return Array.from(o);
  if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== 'undefined' && Symbol.iterator in Object(iter)) return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

var store = __webpack_require__(/*! adyenCartridge/store/index */ "./int_adyen_SFRA/cartridge/store/index.js");

var _require = __webpack_require__(/*! adyen/adyen_checkout/qrCodeMethods */ "./int_adyen_SFRA/cartridge/client/default/js/adyen_checkout/qrCodeMethods.js");

var qrCodeMethods = _require.qrCodeMethods;

function resetPaymentMethod() {
  $('#requiredBrandCode').hide();
  $('#selectedIssuer').val('');
  $('#adyenIssuerName').val('');
  $('#dateOfBirth').val('');
  $('#telephoneNumber').val('');
  $('#gender').val('');
  $('#bankAccountOwnerName').val('');
  $('#bankAccountNumber').val('');
  $('#bankLocationId').val('');
  $('.additionalFields').hide();
}
/**
 * Changes the "display" attribute of the selected method from hidden to visible
 */


function displaySelectedMethod(type) {
  var _document$querySelect;

  var maxMobile = 960;
  /* eslint-disable */
  // If 'type' input field is present use this as type, otherwise default to function input param

  store.selectedMethod = document.querySelector('#component_'.concat(type, ' .type')) ? document.querySelector('#component_'.concat(type, '.type')).value : type;
  resetPaymentMethod();
  document.querySelector('button[value="submit-payment"]').disabled = ['paypal', 'paywithgoogle', 'mbway'].concat(_toConsumableArray(qrCodeMethods)).indexOf(type) > -1;
  document.querySelector('#component_'.concat(type)).setAttribute('style', 'display:block'); // set brand for giftcards if hidden inputfield is present

  if ($(window).width() < maxMobile) {
    if (type == 'scheme') {
      document.querySelector('#component_'.concat(type)).scrollIntoView({
        block: 'center',
        behavior: 'smooth'
      });
    } else {
      document.querySelector('.next-step-button').scrollIntoView({
        block: 'start',
        behavior: 'smooth'
      });
    }
  } // eslint-disable-next-line no-void


  document.querySelector('.billing-address-block').classList.add('d-none');
  document.querySelector('#savedCardSelected').setAttribute('value', 'false');

  if (document.querySelector('.redeem-gift-card')) {
    document.querySelector('.redeem-gift-card').classList.add('d-none');
  }

  store.brand = (_document$querySelect = document.querySelector('#component_'.concat(type, '.brand'))) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.value; // Hide billing and payment section for applepay

  if (type !== 'scheme' && type !== 'paypal') {
    if (document.querySelector('.redeem-gift-card')) {
      document.querySelector('.redeem-gift-card').setAttribute('style', 'display:none');
    }

    if (document.querySelector('.payment-gift-card')) {
      document.querySelector('.payment-gift-card').setAttribute('style', 'display:none');
    }

    if (document.querySelector('.apple-pay-content')) {
      if (type === 'applepay') {
        document.querySelector('.apple-pay-content').classList.remove('d-none');
        document.querySelector('.applepay-submit-payment').classList.remove('d-none');
      } else {
        document.querySelector('.apple-pay-content').classList.add('d-none');
        document.querySelector('.applepay-submit-payment').classList.add('d-none');
      }
    }
  }

  if (type === 'applepay') {
    document.querySelector('.submit-payment').classList.add('d-none');
  } else if (type === 'dotpay') {
    var submitBtn = document.querySelector('.submit-payment');
    var dotpaySubmitBtnName = submitBtn.dataset.dotpaybtntext;
    submitBtn.innerText = dotpaySubmitBtnName;
    document.querySelector('.redeem-gift-card').setAttribute('style', 'display:none');
    document.querySelector('.payment-gift-card').setAttribute('style', 'display:none');

    if (document.querySelector('.apple-pay-content')) {
      document.querySelector('.apple-pay-content').classList.add('d-none');
      document.querySelector('.applepay-submit-payment').classList.add('d-none');
    }

    if ($('.adyen-checkout__dropdown__element--active').length > 0) {
      submitBtn.disabled = false;
    } else {
      submitBtn.disabled = true;
    }

    if (document.querySelector('.dotpay-brand-name') === null) {
      var eleSelectBank = document.createElement('div');
      eleSelectBank.innerText = 'Please choose your bank';
      eleSelectBank.classList.add('dotpay-select-bank-alert', 'mb-3');
      document.querySelector('#component_dotpay').prepend(eleSelectBank);
      var eleDotPay = document.createElement('div');
      eleDotPay.innerText = 'DotPay';
      eleDotPay.classList.add('dotpay-brand-name', 'mb-2');
      document.querySelector('#component_dotpay').prepend(eleDotPay);
    }
  } else if (type === 'klarna_account' || type === 'klarna' || type === 'klarna_paynow' || type === 'afterpaytouch') {
    document.querySelector('.billing-address-block').classList.remove('d-none');
    document.querySelector('.billing-address').classList.remove('d-none');
    var isInValid = false;
    $('.billing-address input:required, .billing-address select:required').each(function () {
      if ($(this).val() == '' && !$(this).prop('disabled')) {
        isInValid = true;
      }
    });

    if (isInValid) {
      $('form#dwfrm_billing').closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', 'disabled');
    } else {
      $('form#dwfrm_billing').closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', false);
    }

    if (type === 'afterpaytouch') {
      var _submitBtn = document.querySelector('.submit-payment');

      var _afterpaySubmitBtnName = _submitBtn.dataset.afterpaybtntext;
      _submitBtn.innerText = _afterpaySubmitBtnName;
    } else if ($('.klarna-content').length > 0) {
      if (document.querySelector('#component_'.concat(type)).querySelector('.klarna-message') !== null) {
        document.querySelector('#component_'.concat(type)).querySelector('.klarna-message').remove();
      }

      if (document.querySelector('#component_'.concat(type)).querySelector('.klarna-alert') !== null) {
        document.querySelector('#component_'.concat(type)).querySelector('.klarna-alert').remove();
      }

      var ele1 = document.createElement('div');

      if (document.querySelectorAll('li[id*="klarna"]').length > 1) {
        ele1.innerText = document.querySelector('.klarna-content').querySelector('.klarna-alert-msg').innerHTML;
      } else if (type === 'klarna') {
        ele1.innerText = document.querySelector('.klarna-content').querySelector('.klarna-paylater-msg').innerHTML;
      } else {
        ele1.innerText = document.querySelector('.klarna-content').querySelector('.klarna-paynow-msg').innerHTML;
      }

      ele1.classList.add('klarna-alert', 'mb-1');
      document.querySelector('#component_'.concat(type)).prepend(ele1);

      if (document.querySelectorAll('li[id*="klarna"]').length > 1) {
        if (document.querySelector('.klarna-radio-container1') !== null) {
          document.querySelector('.klarna-radio-container1').remove();
        }

        if (document.querySelector('.klarna-radio-container2') !== null) {
          document.querySelector('.klarna-radio-container2').remove();
        }

        var radioContainer1 = document.createElement('div');
        radioContainer1.classList.add('klarna-radio-container1', 'mt-3', 'position-relative');
        document.querySelector('#component_'.concat(type)).append(radioContainer1);
        var radioButton1 = document.createElement('input');
        radioButton1.type = 'radio';

        if (document.querySelector('li#paymentMethod_klarna_account') !== null) {
          radioButton1.id = 'radio_klarna_account';
        } else if (document.querySelector('li#paymentMethod_klarna_paynow') !== null) {
          radioButton1.id = 'radio_klarna_paynow';
        }

        radioButton1["class"] = 'radio_klarna_paynow';
        radioButton1.value = 'Klarna Pay Now';
        radioButton1.name = 'klarna_radio_buttons';

        if (type === 'klarna_paynow' || type === 'klarna_account') {
          radioButton1.checked = true;
        } else {
          radioButton1.checked = false;
        }

        var description1;
        var label1 = document.createElement('label');

        if (document.querySelector('li#paymentMethod_klarna_account') !== null) {
          label1.setAttribute('id', 'label_klarna_account');
          label1.htmlFor = 'radio_klarna_account';
          description1 = document.createTextNode(document.querySelector('.klarna-content').querySelector('.klarna-account-radio').innerHTML);
        } else if (document.querySelector('li#paymentMethod_klarna_paynow') !== null) {
          label1.setAttribute('id', 'label_klarna_paynow');
          label1.htmlFor = 'radio_klarna_paynow';
          description1 = document.createTextNode(document.querySelector('.klarna-content').querySelector('.klarna-paynow-radio').innerHTML);
        }

        label1.appendChild(description1);
        var container1 = document.getElementsByClassName('klarna-radio-container1')[0];
        container1.appendChild(radioButton1);
        container1.appendChild(label1);
        document.querySelector('#component_'.concat(type)).append(container1);
        var radioContainer2 = document.createElement('div');
        radioContainer2.classList.add('klarna-radio-container2', 'mt-3', 'position-relative');
        document.querySelector('#component_'.concat(type)).append(radioContainer2);
        var radioButton2 = document.createElement('input');
        radioButton2.type = 'radio';
        radioButton2.id = 'radio_klarna';
        radioButton2["class"] = 'radio_klarna';
        radioButton2.value = 'Klarna Pay Later';
        radioButton2.name = 'klarna_radio_buttons';

        if (type === 'klarna') {
          radioButton2.checked = true;
        } else {
          radioButton2.checked = false;
        }

        var label2 = document.createElement('label');
        label2.setAttribute('id', 'label_klarna');
        label2.htmlFor = 'radio_klarna';
        var description2 = document.createTextNode(document.querySelector('.klarna-content').querySelector('.klarna-paylater-radio').innerHTML);
        label2.appendChild(description2);
        var container2 = document.getElementsByClassName('klarna-radio-container2')[0];
        container2.appendChild(radioButton2);
        container2.appendChild(label2);
        document.querySelector('#component_'.concat(type)).append(container2);

        if (document.querySelector('li#paymentMethod_klarna_paynow') !== null && document.querySelector('li#paymentMethod_klarna_paynow').length !== 0) {
          document.querySelector('#radio_klarna_paynow').addEventListener('click', function () {
            document.querySelector('li#paymentMethod_klarna_paynow').classList.remove('d-none');
            document.querySelector('li#paymentMethod_klarna').classList.remove('d-block');
            document.querySelector('li#paymentMethod_klarna').classList.add('d-none');
            document.querySelector('button#rb_klarna_paynow').click();
          });
        } else if (document.querySelector('li#paymentMethod_klarna_account') !== null && document.querySelector('li#paymentMethod_klarna_account').length !== 0) {
          document.querySelector('#radio_klarna_account').addEventListener('click', function () {
            document.querySelector('li#paymentMethod_klarna_account').classList.remove('d-none');
            document.querySelector('li#paymentMethod_klarna').classList.remove('d-block');
            document.querySelector('li#paymentMethod_klarna').classList.add('d-none');
            document.querySelector('button#rb_klarna_account').click();
          });
        }

        document.querySelector('#radio_klarna').addEventListener('click', function () {
          if (document.querySelector('li#paymentMethod_klarna_paynow.selected') !== null || document.querySelector('li#paymentMethod_klarna_account.selected') !== null || document.querySelector('li#paymentMethod_klarna.selected') !== null) {
            var type = 'klarna';
            store.selectedMethod = document.querySelector('#component_'.concat(type, ' .type')) ? document.querySelector('#component_'.concat(type, '.type')).value : type;
            return false;
          }

          if (document.querySelector('li#paymentMethod_klarna_paynow') !== null && document.querySelector('li#paymentMethod_klarna_paynow').length !== 0) {
            document.querySelector('li#paymentMethod_klarna_paynow').classList.add('d-none');
          } else {
            document.querySelector('li#paymentMethod_klarna_account').classList.add('d-none');
          }

          document.querySelector('li#paymentMethod_klarna').classList.remove('d-none');
          document.querySelector('li#paymentMethod_klarna').classList.add('d-block');
          document.querySelector('button#rb_klarna').click();
        });
      }
    }
  } else if (type === 'ideal') {
    var _submitBtn = document.querySelector('.submit-payment');

    var _idealSubmitBtnName = _submitBtn.dataset.idealbtntext;
    _submitBtn.innerText = _idealSubmitBtnName;

    if (!document.querySelector('.adyen-checkout__dropdown__element--active')) {
      _submitBtn.disabled = true;
    } else {
      _submitBtn.disabled = false;
    }
  } else {
    if (type === 'scheme') {
      document.querySelector('.billing-address-block').classList.remove('d-none');

      if (document.querySelector('.redeem-gift-card')) {
        document.querySelector('.redeem-gift-card').classList.remove('d-none');
        document.querySelector('.redeem-gift-card').setAttribute('style', 'display:block');
      }

      if (document.querySelector('.payment-gift-card')) {
        document.querySelector('.payment-gift-card').setAttribute('style', 'display:block');
      }

      if (document.querySelector('.pay-with-paypal')) {
        document.querySelector('.pay-with-paypal').classList.add('d-none');
      }
    } else if (type === 'paypal') {
      document.querySelector('.billing-address-block').classList.remove('d-none');
    }

    document.querySelector('#adyen-component-form-field-filled').setAttribute('value', 'false');
    var adyenComponentFormFieldsfilled = $('#adyen-component-form-field-filled').val();
    var adyenFormIsEntered = $('#adyen-component-form-field-filled').hasClass('entered');

    if (adyenComponentFormFieldsfilled === 'true' || adyenFormIsEntered === true) {
      $('form#dwfrm_billing').closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', false);
      $('.paymentBlockContainer #component_scheme .adyen-checkout__card-input .adyen-checkout__loading-input__form .adyen-checkout__card__holderName .adyen-checkout__label .adyen-checkout__input-wrapper :input ').val($('#adyenCard-holderName').val());
    } else {
      $('.paymentBlockContainer #component_scheme .adyen-checkout__card-input .adyen-checkout__loading-input__form .adyen-checkout__card__holderName .adyen-checkout__label .adyen-checkout__input-wrapper :input ').val('');
      $('form#dwfrm_billing').closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', 'disabled');
    }

    if (document.querySelector('.apple-pay-content')) {
      document.querySelector('.apple-pay-content').classList.add('d-none');
      document.querySelector('.applepay-submit-payment').classList.add('d-none');
    }

    if (type === 'paypal') {
      document.querySelector('.billing-address-block').classList.remove('d-none');

      if (document.querySelector('.redeem-gift-card')) {
        document.querySelector('.redeem-gift-card').setAttribute('style', 'display:none');
        document.querySelector('.payment-gift-card').setAttribute('style', 'display:none');
      }
    }

    var _submitBtnName = document.querySelector('.submit-payment').dataset.btntext;
    document.querySelector('.submit-payment').innerText = _submitBtnName;
    document.querySelector('.submit-payment').classList.remove('d-none');
  }
}

module.exports = {
  resetPaymentMethod: resetPaymentMethod,
  displaySelectedMethod: displaySelectedMethod
};

/***/ }),

/***/ "./app_foundation_sfra/cartridge/client/default/js/adyen_checkout/renderGenericComponent.js":
/*!**************************************************************************************************!*\
  !*** ./app_foundation_sfra/cartridge/client/default/js/adyen_checkout/renderGenericComponent.js ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */


var baseRenderGenericComponent = __webpack_require__(/*! adyen/adyen_checkout/renderGenericComponent */ "./int_adyen_SFRA/cartridge/client/default/js/adyen_checkout/renderGenericComponent.js");

var _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this;
    var args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err);
      }

      _next(undefined);
    });
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);

    if (enumerableOnly) {
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }

    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _nonIterableRest() {
  throw new TypeError('Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.');
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) {
    return;
  }

  if (typeof o === 'string') {
    return _arrayLikeToArray(o, minLen);
  }

  var n = Object.prototype.toString.call(o).slice(8, -1);

  if (n === 'Object' && o.constructor) {
    n = o.constructor.name;
  }

  if (n === 'Map' || n === 'Set') {
    return Array.from(o);
  }

  if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {
    return _arrayLikeToArray(o, minLen);
  }
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) {
    len = arr.length;
  }

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === 'undefined' || !(Symbol.iterator in Object(arr))) {
    return;
  }

  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) {
        break;
      }
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i['return'] != null) {
        _i['return']();
      }
    } finally {
      if (_d) {
        throw _e;
      }
    }
  }

  return _arr;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) {
    return arr;
  }
}

var store = __webpack_require__(/*! adyenCartridge/store/index */ "./int_adyen_SFRA/cartridge/store/index.js");

var _require = __webpack_require__(/*! ./renderPaymentMethod */ "./app_foundation_sfra/cartridge/client/default/js/adyen_checkout/renderPaymentMethod.js");

var renderPaymentMethod = _require.renderPaymentMethod;

var helpers = __webpack_require__(/*! ./helpers */ "./app_foundation_sfra/cartridge/client/default/js/adyen_checkout/helpers.js");

function addPosTerminals(terminals) {
  var ddTerminals = document.createElement('select');
  ddTerminals.id = 'terminalList';
  Object.keys(terminals).forEach(function (t) {
    var option = document.createElement('option');
    option.value = terminals[t];
    option.text = terminals[t];
    ddTerminals.appendChild(option);
  });
  document.querySelector('#adyenPosTerminals').append(ddTerminals);
}
/**
 * Makes an ajax call to the controller function GetPaymentMethods
 */


function getPaymentMethods(paymentMethods) {
  $.ajax({
    url: window.getPaymentMethodsURL,
    type: 'get',
    success: function success(data) {
      paymentMethods(data);
    }
  });
}

function resolveUnmount(key, val) {
  try {
    return Promise.resolve(val.node.unmount('component_'.concat(key)));
  } catch (e) {
    // try/catch block for val.unmount
    return Promise.resolve(false);
  }
}
/**
 * To avoid re-rendering components twice, unmounts existing components from payment methods list
 */


function unmountComponents() {
  var promises = Object.entries(store.componentsObj).map(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2);

    var key = _ref2[0];
    var val = _ref2[1];
    delete store.componentsObj[key];
    return resolveUnmount(key, val);
  });
  return Promise.all(promises);
}

function renderStoredPaymentMethod(data) {
  return function (pm) {
    if (pm.supportedShopperInteractions.includes('Ecommerce')) {
      renderPaymentMethod(pm, true, data.ImagePath);
    }
  };
}

function renderStoredPaymentMethods(data) {
  if (data.AdyenPaymentMethods.storedPaymentMethods) {
    var storedPaymentMethods = store.checkout.paymentMethodsResponse.storedPaymentMethods;
    storedPaymentMethods.forEach(renderStoredPaymentMethod(data));
  }
}

function renderKlarnaPaymentMethods(data) {
  data.AdyenPaymentMethods.paymentMethods.forEach(function (pm, i) {
    if (pm.type === 'klarna' || pm.type === 'klarna_account' || pm.type === 'klarna_paynow') {
      renderPaymentMethod(pm, false, data.ImagePath, data.AdyenDescriptions[i].description);
      var arrow = document.querySelector('.paymentMethod.klarna:not(.d-none) button[name=brandCode] .accordion-arrow');
      arrow.classList.add('d-none');
    }
  });
}

function renderPaymentMethods(data) {
  var appleDevice = window.dw.applepay && window.ApplePaySession && window.ApplePaySession.canMakePayments() && typeof fetch === 'function';
  var showApplePayPayment = document.querySelector('.show-applepay-paymentoption');
  var cartHasGiftCard = $('input[name="card-has-giftcard"]').attr('value'); // Render filtered adyen payment methods - render only

  data.AdyenPaymentMethods.paymentMethods.forEach(function (pm, i) {
    if (!(cartHasGiftCard == 'true' && (pm.type === 'klarna' || pm.type === 'klarna_account' || pm.type === 'klarna_paynow'))) {
      if (pm.type === 'scheme' || pm.type === 'klarna' || pm.type === 'klarna_account' || pm.type === 'klarna_paynow') {
        renderPaymentMethod(pm, false, data.ImagePath, data.AdyenDescriptions[i].description);
      } else if ((pm.type !== 'applepay' || pm.type === 'applepay' && appleDevice && showApplePayPayment) && pm.type !== 'bcmc') {
        renderPaymentMethod(pm, false, data.ImagePath, data.AdyenDescriptions[i].description);
      }
    }
  });
}

function renderPosTerminals(data) {
  var _data$AdyenConnectedT, _data$AdyenConnectedT2;

  var removeChilds = function removeChilds() {
    var posTerminals = document.querySelector('#adyenPosTerminals');

    while (posTerminals.firstChild) {
      posTerminals.removeChild(posTerminals.firstChild);
    }
  };

  if ((_data$AdyenConnectedT = data.AdyenConnectedTerminals) !== null && _data$AdyenConnectedT !== void 0 && (_data$AdyenConnectedT2 = _data$AdyenConnectedT.uniqueTerminalIds) !== null && _data$AdyenConnectedT2 !== void 0 && _data$AdyenConnectedT2.length) {
    removeChilds();
    addPosTerminals(data.AdyenConnectedTerminals.uniqueTerminalIds);
  }
}

function setCheckoutConfiguration(data) {
  var setField = function setField(key, val) {
    return val && _defineProperty({}, key, val);
  };

  store.checkoutConfiguration = _objectSpread(_objectSpread(_objectSpread({}, store.checkoutConfiguration), setField('amount', data.amount)), setField('countryCode', data.countryCode));
}

function setAmazonPayConfig(adyenPaymentMethods) {
  var amazonpay = adyenPaymentMethods.paymentMethods.find(function (paymentMethod) {
    return paymentMethod.type === 'amazonpay';
  });

  if (amazonpay) {
    var _document$querySelect, _document$querySelect2, _document$querySelect3, _document$querySelect4, _document$querySelect5, _document$querySelect6, _document$querySelect7, _document$querySelect8, _document$querySelect9;

    store.checkoutConfiguration.paymentMethodsConfiguration.amazonpay.configuration = amazonpay.configuration; // eslint-disable-line max-len

    store.checkoutConfiguration.paymentMethodsConfiguration.amazonpay.addressDetails = {
      name: ''.concat((_document$querySelect = document.querySelector('#shippingFirstNamedefault')) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.value, ' ').concat((_document$querySelect2 = document.querySelector('#shippingLastNamedefault')) === null || _document$querySelect2 === void 0 ? void 0 : _document$querySelect2.value),
      addressLine1: (_document$querySelect3 = document.querySelector('#shippingAddressOnedefault')) === null || _document$querySelect3 === void 0 ? void 0 : _document$querySelect3.value,
      addressLine2: (_document$querySelect4 = document.querySelector('#shippingAddressTwodefault')) === null || _document$querySelect4 === void 0 ? void 0 : _document$querySelect4.value,
      city: (_document$querySelect5 = document.querySelector('#shippingAddressCitydefault')) === null || _document$querySelect5 === void 0 ? void 0 : _document$querySelect5.value,
      stateOrRegion: (_document$querySelect6 = document.querySelector('#shippingStatedefault')) === null || _document$querySelect6 === void 0 ? void 0 : _document$querySelect6.value,
      postalCode: (_document$querySelect7 = document.querySelector('#shippingZipCodedefault')) === null || _document$querySelect7 === void 0 ? void 0 : _document$querySelect7.value,
      countryCode: (_document$querySelect8 = document.querySelector('#shippingCountrydefault')) === null || _document$querySelect8 === void 0 ? void 0 : _document$querySelect8.value,
      phoneNumber: (_document$querySelect9 = document.querySelector('#shippingPhoneNumberdefault')) === null || _document$querySelect9 === void 0 ? void 0 : _document$querySelect9.value
    };
  }
}
/**
 * Calls getPaymenMethods and then renders the retrieved payment methods (including card component)
 */


baseRenderGenericComponent.renderGenericComponent = /* #__PURE__*/function () {
  var _renderGenericComponent = _asyncToGenerator( /* #__PURE__*/_regenerator['default'].mark(function _callee() {
    return _regenerator['default'].wrap(function _callee$(_context) {
      while (1) {
        // eslint-disable-next-line default-case
        switch (_context.prev = _context.next) {
          case 0:
            if (!(Object.keys(store.componentsObj).length !== 0)) {
              _context.next = 3;
              break;
            }

            _context.next = 3;
            return unmountComponents();

          case 3:
            getPaymentMethods(function (data) {
              store.checkoutConfiguration.paymentMethodsResponse = data.AdyenPaymentMethods;
              setCheckoutConfiguration(data);
              setAmazonPayConfig(data.AdyenPaymentMethods);
              store.checkout = new AdyenCheckout(store.checkoutConfiguration);
              document.querySelector('#paymentMethodsList').innerHTML = '';
              var isFromKlarna = document.getElementById('isFromKlarna') && document.getElementById('isFromKlarna').value === 'true' ? true : false;

              if (!isFromKlarna || !data.klarnaPayMethodAvailable) {
                renderPaymentMethods(data);
                renderStoredPaymentMethods(data);
                renderPosTerminals(data);
                var firstPaymentMethod = document.querySelector('button[id=rb_scheme]');
                firstPaymentMethod.classList.add('selected');
                firstPaymentMethod.parentElement.classList.add('selected');
                helpers.displaySelectedMethod(firstPaymentMethod.getAttribute('value'));
              } else {
                renderKlarnaPaymentMethods(data);
                var klarnaPaymentMethod = document.querySelector('.paymentMethod.klarna:not(.d-none) button[name=brandCode]');

                if (klarnaPaymentMethod) {
                  klarnaPaymentMethod.classList.add('selected');
                  helpers.displaySelectedMethod(klarnaPaymentMethod.getAttribute('value'));
                  klarnaPaymentMethod.click();
                  $(window).on('load', function () {
                    klarnaPaymentMethod.click();
                  });
                }
              }
            });

          case 4:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee);
  }));

  function renderGenericComponent() {
    return _renderGenericComponent.apply(this, arguments);
  }

  return renderGenericComponent;
}();

module.exports = baseRenderGenericComponent;

/***/ }),

/***/ "./app_foundation_sfra/cartridge/client/default/js/adyen_checkout/renderPaymentMethod.js":
/*!***********************************************************************************************!*\
  !*** ./app_foundation_sfra/cartridge/client/default/js/adyen_checkout/renderPaymentMethod.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* eslint-disable */
var baseRenderPaymentMethod = __webpack_require__(/*! adyen/adyen_checkout/renderPaymentMethod */ "./int_adyen_SFRA/cartridge/client/default/js/adyen_checkout/renderPaymentMethod.js");

var _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));

var customerUtil = __webpack_require__(/*! ../customerUtil */ "./app_foundation_sfra/cartridge/client/default/js/customerUtil.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this;
    var args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err);
      }

      _next(undefined);
    });
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);

    if (enumerableOnly) {
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }

    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var store = __webpack_require__(/*! adyenCartridge/store/index */ "./int_adyen_SFRA/cartridge/store/index.js");

var helpers = __webpack_require__(/*! ./helpers */ "./app_foundation_sfra/cartridge/client/default/js/adyen_checkout/helpers.js");

var _require = __webpack_require__(/*! adyen/adyen_checkout/qrCodeMethods */ "./int_adyen_SFRA/cartridge/client/default/js/adyen_checkout/qrCodeMethods.js");

var qrCodeMethods = _require.qrCodeMethods;

function getFallback(paymentMethod) {
  var fallback = {
    giftcard: '\n        <input type="hidden" class="brand" name="brand" value="'.concat(paymentMethod.brand, '"/>\n        <input type="hidden" class="type" name="type" value="').concat(paymentMethod.type, '"/>')
  };

  if (fallback[paymentMethod.type]) {
    store.componentsObj[paymentMethod.type] = {};
  }

  return fallback[paymentMethod.type];
}

function getPersonalDetails() {
  var _document$querySelect, _document$querySelect2, _document$querySelect3, _document$querySelect4, _document$querySelect5, _document$querySelect6, _document$querySelect7, _document$querySelect8, _document$querySelect9, _document$querySelect10, _document$querySelect11, _document$querySelect12, _document$querySelect13, _document$querySelect14, _document$querySelect15, _document$querySelect16;

  return {
    firstName: (_document$querySelect = document.querySelector('#shippingFirstNamedefault')) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.value,
    lastName: (_document$querySelect2 = document.querySelector('#shippingLastNamedefault')) === null || _document$querySelect2 === void 0 ? void 0 : _document$querySelect2.value,
    telephoneNumber: (_document$querySelect3 = document.querySelector('#shippingPhoneNumberdefault')) === null || _document$querySelect3 === void 0 ? void 0 : _document$querySelect3.value,
    shopperEmail: (_document$querySelect4 = document.querySelector('.customer-summary-email')) === null || _document$querySelect4 === void 0 ? void 0 : _document$querySelect4.textContent,
    billingAddress: {
      city: (_document$querySelect5 = document.querySelector('#billingAddressCity')) === null || _document$querySelect5 === void 0 ? void 0 : _document$querySelect5.value,
      postalCode: (_document$querySelect6 = document.querySelector('#billingZipCode')) === null || _document$querySelect6 === void 0 ? void 0 : _document$querySelect6.value,
      country: (_document$querySelect7 = document.querySelector('#billingCountry')) === null || _document$querySelect7 === void 0 ? void 0 : _document$querySelect7.value,
      stateOrProvince: (_document$querySelect8 = document.querySelector('#billingState')) === null || _document$querySelect8 === void 0 ? void 0 : _document$querySelect8.value,
      street: (_document$querySelect9 = document.querySelector('#billingAddressOne')) === null || _document$querySelect9 === void 0 ? void 0 : _document$querySelect9.value,
      houseNumberOrName: (_document$querySelect10 = document.querySelector('#billingAddressTwo')) === null || _document$querySelect10 === void 0 ? void 0 : _document$querySelect10.value
    },
    deliveryAddress: {
      city: (_document$querySelect11 = document.querySelector('#shippingAddressCitydefault')) === null || _document$querySelect11 === void 0 ? void 0 : _document$querySelect11.value,
      postalCode: (_document$querySelect12 = document.querySelector('#shippingZipCodedefault')) === null || _document$querySelect12 === void 0 ? void 0 : _document$querySelect12.value,
      country: (_document$querySelect13 = document.querySelector('#shippingCountrydefault')) === null || _document$querySelect13 === void 0 ? void 0 : _document$querySelect13.value,
      stateOrProvince: (_document$querySelect14 = document.querySelector('#shippingStatedefault')) === null || _document$querySelect14 === void 0 ? void 0 : _document$querySelect14.value,
      street: (_document$querySelect15 = document.querySelector('#shippingAddressOnedefault')) === null || _document$querySelect15 === void 0 ? void 0 : _document$querySelect15.value,
      houseNumberOrName: (_document$querySelect16 = document.querySelector('#shippingAddressTwodefault')) === null || _document$querySelect16 === void 0 ? void 0 : _document$querySelect16.value
    }
  };
}

function setNode(paymentMethodID) {
  var createNode = function createNode() {
    if (!store.componentsObj[paymentMethodID]) {
      store.componentsObj[paymentMethodID] = {};
    }

    try {
      var _store$checkout;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      } // ALl nodes created for the checkout component are enriched with shopper personal details


      var node = (_store$checkout = store.checkout).create.apply(_store$checkout, args.concat([{
        data: _objectSpread(_objectSpread({}, getPersonalDetails()), {}, {
          personalDetails: getPersonalDetails()
        })
      }]));

      store.componentsObj[paymentMethodID].node = node;
    } catch (e) {
      /* No component for payment method */
    }
  };

  return createNode;
}

function getPaymentMethodID(isStored, paymentMethod) {
  if (isStored) {
    return 'storedCard'.concat(paymentMethod.id);
  }

  if (paymentMethod.brand) {
    // gift cards all share the same type. Brand is used to differentiate between them
    return ''.concat(paymentMethod.type, '_').concat(paymentMethod.brand);
  }

  return paymentMethod.type;
}

function getImage(isStored, paymentMethod) {
  return isStored ? paymentMethod.brand : paymentMethod.type;
}

function getLabel(isStored, paymentMethod) {
  var label = isStored ? ' '.concat(store.MASKED_CC_PREFIX).concat(paymentMethod.lastFour) : '';
  var paymentMethodName = paymentMethod.name;
  var paymentType = paymentMethod.type;

  if (paymentType === 'scheme') {
    paymentType = 'creditcard';
  } else if (paymentType === 'klarna_account' || paymentType === 'klarna' || paymentType === 'klarna_paynow') {
    paymentType = 'klarna';
  } else if (paymentType === 'afterpaytouch') {
    paymentType = 'afterpay';
  }

  var paymentRef = '.' + paymentType + '-payment-label';

  if ($(paymentRef).length) {
    paymentMethodName = $(paymentRef)[0].innerHTML;
  }

  return ''.concat(paymentMethodName).concat(label);
}

function handleFallbackPayment(_ref) {
  var paymentMethod = _ref.paymentMethod;
  var container = _ref.container;
  var paymentMethodID = _ref.paymentMethodID;
  var fallback = getFallback(paymentMethod);

  var createTemplate = function createTemplate() {
    var template = document.createElement('template');
    template.innerHTML = fallback;
    container.append(template.content);
  };

  return fallback ? createTemplate() : setNode(paymentMethod.type)(paymentMethodID);
}

function handlePayment(options) {
  return options.isStored ? setNode(options.paymentMethodID)('card', options.paymentMethod) : handleFallbackPayment(options);
}

function getListContents(_ref2) {
  var imagePath = _ref2.imagePath;
  var isStored = _ref2.isStored;
  var paymentMethod = _ref2.paymentMethod;
  var description = _ref2.description;
  var paymentMethodID = getPaymentMethodID(isStored, paymentMethod);
  var label = getLabel(isStored, paymentMethod);
  var liContents = '';

  if (paymentMethodID === 'scheme') {
    var visaImagePath = imagePath.replace("card.png", "sfra_visa.svg");
    var masterImagePath = imagePath.replace("card.png", "mastercard.svg");
    var amexImagePath = imagePath.replace("card.png", "amex.svg");
    var discoverImagePath = imagePath.replace("card.png", "discover.svg");
    var carteBancaireImagePath = imagePath.replace("card.png", "cartebancaire.svg");
    var bancontactImagePath = imagePath.replace("card.png", "bancontact.svg");
    var currentSite = $('#checkout-main').data('localeid');
    var showDiscover = document.querySelector('#showDiscover').getAttribute('value');
    var showCarteBancaire = document.querySelector('#showCarteBancaire').getAttribute('value');
    var showBancontact = document.querySelector('#showBancontact').getAttribute('value'); // Read card type icons from content asset if configured

    if ($('.paymentmethod-icons').length && $('.paymentmethod-icons img').length) {
      if ($('.paymentmethod-icons img.visacard-icon').length) {
        visaImagePath = $('.paymentmethod-icons img.visacard-icon').attr('src');
      }

      if ($('.paymentmethod-icons img.mastercard-icon').length) {
        masterImagePath = $('.paymentmethod-icons img.mastercard-icon').attr('src');
      }

      if ($('.paymentmethod-icons img.amexcard-icon').length) {
        amexImagePath = $('.paymentmethod-icons img.amexcard-icon').attr('src');
      }

      if ($('.paymentmethod-icons img.discovercard-icon').length) {
        discoverImagePath = $('.paymentmethod-icons img.discovercard-icon').attr('src');
      }

      if ($('.paymentmethod-icons img.cartebancairecard-icon').length) {
        carteBancaireImagePath = $('.paymentmethod-icons img.cartebancairecard-icon').attr('src');
      }

      if ($('.paymentmethod-icons img.bancontact-icon').length) {
        bancontactImagePath = $('.paymentmethod-icons img.bancontact-icon').attr('src');
      }
    } // Push applicable payment images into array


    var availablePayments = [];

    if (showCarteBancaire === 'true') {
      availablePayments.push(carteBancaireImagePath);
    }

    availablePayments.push(masterImagePath);
    availablePayments.push(amexImagePath);

    if (showBancontact === 'true') {
      availablePayments.push(bancontactImagePath);
    }

    availablePayments.push(visaImagePath);

    if (showDiscover && showDiscover === 'true') {
      availablePayments.push(discoverImagePath);
    } // li content to show applicable payment images


    var liContents = "\n    <input type=\"hidden\" name=\"brandCode\" id=\"rb_" + paymentMethodID + "\" value=\"" + paymentMethodID + "\"> <button name=\"brandCode\" value=\"".concat(paymentMethodID, "\" id=\"rb_").concat(paymentMethodID, "\">\n <div class=\"img-section\"> <div class=\"images-only\"> <img class=\"imgCard\" src=\"");

    for (var i = 0; i < availablePayments.length; i++) {
      var imagePath = availablePayments[i];

      if (i === availablePayments.length - 1) {
        liContents = liContents.concat(imagePath, "\" ></img></div><svg class=\"svg-symbol accordion-arrow\"><use xlink:href=\"#accordion-arrow\"></use></svg></div>\n <label id=\"lb_");
      } else {
        liContents = liContents.concat(imagePath, "\" ></img>\n   <img class=\"imgCard\" src=\"");
      }
    }

    liContents = liContents.concat(paymentMethodID, "\" for=\"rb_").concat(paymentMethodID, "\">").concat(label, "</label>\n  ");
  } else {
    if (paymentMethodID === 'applepay') {
      imagePath = imagePath.replace(paymentMethodID + ".png", "applepay_logo.svg");
    } else if (paymentMethodID === 'paypal') {
      imagePath = imagePath.replace(paymentMethodID + ".png", "paypal.svg");
    } else if (paymentMethodID === 'klarna' || paymentMethodID === 'klarna_account' || paymentMethodID === 'klarna_paynow') {
      imagePath = imagePath.replace(paymentMethodID + ".png", "klarna.svg");
    } else if (paymentMethodID === 'ideal') {
      imagePath = imagePath.replace(paymentMethodID + ".png", "ideal.svg");
    } else if (paymentMethodID === 'afterpaytouch') {
      imagePath = imagePath.replace(paymentMethodID + ".png", "afterpaytouch.svg");
    } else if (paymentMethodID === 'amazonpay') {
      imagePath = imagePath.replace(paymentMethodID + ".png", "amazonpay.svg");
    } // Render image from content asset if configured


    var paymentType = paymentMethodID;

    if (paymentType === 'klarna_account' || paymentType === 'klarna' || paymentType === 'klarna_paynow') {
      paymentType = 'klarna';
    } else if (paymentType === 'afterpaytouch') {
      paymentType = 'afterpay';
    }

    var paymentIconRef = '.paymentmethod-icons img.' + paymentType + '-icon';

    if ($('.paymentmethod-icons').length && $(paymentIconRef).length) {
      imagePath = $(paymentIconRef).attr('src');
    }

    if (paymentMethodID === 'afterpaytouch' || paymentMethodID === 'klarna_account' && $('#checkout-main').data('localeid') === 'US') {
      var payInText = $('.payment-section').data('payintext');
      liContents = "\n    <input type=\"hidden\" name=\"brandCode\" id=\"rb_" + paymentMethodID + "\" value=\"" + paymentMethodID + "\"> <button name=\"brandCode\" value=\"".concat(paymentMethodID, "\" id=\"rb_").concat(paymentMethodID, "\">\n  <div class=\"img-section " + paymentMethodID + "\">  <img class=\"imgCard paymentMethod_img\" src=\"").concat(imagePath, "\" ></img><div class=\"payinfour-text d-sm-none\">" + payInText + "</div><svg class=\"svg-symbol accordion-arrow\"><use xlink:href=\"#accordion-arrow\"></use></svg></div>\n    <label id=\"lb_").concat(paymentMethodID, "\" for=\"rb_").concat(paymentMethodID, "\">").concat(label, "</label>\n  ");
    } else {
      liContents = "\n    <input type=\"hidden\" name=\"brandCode\" id=\"rb_" + paymentMethodID + "\" value=\"" + paymentMethodID + "\"> <button name=\"brandCode\" value=\"".concat(paymentMethodID, "\" id=\"rb_").concat(paymentMethodID, "\">\n  <div class=\"img-section " + paymentMethodID + "\">  <img class=\"imgCard paymentMethod_img\" src=\"").concat(imagePath, "\" ></img><svg class=\"svg-symbol accordion-arrow\"><use xlink:href=\"#accordion-arrow\"></use></svg></div>\n    <label id=\"lb_").concat(paymentMethodID, "\" for=\"rb_").concat(paymentMethodID, "\">").concat(label, "</label>\n  ");
    }
  }

  return description && paymentMethodID !== 'ideal' ? ''.concat(liContents, '<p>').concat(description, '</p>') : liContents;
}

function getImagePath(_ref3) {
  var isStored = _ref3.isStored;
  var paymentMethod = _ref3.paymentMethod;
  var path = $('#checkout-main').data('static-imagepath');
  var isSchemeNotStored = _ref3.isSchemeNotStored;
  var paymentMethodImage = ''.concat(path).concat(getImage(isStored, paymentMethod), '.png');
  var cardImage = ''.concat(path, 'card.png');
  return isSchemeNotStored ? cardImage : paymentMethodImage;
}

function hasNoChildNodes(_ref4) {
  var paymentMethodID = _ref4.paymentMethodID;
  var container = _ref4.container;
  return store.componentsObj[paymentMethodID] && !container.childNodes[0];
}

function setValid(_ref5) {
  var paymentMethodID = _ref5.paymentMethodID;
  var container = _ref5.container;

  if (hasNoChildNodes({
    paymentMethodID: paymentMethodID,
    container: container
  }) && ['bcmc', 'scheme'].indexOf(paymentMethodID) === -1) {
    store.componentsObj[paymentMethodID].isValid = true;
  }
}

function configureContainer(_ref6) {
  var paymentMethodID = _ref6.paymentMethodID;
  var container = _ref6.container;
  container.classList.add('additionalFields');
  container.setAttribute('id', 'component_'.concat(paymentMethodID));
  container.setAttribute('style', 'display:none');
}

function handleInput(_ref7) {
  var paymentMethodID = _ref7.paymentMethodID;
  var button = document.querySelector('button#rb_'.concat(paymentMethodID));

  button.onclick = /* #__PURE__*/function () {
    var _ref8 = _asyncToGenerator( /* #__PURE__*/_regenerator['default'].mark(function _callee(event) {
      event.preventDefault();

      var _store$componentsObj$, compName, qrComponent, node;

      var selectedPaymentMethod = document.querySelector('button[name=brandCode].selected');

      if (selectedPaymentMethod) {
        selectedPaymentMethod.classList.remove('selected');
        selectedPaymentMethod.parentElement.classList.remove('selected');
      }

      var submitButton = $('.submit-payment');
      var newSelect = button.id.substring(3).toLowerCase().replace('_', '-');
      submitButton.html(submitButton.data('msg-' + newSelect));

      if (document.querySelector('#saved_cards') !== null) {
        var cardId = $('#saved_cards').find('option:selected').val();

        if (cardId !== 'SelectFromSavedCards') {
          document.querySelector('button[id=' + cardId + ']').classList.remove('selected');
          document.querySelector('button[id=' + cardId + ']').parentElement.classList.remove('selected');

          if ($('.paymentBlockContainer').hasClass("myStoredCard")) {
            document.querySelector('.myStoredCard .selectedContainer').classList.remove('selectedContainer');
            document.querySelector('.myStoredCard').classList.remove('myStoredCard');
          }
        }
      }

      button.classList.add('selected');
      button.parentElement.classList.add('selected');
      var storedPaymentDiv = document.querySelector('#saved_cards');
      document.querySelector('.new-card').classList.add('d-none');
      document.querySelector('.enter-cvv').classList.add('d-none');
      var authenticated = document.querySelector('#userAuthenticated').getAttribute('value');

      if (button.id !== "rb_scheme") {
        if (document.querySelector('button[id=rb_scheme]')) {
          document.querySelector('button[id=rb_scheme]').classList.remove('selected');
          document.querySelector('button[id=rb_scheme]').parentElement.classList.remove('selected');
        }

        if (!authenticated) {
          document.querySelector('#storedPayment').classList.add('d-none');
        }

        if (storedPaymentDiv) {
          storedPaymentDiv.classList.add('d-none');
        }
      } else {
        $("#saved_cards").val($("#saved_cards option:first").val());
        var length = $('#saved_cards > option').length;

        if (length === 1) {
          if (!$('#saved_cards').hasClass('d-none')) {
            document.querySelector('#storedPayment').classList.add('d-none');
            storedPaymentDiv.classList.add('d-none');
          }
        } else {
          if (authenticated === "true") {
            document.querySelector('#storedPayment').classList.remove('d-none');
            storedPaymentDiv.classList.remove('d-none');
          }
        }
      }

      return _regenerator['default'].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(document.querySelector('.adyen-checkout__qr-loader') && qrCodeMethods.indexOf(store.selectedMethod) > -1)) {
                _context.next = 10;
                break;
              }

              compName = store.selectedMethod;
              qrComponent = store.componentsObj[compName];
              _context.next = 5;
              return Promise.resolve(qrComponent.node.unmount('component_'.concat(compName)));

            case 5:
              delete store.componentsObj[compName];
              setNode(compName)(compName);
              node = (_store$componentsObj$ = store.componentsObj[compName]) === null || _store$componentsObj$ === void 0 ? void 0 : _store$componentsObj$.node;

              if (node) {
                node.mount(document.querySelector('#component_'.concat(compName)));
              }

              helpers.paymentFromComponent({
                cancelTransaction: true,
                merchantReference: document.querySelector('#merchantReference').value
              });

            case 10:
              if (button.id == "rb_scheme") {
                helpers.displaySelectedMethod(document.querySelector('button[id=rb_scheme]').getAttribute('value'));
              } else if (button.id == "rb_ideal") {
                helpers.displaySelectedMethod(document.querySelector('button[id=rb_ideal]').getAttribute('value'));
              } else if (button.id == "rb_paypal") {
                helpers.displaySelectedMethod(document.querySelector('button[id=rb_paypal]').getAttribute('value'));
              } else if (button.id == "rb_klarna_account" || button.id == 'rb_klarna' || button.id == 'rb_klarna_paynow') {
                helpers.displaySelectedMethod(document.querySelector('button[id=' + button.id + ']').getAttribute('value'));
              } else if (button.id == "rb_applepay") {
                helpers.displaySelectedMethod(document.querySelector('button[id=rb_applepay]').getAttribute('value'));
              } else if (button.id == "rb_dotpay") {
                helpers.displaySelectedMethod(document.querySelector('button[id=rb_dotpay]').getAttribute('value'));
              } else if (button.id == "rb_afterpaytouch") {
                helpers.displaySelectedMethod(document.querySelector('button[id=rb_afterpaytouch]').getAttribute('value'));
              } else if (button.id == "rb_amazonpay") {
                helpers.displaySelectedMethod(document.querySelector('button[id=rb_amazonpay]').getAttribute('value'));
              } else {
                helpers.displaySelectedMethod(event.target.value);
              }

            case 11:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref8.apply(this, arguments);
    };
  }();

  var radioButton = document.querySelector('label#label_'.concat(paymentMethodID));

  document.querySelector('input[type="radio"] + label').onclick = function () {
    //  event.preventDefault();
    if (radioButton !== null && radioButton.length !== 0) {
      if (this.classList.contains('klarna_paynow')) {
        document.querySelector('button#rb_klarna_paynow').click();
      } else {
        document.querySelector('button#rb_klarna').click();
      }
    }
  }();
}

function insertAfter(newNode, existingNode) {
  existingNode.parentNode.insertBefore(newNode, existingNode.nextSibling);
}

baseRenderPaymentMethod.renderPaymentMethod = function renderPaymentMethod(paymentMethod, isStored, path) {
  var _store$componentsObj$2;

  var description = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  var paymentMethodsUI = document.querySelector('#paymentMethodsList');
  var li = document.createElement('li');
  var storedPaymentDiv = document.querySelector('#saved_cards');

  if (isStored && document.querySelectorAll('#saved_cards').length === 1) {
    storedPaymentDiv = document.createElement("select");
    storedPaymentDiv.id = "saved_cards";
    storedPaymentDiv.classList.add('form-control');
    storedPaymentDiv.classList.add('custom-select');
    storedPaymentDiv.classList.add('saved_cards');
    storedPaymentDiv.classList.add('d-none');
    storedPaymentDiv.setAttribute('name', 'savedCards');
    storedPaymentDiv.innerHTML = $('#saved_cards')[0].innerHTML;
    $('#storedPayment').append(storedPaymentDiv);
    customerUtil.selectSavedCard(); // triggers selectSavedCard event after dom insertion
  }

  var cvvContainer = document.querySelector('#cvv-card');

  if (document.querySelectorAll('#cvv-card').length === 1) {
    cvvContainer = $('#cvv-card').clone()[0];
  }

  var paymentDetailsDiv = document.createElement('div');
  var paymentMethodID = getPaymentMethodID(isStored, paymentMethod);
  var isSchemeNotStored = paymentMethod.type === 'scheme' && !isStored;
  var container = document.createElement('div');

  if (paymentMethod.type == 'scheme' && paymentMethod.brands) {
    paymentMethod.brands = paymentMethod.brands.reduce(function (filtered, option) {
      if (!(option == 'bcmc' && isGCApplied == 'true')) {
        filtered.push(option);
      }

      return filtered;
    }, []);
  }

  var options = {
    container: container,
    paymentMethod: paymentMethod,
    isStored: isStored,
    path: path,
    description: description,
    paymentMethodID: paymentMethodID,
    isSchemeNotStored: isSchemeNotStored
  };
  var imagePath = getImagePath(options);
  var liContents = getListContents(_objectSpread(_objectSpread({}, options), {}, {
    imagePath: imagePath
  }));
  li.innerHTML = liContents;
  paymentMethodsUI.classList.add('paymentMethodsList');
  li.classList.add('paymentMethod');

  if (paymentMethod.type === 'klarna_account' || paymentMethod.type === 'klarna' || paymentMethod.type === 'klarna_paynow') {
    li.classList.add('klarna');
  }

  var appliedGiftCard = document.querySelector('#appliedGiftCard').getAttribute('value');

  if (appliedGiftCard === 'true' && paymentMethod.type !== 'scheme') {
    li.classList.add('d-none');
  }

  if (paymentMethod.type === 'ideal') {
    li.classList.add('ideal');
  }

  li.setAttribute("id", "paymentMethod_".concat(paymentMethodID));
  paymentDetailsDiv.classList.add('paymentBlockContainer', "container_".concat(paymentMethodID));
  paymentDetailsDiv.setAttribute('id', "container_".concat(paymentMethodID));

  if (isStored) {
    paymentDetailsDiv.classList.add('savedcard', "container_".concat(paymentMethodID));
    li.classList.add('d-none');
    storedPaymentDiv.classList.remove('d-none');
    document.querySelector('#storedPayment').classList.remove('d-none');
    var currentYear = new Date().getFullYear();
    var currentMonth = new Date().getMonth();
    var isBcmc = paymentMethod.brand == 'bcmc' ? true : false;
    var isExpiredCard = currentYear > paymentMethod.expiryYear || currentYear === paymentMethod.expiryYear && currentMonth >= paymentMethod.expiryMonth;

    if (!$("#saved_cards option[value= " + "rb_" + paymentMethodID + "]").length > 0 && !isExpiredCard && !isBcmc) {
      var option = document.createElement('option');
      var optionValue = "rb_" + paymentMethodID;
      option.setAttribute("value", optionValue);
      option.setAttribute("holderName", paymentMethod.holderName);
      var paymentMethodType;

      switch (paymentMethod.brand) {
        case 'mc':
          paymentMethodType = 'Master';
          break;

        default:
          paymentMethodType = paymentMethod.brand;
      }

      paymentMethodType = paymentMethodType.charAt(0).toUpperCase() + paymentMethodType.slice(1);
      option.append(paymentMethodType + " " + "Ending in " + " " + paymentMethod.lastFour);
      storedPaymentDiv.append(option);
    }
  }

  handlePayment(options);
  configureContainer(options);
  paymentDetailsDiv.append(container);
  paymentMethodsUI.append(li);
  var schemePaymentMethod = document.querySelector("#paymentMethod_scheme");

  if (isStored && schemePaymentMethod) {
    if (storedPaymentDiv) {
      $(storedPaymentDiv).insertAfter($('button#rb_scheme'));
      insertAfter(cvvContainer, storedPaymentDiv);
    }

    schemePaymentMethod.append(paymentDetailsDiv);
    var newCard = document.querySelector('.new-card');

    if (document.querySelectorAll('.new-card').length === 1) {
      newCard = document.createElement('div');
      newCard.classList.add('new-card');
      newCard.classList.add('d-none');
      newCard.innerHTML = $('.new-card')[0].innerHTML;
    }

    if (newCard) {
      schemePaymentMethod.append(newCard);
      customerUtil.newCard(); // triggers newCard event after dom insertion
    }
  } else {
    li.append(paymentDetailsDiv);
  }

  if (document.querySelectorAll('li[id*="klarna"]').length > 1) {
    document.getElementById('paymentMethod_klarna').classList.add('d-none');
  }

  var node = (_store$componentsObj$2 = store.componentsObj[paymentMethodID]) === null || _store$componentsObj$2 === void 0 ? void 0 : _store$componentsObj$2.node;

  if (node) {
    node.mount(container);
  }

  if (paymentMethodID === 'giropay') {
    container.innerHTML = '';
  }

  if (paymentMethodID === 'paypal') {
    container.innerHTML = '';
  }

  handleInput(options);
  setValid(options);
};

module.exports = baseRenderPaymentMethod;

/***/ }),

/***/ "./app_foundation_sfra/cartridge/client/default/js/checkout.js":
/*!*********************************************************************!*\
  !*** ./app_foundation_sfra/cartridge/client/default/js/checkout.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var processInclude = __webpack_require__(/*! base/util */ "./app_storefront_base/cartridge/client/default/js/util.js");

var adyenCheckout = __webpack_require__(/*! ./adyenCheckout */ "./app_foundation_sfra/cartridge/client/default/js/adyenCheckout.js");

var checkout = __webpack_require__(/*! ./checkout/checkout */ "./app_foundation_sfra/cartridge/client/default/js/checkout/checkout.js");

var giftOption = __webpack_require__(/*! ./giftOptions */ "./app_foundation_sfra/cartridge/client/default/js/giftOptions.js");

var modalTab = __webpack_require__(/*! ./modalTabToggle */ "./app_foundation_sfra/cartridge/client/default/js/modalTabToggle.js");

$(document).ready(function () {
  // eslint-disable-line
  processInclude(checkout);
  var name = 'paymentError';
  var error = new RegExp('[?&]'.concat(encodeURIComponent(name), '=([^&]*)')).exec(window.location.search);
  var paymentStage = new RegExp('[?&]stage=payment([^&]*)').exec(window.location.search);
  var placeOrderStage = new RegExp('[?&]stage=placeOrder([^&]*)').exec(window.location.search);
  var shipMethod = new RegExp('[?&]stage=shippingMethod([^&]*)').exec(window.location.search);

  if (error || paymentStage || placeOrderStage || shipMethod) {
    if (error) {
      $('.error-message').show();
      $('.error-message-text').text(decodeURIComponent(error[1]));
    }

    adyenCheckout.methods.renderGenericComponent();
  }

  processInclude(modalTab);
  processInclude(giftOption);
  $('#selectedPaymentOption').val($('.payment-options .nav-item .active').parent().attr('data-method-id'));
  processInclude(__webpack_require__(/*! ./components/tooltip_sfra */ "./app_foundation_sfra/cartridge/client/default/js/components/tooltip_sfra.js"));
});
$('.payment-options .nav-link').click(function setAttr() {
  $('#selectedPaymentOption').val($(this).parent().attr('data-method-id'));
});
var completeHeaderHeight = $('header').outerHeight();

if (window.matchMedia('(max-width: 768px)').matches) {
  $(window).on('scroll', function () {
    $('.order-summary-detail').css('top', completeHeaderHeight);
  });
}

/***/ }),

/***/ "./app_foundation_sfra/cartridge/client/default/js/checkout/address.js":
/*!*****************************************************************************!*\
  !*** ./app_foundation_sfra/cartridge/client/default/js/checkout/address.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));

var base = __webpack_require__(/*! base/checkout/address */ "./app_storefront_base/cartridge/client/default/js/checkout/address.js");
/**
 * returns a formed <option /> element
 * @param {object} shipping - the shipping object (shipment model)
 * @param {boolean} selected - current shipping is selected (for PLI)
 * @param {order} order - the Order model
 * @param {object} [options] - options
 * @returns {object} - the jQuery / DOMElement
 */

/* eslint-disable complexity */


function optionValueForAddress(shipping, selected, order, options) {
  var safeOptions = options || {};
  var isBilling = safeOptions.type && safeOptions.type === 'billing';
  var className = safeOptions.className || '';
  var isSelected = selected;
  var isNew = !shipping;

  if (typeof shipping === 'string') {
    return $('<option class="' + className + '" disabled>' + shipping + '</option>');
  }

  var safeShipping = shipping || {};
  var shippingAddress = safeShipping.shippingAddress || {};

  if (isBilling && isNew && !order.billing.matchingAddressId) {
    shippingAddress = order.billing.billingAddress.address || {};
    isNew = false;
    isSelected = true;
    safeShipping.UUID = 'manual-entry';
  }

  var uuid = safeShipping.UUID ? safeShipping.UUID : 'new';
  var optionEl = $('<option class="' + className + '" />');
  optionEl.val(uuid);
  var title;

  if (isNew) {
    title = order.resources.addNewAddress;
  } else {
    title = [];

    if (shippingAddress.firstName) {
      title.push(shippingAddress.firstName);
    }

    if (shippingAddress.lastName) {
      title.push(shippingAddress.lastName);
    }

    if (shippingAddress.address1) {
      title.push(shippingAddress.address1);
    }

    if (shippingAddress.address2) {
      title.push(shippingAddress.address2);
    }

    if (shippingAddress.city) {
      if (shippingAddress.state) {
        title.push(shippingAddress.city + ',');
      } else {
        title.push(shippingAddress.city);
      }
    }

    if (shippingAddress.stateCode) {
      title.push(shippingAddress.stateCode);
    }

    if (shippingAddress.postalCode) {
      title.push(shippingAddress.postalCode);
    }

    if (!isBilling && safeShipping.selectedShippingMethod) {
      title.push('-');
      title.push(safeShipping.selectedShippingMethod.displayName);
    }

    if (title.length > 2) {
      title = title.join(' ');
    } else {
      title = order.resources.newAddress;
    }
  }

  optionEl.text(title);
  var keyMap = {
    'data-first-name': 'firstName',
    'data-last-name': 'lastName',
    'data-address1': 'address1',
    'data-address2': 'address2',
    'data-city': 'city',
    'data-state-code': 'stateCode',
    'data-postal-code': 'postalCode',
    'data-country-code': 'countryCode',
    'data-phone': 'phone',
    'data-experianvalidated': 'experianValidated'
  };
  $.each(keyMap, function (key) {
    var mappedKey = keyMap[key];
    var mappedValue = shippingAddress[mappedKey]; // In case of country code

    if (mappedValue && (0, _typeof2["default"])(mappedValue) === 'object') {
      mappedValue = mappedValue.value;
    }

    optionEl.attr(key, mappedValue || '');
  });
  var giftObj = {
    'data-is-gift': 'isGift',
    'data-gift-message': 'giftMessage'
  };
  $.each(giftObj, function (key) {
    var mappedKey = giftObj[key];
    var mappedValue = safeShipping[mappedKey];
    optionEl.attr(key, mappedValue || '');
  });

  if (isSelected) {
    optionEl.attr('selected', true);
  }

  return optionEl;
}
/**
 * returns address properties from a UI form
 * @param {Form} form - the Form element
 * @returns {object} - a JSON object with all values
 */


function getAddressFieldsFromUI(form) {
  var address = {
    firstName: $('input[name$=_firstName]', form).val(),
    lastName: $('input[name$=_lastName]', form).val(),
    address1: $('input[name$=_address1]', form).val(),
    address2: $('input[name$=_address2]', form).val(),
    city: $('input[name$=_city]', form).val(),
    postalCode: $('input[name$=_postalCode]', form).val(),
    stateCode: $('select[name$=_stateCode],input[name$=_stateCode]', form).val(),
    countryCode: $('select[name$=_country]', form).val(),
    phone: $('input[name$=_phone]', form).val(),
    experianValidated: $('input[name$=_experianValidated]', form).val()
  };
  return address;
}

base.methods.optionValueForAddress = optionValueForAddress;
base.methods.getAddressFieldsFromUI = getAddressFieldsFromUI;
module.exports = base;

/***/ }),

/***/ "./app_foundation_sfra/cartridge/client/default/js/checkout/billing.js":
/*!*****************************************************************************!*\
  !*** ./app_foundation_sfra/cartridge/client/default/js/checkout/billing.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var base = __webpack_require__(/*! base/checkout/billing */ "./app_storefront_base/cartridge/client/default/js/checkout/billing.js");

var customerUtil = __webpack_require__(/*! ../customerUtil */ "./app_foundation_sfra/cartridge/client/default/js/customerUtil.js");

var helpers = __webpack_require__(/*! ../adyen_checkout/helpers */ "./app_foundation_sfra/cartridge/client/default/js/adyen_checkout/helpers.js");

function hasData() {
  var _len = arguments.length;
  var args = new Array(_len);

  for (var _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return args.every(function (arg) {
    return Boolean(arg);
  });
}

function appendToPaymentSummary(html) {
  // update payment details
  var paymentSummary = document.querySelector('.payment-details');
  paymentSummary.innerHTML += html;
}

function appendMaskedCC(_ref) {
  var maskedCreditCardNumber = _ref.maskedCreditCardNumber;
  var innerHTML = '<div>'.concat(maskedCreditCardNumber, '</div>');
  return maskedCreditCardNumber && appendToPaymentSummary(innerHTML);
}

function appendIssuerName(_ref2) {
  var selectedIssuerName = _ref2.selectedIssuerName;
  var innerHTML = '<div><span>'.concat(selectedIssuerName, '</span></div>');
  return selectedIssuerName && appendToPaymentSummary(innerHTML);
}

function appendExpiration(_ref3, order) {
  var expirationMonth = _ref3.expirationMonth;
  var expirationYear = _ref3.expirationYear;
  var innerHTML = '<div><span>'.concat(order.resources.cardEnding, ' ').concat(expirationMonth, '/').concat(expirationYear, '</span></div>');
  return hasData(expirationMonth, expirationYear) && appendToPaymentSummary(innerHTML);
}

function appendPaymentMethod(_ref4) {
  var selectedAdyenPM = _ref4.selectedAdyenPM;
  var maskedCreditCardNumber = _ref4.maskedCreditCardNumber;
  var innerHTML = '<div><span>'.concat(selectedAdyenPM, '</span></div>'); // Must hide the GC when the selectedPaymentMethod is not scheme

  if (selectedAdyenPM && maskedCreditCardNumber === null) {
    $('.js--redeem-gift').addClass('d-none');
  } else {
    $('.js--redeem-gift').removeClass('d-none');
  }

  return selectedAdyenPM && appendToPaymentSummary(innerHTML);
}
/**
 * Updates the payment information in checkout, based on the supplied order model
 * @param {object} order - checkout model to use as basis of new truth
 */


function updatePaymentInformation(order) {
  var _order$billing$paymen; // eslint-disable-next-line no-void


  if ((_order$billing$paymen = order.billing.payment.selectedPaymentInstruments) !== null && _order$billing$paymen !== void 0 && _order$billing$paymen.length) {
    var selectedPaymentInstrument = order.billing.payment.selectedPaymentInstruments[0];
    document.querySelector('.payment-details').innerHTML = '';
    appendPaymentMethod(selectedPaymentInstrument);
    appendIssuerName(selectedPaymentInstrument);
    appendMaskedCC(selectedPaymentInstrument);
    appendExpiration(selectedPaymentInstrument, order);
  }
}
/**
 * Validate and update payment instrument form fields
 * @param {object} order - the order model
 */


function validateAndUpdateBillingPaymentInstrument(order) {
  var billing = order.billing;

  if (!billing.payment || !billing.payment.selectedPaymentInstruments || billing.payment.selectedPaymentInstruments.length <= 0) {
    return;
  }

  var form = $('form[name=dwfrm_billing]');

  if (!form) {
    return;
  }

  var instrument = billing.payment.selectedPaymentInstruments[0];
  $('select[name$=expirationMonth]', form).val(instrument.expirationMonth);
  $('select[name$=expirationYear]', form).val(instrument.expirationYear); // Force security code and card number clear

  $('input[name$=securityCode]', form).val('');

  if ($('input[name$=cardNumber]').length && $('input[name$=cardNumber]').data('cleave')) {
    $('input[name$=cardNumber]').data('cleave').setRawValue('');
  }
}
/**
 * Updates the billing address form values within payment forms without any payment instrument validation
 * @param {object} order - the order model
 */


function updateBillingAddress(order) {
  var billing = order.billing;

  if (!billing.billingAddress || !billing.billingAddress.address) {
    return;
  }

  var billingForm = $('form[name=dwfrm_billing]');
  var shippingform = $('.single-shipping .shipping-form');

  if (!billingForm || !shippingform) {
    return;
  }

  var checked = $('.js-same-as-shipping').is(':checked');

  if (checked) {
    $(billingForm).attr('data-address-mode', 'edit');
    var firstName = $('input[name$=_firstName]', shippingform).val();
    var lastName = $('input[name$=_lastName]', shippingform).val();
    var address1 = $('input[name$=_address1]', shippingform).val();
    var adrress2 = $('input[name$=_address2]', shippingform).val();
    var city = $('input[name$=_city]', shippingform).val();
    var postCode = $('input[name$=_postalCode]', shippingform).val();
    var stateCode = $('select[name$=_stateCode],input[name$=_stateCode]', shippingform).val();
    var country = $('select[name$=_country]', shippingform).val();
    $('input[name$=_firstName]', billingForm).val(firstName);
    $('input[name$=_lastName]', billingForm).val(lastName);
    $('input[name$=_address1]', billingForm).val(address1);
    $('input[name$=_address2]', billingForm).val(adrress2);
    $('input[name$=_city]', billingForm).val(city);
    $('input[name$=_postalCode]', billingForm).val(postCode);
    $('select[name$=_stateCode],input[name$=_stateCode]', billingForm).val(stateCode);
    $('select[name$=_country]', billingForm).val(country).trigger('change');
  } else {
    if ($('#checkout-main').data('vgc-only')) {
      $(billingForm).attr('data-address-mode', 'new');
    }

    $('input[name$=_firstName]', billingForm).val(billing.billingAddress.address.firstName);
    $('input[name$=_lastName]', billingForm).val(billing.billingAddress.address.lastName);
    $('input[name$=_address1]', billingForm).val(billing.billingAddress.address.address1);
    $('input[name$=_address2]', billingForm).val(billing.billingAddress.address.address2);
    $('input[name$=_city]', billingForm).val(billing.billingAddress.address.city);
    $('input[name$=_postalCode]', billingForm).val(billing.billingAddress.address.postalCode);
    $('select[name$=_stateCode],input[name$=_stateCode]', billingForm).val(billing.billingAddress.address.stateCode);
    $('select[name$=_country]', billingForm).val(billing.billingAddress.address.countryCode.value);
    $('input[name$=_phone]', billingForm).val(billing.billingAddress.address.phone);
    $('input[name$=_email]', billingForm).val(order.orderEmail);
  }
}
/**
 * Updates the billing address form values within payment forms
 * @param {object} order - the order model
 */


function updateBillingAddressFormValues(order) {
  module.exports.methods.updateBillingAddress(order);
  module.exports.methods.validateAndUpdateBillingPaymentInstrument(order);
}
/**
 * update billing address summary and contact information
 * @param {object} order - checkout model to use as basis of new truth
 */


function updateBillingAddressSummary(order) {
  // update billing address summary
  var addressHelpers = __webpack_require__(/*! ./address */ "./app_foundation_sfra/cartridge/client/default/js/checkout/address.js");

  addressHelpers.methods.populateAddressSummary('.billing .address-summary', order.billing.billingAddress.address); // update billing parts of order summary

  $('.order-summary-email').text(order.orderEmail);

  if (order.billing.billingAddress.address) {
    $('.billing-address-block .address-summary .order-summary-phone').text(order.billing.billingAddress.address.phone);
  }
}
/**
 * Updates the billing information in checkout, based on the supplied order model
 * @param {object} order - checkout model to use as basis of new truth
 * @param {object} customer - customer model to use as basis of new truth
 */


function updateBillingInformation(order, customer) {
  base.methods.updateBillingAddressSelector(order, customer); // update billing address form

  updateBillingAddressFormValues(order); // update billing address summary and billing parts of order summary

  updateBillingAddressSummary(order);
}

module.exports = {
  methods: {
    updateBillingAddressSelector: base.methods.updateBillingAddressSelector,
    updateBillingAddressFormValues: updateBillingAddressFormValues,
    clearBillingAddressFormValues: base.methods.clearBillingAddressFormValues,
    updateBillingInformation: updateBillingInformation,
    updatePaymentInformation: updatePaymentInformation,
    clearCreditCardForm: base.methods.clearCreditCardForm,
    updateBillingAddress: updateBillingAddress,
    validateAndUpdateBillingPaymentInstrument: validateAndUpdateBillingPaymentInstrument,
    updateBillingAddressSummary: updateBillingAddressSummary
  },
  addNewPaymentInstrument: base.addNewPaymentInstrument,
  showHideBillingAddress: function showHideBillingAddress() {
    $('.js-same-as-shipping').on('click', function () {
      var billingForm = $(this).parents('form')[0];
      var shippingform = $('.single-shipping .shipping-form');
      var checked = $(this).is(':checked');
      var idealPaymentMethod = document.querySelector('button[id=rb_ideal]');

      if (!checked) {
        var billPhone = $('.billing-address input.billingPhone').val();
        var billEmail = $('.billing-address input.js-billing-email').val();
        var billingCountry = $('select[name$=_country]', billingForm).val() || 'US';
        $(billingForm).attr('data-address-mode', 'new');
        base.methods.clearBillingAddressFormValues();
        $(billingForm).find('input.billingZipCode').removeClass('has-success');
        $('select[name$=_country]', billingForm).val(billingCountry).trigger('change');
        document.querySelector('.payment-form .card-body .billing-address-form .billing-address-block .billing-address').classList.remove('d-none');
        document.querySelector('.js-same-as-shipping').removeAttribute('checked');
        document.querySelector('#billing-address-field-filled').setAttribute('value', 'false');

        if (billPhone) {
          $('.billing-address input.billingPhone').val(billPhone);
        }

        if (billEmail) {
          $('.billing-address input.js-billing-email').val(billEmail);
        }

        $('form#dwfrm_billing').closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', 'disabled');
        $('fieldset.billing-address').find('input, select').removeClass('is-invalid');
      } else {
        $(billingForm).attr('data-address-mode', 'edit');
        var firstName = $('input[name$=_firstName]', shippingform).val();
        var lastName = $('input[name$=_lastName]', shippingform).val();
        var address1 = $('input[name$=_address1]', shippingform).val();
        var adrress2 = $('input[name$=_address2]', shippingform).val();
        var city = $('input[name$=_city]', shippingform).val();
        var postCode = $('input[name$=_postalCode]', shippingform).val();
        var stateCode = $('select[name$=_stateCode],input[name$=_stateCode]', shippingform).val();
        var country = $('select[name$=_country]', shippingform).val();
        $('input[name$=_firstName]', billingForm).val(firstName);
        $('input[name$=_lastName]', billingForm).val(lastName);
        $('input[name$=_address1]', billingForm).val(address1);
        $('input[name$=_address2]', billingForm).val(adrress2);
        $('input[name$=_city]', billingForm).val(city);
        $('input[name$=_postalCode]', billingForm).val(postCode);
        $('select[name$=_stateCode],input[name$=_stateCode]', billingForm).val(stateCode);
        $('select[name$=_country]', billingForm).val(country).trigger('change');
        document.querySelector('#billing-address-field-filled').setAttribute('value', 'true');
        document.querySelector('.payment-form .card-body .billing-address-form .billing-address-block .billing-address').classList.add('d-none');
        var adyenComponentSavedFieldsfilled = $('#adyen-component-saved-form-field-filled').val();

        if ($('.paymentBlockContainer').hasClass('myStoredCard') && !$('.paymentBlockContainer').hasClass('hasValidStoreCardCVV')) {
          $('form#dwfrm_billing').closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', 'disabled');
        } else if ($('#adyen-component-saved-form-field-filled').length && adyenComponentSavedFieldsfilled === 'true') {
          $('form#dwfrm_billing').closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', false);
        } else if (document.querySelector('#adyen-component-form-field-filled').getAttribute('value') !== 'true' && $('#rb_afterpaytouch.selected').length === 0 && $('#rb_klarna_account.selected').length === 0 && $('#rb_klarna.selected').length === 0) {
          $('form#dwfrm_billing').closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', 'disabled');
        } else {
          $('form#dwfrm_billing').closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', false);
        }

        if ($('input[name="isGCSatisfyCart"]').val() == 'true') {
          $('.submit-payment, .place-order').prop('disabled', '');
        }

        if ($('button#rb_paypal').length > 0 && $('button#rb_paypal').hasClass('selected')) {
          $('form#dwfrm_billing').closest('.data-checkout-stage').find('button.pay-with-paypal').prop('disabled', false);
        }

        if (idealPaymentMethod && idealPaymentMethod.classList.contains('selected')) {
          helpers.displaySelectedMethod(document.querySelector('button[id=rb_ideal]').getAttribute('value'));
        }
      }
    });
  },
  selectSavedPaymentInstrument: function selectSavedPaymentInstrument() {
    $(document).on('change', '#saved-cards-selector', function (e) {
      e.preventDefault();
      $('.saved-payment-security-code').val('');
      $('.saved-payment-instrument').removeClass('selected-payment');
      $(this).find(':selected').addClass('selected-payment');
    });
  },
  // updates the billing address form state fields
  selectBillingCountry: function selectBillingCountry() {
    $('select.country').on('change', function (e) {
      e.stopImmediatePropagation();
      e.preventDefault();
      customerUtil.updateStateOptions($('.billing-address-form'));
      var cityVal = $('.billing-address-form').find('input[name$="_addressFields_city"]').val();
      var $country = $('.billing-address-form').find('select[id$="_country"]');
      var countryVal = $country.val();
      var $statefld = $('.billing-address-form').find('select[id$="_stateCode"]');
      var statefldval = $statefld.val();

      if (countryVal === 'CA' && $statefld && $statefld.length > 0 && (statefldval === '' || typeof countryObj === 'undefined' || statefldval === null)) {
        var url = $('.ship-bill-payment-pages').data('getbillstatecode') + '?cityValue=' + cityVal;
        $.ajax({
          type: 'GET',
          dataType: 'json',
          contentType: 'application/json',
          url: url,
          success: function success(response) {
            if (response && response.stateVal !== '') {
              $statefld.val(response);
            }
          }
        });
      }

      if (countryVal === 'CA' || countryVal === 'US') {
        $('select.billingState').prop('required', true);
      } else {
        $('.billing-address .input-text.state').prop('required', false);
      }

      $('.billingState').trigger('blur');
    });
  }
};

/***/ }),

/***/ "./app_foundation_sfra/cartridge/client/default/js/checkout/checkout.js":
/*!******************************************************************************!*\
  !*** ./app_foundation_sfra/cartridge/client/default/js/checkout/checkout.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));

var customerHelpers = __webpack_require__(/*! ./customer */ "./app_foundation_sfra/cartridge/client/default/js/checkout/customer.js");

var addressHelpers = __webpack_require__(/*! ./address */ "./app_foundation_sfra/cartridge/client/default/js/checkout/address.js");

var shippingHelpers = __webpack_require__(/*! ./shipping */ "./app_foundation_sfra/cartridge/client/default/js/checkout/shipping.js");

var billingHelpers = __webpack_require__(/*! ./billing */ "./app_foundation_sfra/cartridge/client/default/js/checkout/billing.js");

var summaryHelpers = __webpack_require__(/*! ./summary */ "./app_foundation_sfra/cartridge/client/default/js/checkout/summary.js");

var promoCode = __webpack_require__(/*! ./promoCode */ "./app_foundation_sfra/cartridge/client/default/js/checkout/promoCode.js");

var formHelpers = __webpack_require__(/*! base/checkout/formErrors */ "./app_storefront_base/cartridge/client/default/js/checkout/formErrors.js");

var scrollAnimate = __webpack_require__(/*! base/components/scrollAnimate */ "./app_storefront_base/cartridge/client/default/js/components/scrollAnimate.js");

var adyenCheckout = __webpack_require__(/*! adyen/adyenCheckout */ "./int_adyen_SFRA/cartridge/client/default/js/adyenCheckout.js");

var cleave = __webpack_require__(/*! base/components/cleave */ "./app_storefront_base/cartridge/client/default/js/components/cleave.js");

var customerUtil = __webpack_require__(/*! ../customerUtil */ "./app_foundation_sfra/cartridge/client/default/js/customerUtil.js");

var swiperSlide = __webpack_require__(/*! ../components/swiperInit */ "./app_foundation_sfra/cartridge/client/default/js/components/swiperInit.js");

var dtm = __webpack_require__(/*! foundation/js/dtm */ "./app_foundation/cartridge/js/dtm.js");

var progress = __webpack_require__(/*! foundation/js/progress */ "./app_foundation/cartridge/js/progress.js");

dtm.init();
/**
 * Scrolling to the particular section when navigating from shipping to billing, billing to payment also on edit of those forms
 * @param {string=} element - current DOM element.
 */

function scrollCustomAnimate(element) {
  var headerHeight = $('.checkout-header').outerHeight() + $('.bag-header').outerHeight() + 50;
  var positionElement;

  if (window.matchMedia('(max-width: 959px)').matches) {
    positionElement = element.offset().top - headerHeight;
  } else {
    positionElement = element.offset().top;
  }

  $('html, body').animate({
    scrollTop: positionElement
  }, 500);
}
/**
 * Validate whole Billing form, to check if form is invalid or valid.Flag to indicate if form is valid then make button enabled
 * @param {string=} id - form id's name.
 */


function validateForm(id) {
  var valid = $(id)[0].checkValidity();

  if (valid) {
    var activeTabId = $('.adyen-component-content').attr('id');
    var selectedPaymentType = $('#dwfrm_billing .' + activeTabId + ' .payment-form-fields button.selected');

    if (id === '.billing-address' && $('.paymentBlockContainer').hasClass('myStoredCard') && $('.paymentBlockContainer').hasClass('hasValidStoreCardCVV')) {
      $(id).closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', false);
      document.querySelector('#billing-address-field-filled').setAttribute('value', 'true');
    } else if (id === '.billing-address' && (document.querySelector('#adyen-component-form-field-filled').getAttribute('value') === 'true' || selectedPaymentType.val() === 'klarna_account' || selectedPaymentType.val() === 'klarna')) {
      $(id).closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', false);
      document.querySelector('#billing-address-field-filled').setAttribute('value', 'true');
    } else if (id === '.billing-address' && (selectedPaymentType.val().startsWith('klarna') || selectedPaymentType.val().startsWith('afterpay'))) {
      $(id).closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', false);
      document.querySelector('#billing-address-field-filled').setAttribute('value', 'true');
    } else {
      $(id).closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', 'disabled');
      document.querySelector('#billing-address-field-filled').setAttribute('value', 'true');
    }

    if (id !== '.billing-address') {
      $(id).closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', false);
    }

    if (id === '.express-checkout-form') {
      $('#securityCodeInvalidMessage').addClass('d-none');
      $('.express-checkout-form .cvv-number .dwfrm_billing_creditCardFields_securityCode :input').removeClass('is-invalid');
      $(id).closest('.data-checkout-stage').find('button.place-order').prop('disabled', false);
      $('#adyen-component-saved-form-field-filled').attr('value', 'true');
    }
  } else {
    if (id === '.express-checkout-form') {
      $(id).closest('.data-checkout-stage').find('button.place-order').prop('disabled', 'disabled');
      $('#adyen-component-saved-form-field-filled').removeAttr('value');
    }

    document.querySelector('#billing-address-field-filled').setAttribute('value', 'false');
    $(id).closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', 'disabled');
  }
}

function displayBillingAddress() {
  if ($('input.js-same-as-shipping').parent('.form-group').hasClass('d-none') && $('fieldset.billing-address').length) {
    $('fieldset.billing-address').show();
  }
}
/**
 * Validate whole Shipping form, to check if form is invalid or valid.Flag to indicate if form is valid then make button enabled
 * @param {string=} id - form id's name.
 */


function validateShippingForm(id) {
  var valid = $(id)[0].checkValidity();

  if (valid) {
    var isValidPhoneNumber = $('.shippingPhoneNumber').hasClass('has-success');

    if (isValidPhoneNumber) {
      $(id).closest('.data-checkout-stage').find('button.submit-shipping').prop('disabled', false);
    } else {
      $(id).closest('.data-checkout-stage').find('button.submit-shipping').prop('disabled', 'disabled');
    }
  } else {
    $(id).closest('.data-checkout-stage').find('button.submit-shipping').prop('disabled', 'disabled');
  }
}

function giftCardRemoveButtonAction() {
  $('.gift-card-remove-button').on('click', function () {
    $('.giftcert-error').empty();
    var url = $(this).attr('actionurl');
    $.ajax({
      url: url,
      type: 'get',
      success: function success(data) {
        // eslint-disable-next-line no-use-before-define
        updateAplliedGifts(data);
        var $paymentOptions = $('.payment-form-fields').find('#paymentMethodsList .paymentMethod');

        if (data.numberOfAppliedGiftCards > 0) {
          document.querySelector('#appliedGiftCard').setAttribute('value', true);
          $paymentOptions.each(function () {
            var brandCode = $(this).find('input[name="brandCode"]').val();

            if (brandCode !== 'scheme' && !$(this).hasClass('d-none')) {
              $(this).addClass('d-none');
            }
          });
        } else {
          $paymentOptions.each(function () {
            document.querySelector('#appliedGiftCard').setAttribute('value', false);
            var brandCode = $(this).find('input[name="brandCode"]').val();

            if (brandCode !== 'scheme' && brandCode !== 'klarna_account' && brandCode !== 'klarna' && brandCode !== 'klarna_paynow' && $(this).hasClass('d-none')) {
              var isStoredCard = brandCode.includes('storedCard');

              if (!isStoredCard) {
                $(this).removeClass('d-none');
              }
            }
          });
        }
      }
    });
  });
}

function removeAllGiftCertificates(removeUrl) {
  $.ajax({
    url: removeUrl,
    type: 'get',
    success: function success(data) {
      $('.applied-gift-cards').empty();
      document.querySelector('#appliedGiftCard').setAttribute('value', false);
      var $paymentOptions = $('.payment-form-fields').find('#paymentMethodsList .paymentMethod');
      $('#paymentMethodsList .klarna:first').removeClass('d-none');
      $paymentOptions.each(function () {
        var brandCode = $(this).find('input[name="brandCode"]').val();

        if (brandCode !== 'scheme' && brandCode !== 'klarna_account' && brandCode !== 'klarna' && brandCode !== 'klarna_paynow' && $(this).hasClass('d-none')) {
          var isStoredCard = brandCode.includes('storedCard');

          if (!isStoredCard) {
            $(this).removeClass('d-none');
          }
        }
      });
      $('.gift-discount').addClass('hide-gift-discount');
      $('.order-gift-total').empty();
      $('.payment-form-fields').show();
      $('.express-checkout-payment .summary-details').show();
      $('.payment-summary .edit-button').show();
      $('.payment-form-fields input').removeAttr('disabled');

      if ($('.express-checkout-form')) {
        $('.express-checkout-form input').removeAttr('disabled');
      }

      $('input[name$="paymentMethod"]').val('AdyenComponent');

      if ($('#adyen-component-form-field-filled').val() === 'true' || $('#adyen-component-saved-form-field-filled').val() === 'true') {
        validateForm('.billing-address');
      } else if ($('.submit-payment.zero-dollar-swatch-payment').length > 0) {
        $('.submit-payment').prop('disabled', false);
      } else {
        $('.submit-payment, .place-order').prop('disabled', true);
      }

      window.isGCApplied = false;
      $('.payment-gift-card').show();
      $('.gift-card-limit-msg').remove();
      $('.grand-total .grand-total-sum').empty().append(data.Basket.formattedBasketTotalPrice);
    }
  });
}

function updateAplliedGifts(data) {
  $('.giftcert-error').empty();
  $('.applied-gift-cards').empty();
  $('#paymentMethodsList .klarna').addClass('d-none');

  if (data.Basket.appliedGiftCards && data.Basket.appliedGiftCards.length > 0) {
    data.Basket.appliedGiftCards.forEach(function (giftCard) {
      var balance = giftCard.gCardBalance ? giftCard.gCardBalance : 0;
      var appliedCard = '<div class="gift-card-container col-md-4 col-12 mr-md-3 mb-md-0 py-3"><span class="gc-num-applied t-body-style">' + giftCard.cardCode + '</span>';
      appliedCard += '<button type="button" class="gift-card-remove-button close" actionurl=' + giftCard.removeURL + '><svg class="svg-symbol cartremove" title="remove"><use xlink:href="#cartremove" /></button><div class="gc-amount">' + balance + '</div></div>';
      $('.applied-gift-cards').append(appliedCard);
    });
  }

  document.querySelector('#appliedGiftCard').setAttribute('value', true);

  if (typeof data.Basket.totalGiftDiscount !== 'undefined' && data.Basket.totalGiftDiscount) {
    $('.order-gift-total').empty().append('- ' + data.Basket.totalGiftDiscount);
    $('.gift-discount').removeClass('hide-gift-discount');
  } else {
    $('.gift-discount').addClass('hide-gift-discount');
  }

  if (data.Basket.appliedGiftCards && data.Basket.appliedGiftCards.length >= 3) {
    $('.payment-gift-card').after('<span class="gift-card-limit-msg t-body-style">You have redeemed 3 Gift Cards. To redeem a different Gift Card, please remove one of ones applied.</span>');
    $('.payment-gift-card').hide();
  } else if (data.numberOfAppliedGiftCards === 0) {
    $('.gift-discount').addClass('hide-gift-discount');
    $('.order-gift-total').empty();
    $('.payment-gift-card').show();
    $('.gift-card-limit-msg').remove();
    $('#paymentMethodsList .klarna:first').removeClass('d-none');
  } else {
    $('.payment-gift-card').show();
    $('.gift-card-limit-msg').remove();
  }

  if (data.Basket.isGiftPayment) {
    $('input[name$="paymentMethod"]').val('GIFT_CERTIFICATE');
    $('.payment-form-fields').hide();
    $('.express-checkout-payment .summary-details').hide();
    $('.payment-summary .edit-button').hide();
    $('.submit-payment, .place-order').prop('disabled', '');
    $('.payment-form-fields input').attr('disabled', 'disabled');

    if ($('.express-checkout-form')) {
      $('.express-checkout-form input').attr('disabled', 'disabled');
    }

    $('input[name="isGCSatisfyCart"]').val('true');
  } else {
    if (data.Basket.appliedGiftCards && data.Basket.appliedGiftCards.length > 0) {
      var $paymentOptions = $('.payment-form-fields').find('#paymentMethodsList .paymentMethod');
      $paymentOptions.each(function () {
        var brandCode = $(this).find('input[name="brandCode"]').val();

        if (brandCode !== 'scheme' && !$(this).hasClass('d-none')) {
          $(this).addClass('d-none');
        }
      });
    }

    $('.payment-form-fields').show();
    $('.express-checkout-payment .summary-details').show();
    $('.payment-summary .edit-button').show();
    $('.payment-form-fields input').removeAttr('disabled');

    if ($('.express-checkout-form')) {
      $('.express-checkout-form input').removeAttr('disabled');
    }

    $('input[name$="paymentMethod"]').val('AdyenComponent');

    if ($('#adyen-component-form-field-filled').val() === 'true' || $('#adyen-component-saved-form-field-filled').val() === 'true') {
      validateForm('.billing-address');
    } else if ($('.submit-payment.zero-dollar-swatch-payment').length > 0) {
      $('.submit-payment').prop('disabled', false);
    } else {
      $('.submit-payment, .place-order').prop('disabled', true);
    }

    window.isGCApplied = false;
  }

  if (data.Basket.formattedBasketTotalPrice) {
    $('.grand-total .grand-total-sum').empty().append(data.Basket.formattedBasketTotalPrice);
  }

  $('.payment-gift-card #gc-num').val('');
  $('.payment-gift-card #gc-pin').val('');
  giftCardRemoveButtonAction();
}
/**
 * Create the jQuery Checkout Plugin.
 *
 * This jQuery plugin will be registered on the dom element in checkout.isml with the
 * id of "checkout-main".
 *
 * The checkout plugin will handle the different state the user interface is in as the user
 * progresses through the varying forms such as shipping and payment.
 *
 * Billing info and payment info are used a bit synonymously in this code.
 *
 */


(function ($) {
  $.fn.checkout = function () {
    // eslint-disable-line
    var plugin = this; //
    // Collect form data from user input
    //

    var formData = {
      // Customer Data
      customer: {},
      // Shipping Address
      shipping: {},
      // Billing Address
      billing: {},
      // Payment
      payment: {},
      // Gift Codes
      giftCode: {}
    }; //
    // The different states/stages of checkout
    //

    var checkoutStages = ['shipping', 'shippingMethod', 'payment', 'placeOrder', 'submitted'];

    if ($('#checkout-main').hasClass('bopisonly')) {
      checkoutStages = ['shippingMethod', 'payment', 'placeOrder', 'submitted'];
    }
    /**
     * Updates the URL to determine stage
     * @param {number} currentStage - The current stage the user is currently on in the checkout
     */


    function updateUrl(currentStage) {
      var querystring = '';

      if ($('[name="ignore-paypal-review-order"]').val() === 'true') {
        querystring += '&reviewOrder=true';
      }

      var currentUrl = location.pathname + '?stage=' + checkoutStages[currentStage] + querystring + '#' + checkoutStages[currentStage];

      if (window.location.search.indexOf('LoginLocation') !== -1) {
        var queryString = window.location.search;
        var urlParams = new URLSearchParams(queryString);
        currentUrl = currentUrl + (currentUrl.indexOf('?') !== -1 ? '&LoginLocation=' : '?LoginLocation=') + urlParams.get('LoginLocation');
      }

      history.pushState(checkoutStages[currentStage], document.title, currentUrl);
    } //
    // Local member methods of the Checkout plugin
    //


    var members = {
      // initialize the currentStage variable for the first time
      currentStage: 0,

      /**
       * Move shipping ajax into a function
       * @param {object} form - The Shipping form object
       * @param {object} shippingFormData - The current stage shipping form data
       * @param {object} defer - defer object
       */
      updateAjaxShipping: function updateAjaxShipping(form, shippingFormData, defer) {
        // disable the next:Payment button here
        // $('body').trigger('checkout:disableButton', '.next-step-button button');
        $.ajax({
          url: form.attr('action'),
          type: 'post',
          data: shippingFormData,
          success: function success(data) {
            // enable the next:Payment button here
            // $('body').trigger('checkout:enableButton', '.next-step-button button');
            if (data.hasShippingAddressRestrictions) {
              $('.shipping-address-error').html(data.noApplicableSMErrorMsg);
              $('.shipping-address-error').addClass('alert alert-danger');
              scrollAnimate($('.shipping-error'));
              $('.single-shipping form#dwfrm_shipping').closest('.data-checkout-stage').find('button.submit-shipping').prop('disabled', 'disabled');
            } else if (data.error && data.addressHasLtnCharacters) {
              $('.shipping-address-error').text(data.addressErrorMsg);
              $('.shipping-address-error').addClass('alert alert-danger');
              scrollAnimate($('.shipping-error'));
            } else if (data && data.redirectUrl) {
              window.location.href = data.redirectUrl;
            } else {
              shippingHelpers.methods.shippingFormResponse(defer, data);
              $('.shipping-address-error').removeClass('alert alert-danger');
              $('.shipping-address-error').text('');
            } // Trigger billing country change


            if (data && data.address && data.address.countryCode) {
              $('.billing-address-form select[id$="_country"]').val(data.address.countryCode).trigger('change');
            } // Update billing address phone field value


            if (data && data.address && data.address.phone) {
              $('.billing-address input.billingPhone').val(data.address.phone);
            } // Update billing address email field value


            if (data && data.email) {
              $('.billing-address input.js-billing-email').val(data.email);
            }
          },
          error: function error(err) {
            // enable the next:Payment button here
            $('body').trigger('checkout:enableButton', '.next-step-button button');

            if (err.responseJSON && err.responseJSON.redirectUrl) {
              window.location.href = err.responseJSON.redirectUrl;
            } // Server error submitting form


            defer.reject(err.responseJSON);
          }
        });
      },

      /**
       * Set or update the checkout stage (AKA the shipping, billing, payment, etc... steps)
       * @returns {object} a promise
       */
      // eslint-disable-next-line complexity
      updateStage: function updateStage() {
        var stage = checkoutStages[members.currentStage];
        var defer = $.Deferred(); // eslint-disable-line

        if (stage === 'shipping') {
          //
          // Clear Previous Errors
          //
          if (!$('.edq-global-intuitive-address-suggestions').is(':visible') && $('.edq-global-intuitive-address-suggestions').find('.selected').length > 0) {
            var $experianSuggest = $('#experianSuggest');
            $experianSuggest.val(true);
            $('#experianValidated').val(true);
          }

          formHelpers.clearPreviousErrors('.shipping-form');

          if ($('.addressId').length > 0 && (!$('.addressId').val() || $('.addressId').val().length > 20) && $('.shippingAddressOne').length > 0 && $('.shippingAddressOne').val()) {
            var addressId = $('.shippingAddressOne').val();

            if (addressId.length > 20) {
              addressId = addressId.slice(0, 19);
            }

            $('.addressId').val(addressId);
          } //
          // Submit the Shipping Address Form
          //


          var isMultiShip = $('#checkout-main').hasClass('multi-ship');
          var formSelector = isMultiShip ? '.multi-shipping .active form' : '.single-shipping .shipping-form';
          var form = $(formSelector);

          if (isMultiShip && form.length === 0) {
            // disable the next:Payment button here
            $('body').trigger('checkout:disableButton', '.next-step-button button'); // in case the multi ship form is already submitted

            var url = $('#checkout-main').attr('data-checkout-get-url');
            $.ajax({
              url: url,
              method: 'GET',
              success: function success(data) {
                // enable the next:Payment button here
                $('body').trigger('checkout:enableButton', '.next-step-button button');

                if (!data.error) {
                  $('body').trigger('checkout:updateCheckoutView', {
                    order: data.order,
                    customer: data.customer
                  });
                  defer.resolve();
                } else if (data.message && $('.shipping-error .alert-danger').length < 1) {
                  var errorMsg = data.message;
                  var errorHtml = '<div class="alert alert-danger alert-dismissible valid-cart-error ' + 'fade show" role="alert">' + '<button type="button" class="close" data-dismiss="alert" aria-label="Close">' + '<span aria-hidden="true">&times;</span>' + '</button>' + errorMsg + '</div>';
                  $('.shipping-error').append(errorHtml);
                  scrollAnimate($('.shipping-error'));
                  defer.reject();
                } else if (data.redirectUrl) {
                  window.location.href = data.redirectUrl;
                }
              },
              error: function error() {
                // enable the next:Payment button here
                $('body').trigger('checkout:enableButton', '.next-step-button button'); // Server error submitting form

                defer.reject();
              }
            });
          } else {
            var shippingFormData = form.serialize();
            $('body').trigger('checkout:serializeShipping', {
              form: form,
              data: shippingFormData,
              callback: function callback(data) {
                shippingFormData = data;
              }
            });
            var addressValidation = shippingHelpers.methods.addressValidation(form);

            if (addressValidation.enableExperian && addressValidation.experianValidated != 'true' && addressValidation.experianSuggest != 'true') {
              $.ajax({
                type: 'POST',
                url: addressValidation.url,
                data: addressValidation.urlData,
                dataType: 'html',
                success: function success(data) {
                  if ($(data).find('.js-edit-address-form').length > 0) {
                    $('.js-address-validation-modal .modal-body')[0].innerHTML = data;
                    $('.js-address-validation-modal').modal();
                    shippingHelpers.methods.addressModal(form, $('body').find('.js-edit-address-form'));
                    form.find('input[name$="_experianValidated"]').val('false');
                  } else {
                    form.find('input[name$="_experianValidated"]').val('true');
                    shippingFormData = form.serialize();
                    members.updateAjaxShipping(form, shippingFormData, defer);
                  }

                  if (typeof window.SitePreferences.ANALYTICS_ENABLED != 'undefined' && window.SitePreferences.ANALYTICS_ENABLED) {
                    dtm.experianAddressSave();
                  }
                }
              });
            } else {
              members.updateAjaxShipping(form, shippingFormData, defer);
            }
          }

          return defer;
        } else if (stage === 'shippingMethod') {
          // On Change of Shipping Method
          var isDisabled = $('form#dwfrm_billing').closest('.data-checkout-stage').find('button.submit-payment').is(':disabled');

          if (isDisabled === false || $('.submit-payment.zero-dollar-swatch-payment').length > 0) {
            $('form#dwfrm_billing').closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', false);
          } else {
            $('body').trigger('checkout:disableButton', '.next-step-button button.submit-payment');
          }
        } else if (stage === 'payment') {
          //
          // Submit the Billing Address Form
          //
          formHelpers.clearPreviousErrors('.payment-form');
          var billingAddressForm = $('#dwfrm_billing .billing-address-block :input').serialize();
          $('body').trigger('checkout:serializeBilling', {
            form: $('#dwfrm_billing .billing-address-block'),
            data: billingAddressForm,
            callback: function callback(data) {
              if (data) {
                billingAddressForm = data;
              }
            }
          });
          var contactInfoForm = $('#dwfrm_shipping .contact-info-holder :input').serialize();
          $('body').trigger('checkout:serializeShipping', {
            form: $('#dwfrm_shipping .contact-info-holder'),
            data: contactInfoForm,
            callback: function callback(data) {
              if (data) {
                contactInfoForm = data;
              }
            }
          });
          var activeTabId = $('.adyen-component-content').attr('id');
          var paymentInfoSelector = '#dwfrm_billing .' + activeTabId + ' .payment-form-fields :input';
          var paymentInfoForm = $(paymentInfoSelector).serialize();
          $('body').trigger('checkout:serializeBilling', {
            form: $(paymentInfoSelector),
            data: paymentInfoForm,
            callback: function callback(data) {
              if (data) {
                paymentInfoForm = data;
              }
            }
          });
          var paymentForm = billingAddressForm + '&' + contactInfoForm + '&' + paymentInfoForm;

          if ($('button#rb_paypal').length > 0 && $('button#rb_paypal').hasClass('selected')) {
            paymentForm += '&isFromPaypal=true';
          } // Append selected brandcode to request


          var selectedPaymentType = $('#dwfrm_billing .' + activeTabId + ' .payment-form-fields button.selected');

          if (selectedPaymentType.length > 0) {
            paymentForm += '&selectedPaymentType=' + selectedPaymentType.val();
          } // Append customer tax ID to request


          var $customerTaxID = $('.billing-address-form input[name="customerTaxID"]');

          if ($customerTaxID.length && $customerTaxID.is(':visible')) {
            paymentForm += '&customerTaxID=' + $customerTaxID.val();
          }

          var csrfToken = $('input[name$="csrf_token"]').length > 0 ? $('input[name$="csrf_token"]').val() : '';

          if ($('input[name$="return-from-amazonpay"]').val() == 'true' && csrfToken) {
            paymentForm += '&csrf_token=' + csrfToken;
          }

          if ($('.data-checkout-stage').data('customer-type') === 'registered') {
            // if payment method is credit card
            if ($('.payment-information').data('payment-method-id') === 'CREDIT_CARD') {
              if (!$('.payment-information').data('is-new-payment')) {
                var cvvCode = $('.saved-payment-instrument.' + 'selected-payment .saved-payment-security-code').val(); // eslint-disable-next-line max-depth

                if (cvvCode === '') {
                  var cvvElement = $('.saved-payment-instrument.' + 'selected-payment ' + '.form-control');
                  cvvElement.addClass('is-invalid');
                  scrollAnimate(cvvElement);
                  defer.reject();
                  return defer;
                }

                var $savedPaymentInstrument = $('.saved-payment-instrument' + '.selected-payment');
                paymentForm += '&storedPaymentUUID=' + $savedPaymentInstrument.data('uuid');
                paymentForm += '&securityCode=' + cvvCode;
              }
            } // Check if user has selected save card option


            var saveCreditCard;
            var saveCardInput = $('.paymentBlockContainer #component_scheme .adyen-checkout__card-input .adyen-checkout__loading-input__form .adyen-checkout__store-details .adyen-checkout__checkbox :input');

            if (saveCardInput.length && saveCardInput.is(':visible')) {
              if (saveCardInput.is(':checked')) {
                saveCreditCard = true;
              } else {
                saveCreditCard = false;
              }
            }

            paymentForm += '&saveCreditCard=' + saveCreditCard;
            var savedCardSelected = document.querySelector('#savedCardSelected').getAttribute('value');
            paymentForm += '&savedCardSelected=' + savedCardSelected;
          } // disable the next:Place Order button here


          $('body').trigger('checkout:disableButton', '.next-step-button button');
          $.ajax({
            url: $('#dwfrm_billing').attr('action'),
            method: 'POST',
            data: paymentForm,
            success: function success(data) {
              // enable the next:Place Order button here
              // $('body').trigger('checkout:enableButton', '.next-step-button button');
              // look for field validation errors
              if (data.error) {
                if (data.fieldErrors.length) {
                  data.fieldErrors.forEach(function (error) {
                    if (Object.keys(error).length) {
                      formHelpers.loadFormErrors('.payment-form', error);
                    }
                  });
                }

                if (data.serverErrors.length) {
                  data.serverErrors.forEach(function (error) {
                    $('.error-message').show();
                    $('.error-message-text').text(error);
                    scrollAnimate($('.error-message'));
                  });
                }

                if (data.cartError) {
                  window.location.href = data.redirectUrl;
                }

                defer.reject();
              } else if (data.paypalUrl) {
                window.location.href = data.paypalUrl;
              } else {
                //
                // Populate the Address Summary
                //
                $('body').trigger('checkout:updateCheckoutView', {
                  order: data.order,
                  customer: data.customer
                });

                if (data.renderedPaymentInstruments) {
                  $('.stored-payments').empty().html(data.renderedPaymentInstruments);
                }

                if (data.customer.registeredUser && data.customer.customerPaymentInstruments.length) {
                  $('.cancel-new-payment').removeClass('checkout-hidden');
                }

                defer.resolve(data);
                $('body').trigger('checkout:enableButton', '.next-step-button button.place-order');
                $('body').find('.next-step-button button.place-order').trigger('click');
                $('body').trigger('checkout:disableButton', '.next-step-button button');
              }
            },
            error: function error(err) {
              // enable the next:Place Order button here
              $('body').trigger('checkout:enableButton', '.next-step-button button');

              if (err.responseJSON && err.responseJSON.redirectUrl) {
                window.location.href = err.responseJSON.redirectUrl;
              }
            }
          });
          return defer;
        } else if (stage === 'placeOrder') {
          if ($('.amazonpay-order').length == 0) {
            var expressCheckoutForm = '';

            if ($('.express-checkout-form').length) {
              var expressCardForm = $('.express-checkout-form');
              var expressCardCVN = $(expressCardForm).find('input[name$="creditCardFields_securityCode"]').val();
              expressCheckoutForm += '&securityCode=' + expressCardCVN;
              expressCheckoutForm += '&isExpressCheckout=true'; // Adyen fingerprint

              var adyenFingerPrint = $('.billing-address-form :input[name$=_adyenFingerprint]').serialize();
              expressCheckoutForm += '&' + adyenFingerPrint; // Append customer tax ID to request

              var $customerTaxNo = $('.express-checkout-form input[name="customerTaxID"]');

              if ($customerTaxNo.length && $customerTaxNo.is(':visible')) {
                expressCheckoutForm += '&customerTaxID=' + $customerTaxNo.val();
              }
            } // disable the placeOrder button here


            $('body').trigger('checkout:disableButton', '.next-step-button button');
            $.ajax({
              url: $('.place-order').data('action'),
              method: 'POST',
              data: expressCheckoutForm,
              success: function success(data) {
                // enable the placeOrder button here
                // $('body').trigger('checkout:enableButton', '.next-step-button button');
                if (data.error) {
                  if (data.cartError) {
                    window.location.href = data.redirectUrl;
                    defer.reject();
                  } else {
                    // go to appropriate stage and display error message
                    defer.reject(data);
                    members.gotoStage('payment');
                    scrollAnimate();
                    displayBillingAddress();
                  }
                } else {
                  var redirect = $('<form>').appendTo(document.body).attr({
                    method: 'POST',
                    action: data.continueUrl
                  });
                  $('<input>').appendTo(redirect).attr({
                    name: 'orderID',
                    value: data.orderID
                  });
                  $('<input>').appendTo(redirect).attr({
                    name: 'orderToken',
                    value: data.orderToken
                  });
                  redirect.submit();
                  defer.resolve(data);
                }
              },
              error: function error() {
                // enable the placeOrder button here
                $('body').trigger('checkout:enableButton', $('.next-step-button button'));
              }
            });
            return defer;
          }
        }

        var p = $('<div>').promise(); // eslint-disable-line

        setTimeout(function () {
          p.done(); // eslint-disable-line
        }, 500);
        return p; // eslint-disable-line
      },

      /**
       * Initialize the checkout stage.
       *
       * TODO: update this to allow stage to be set from server?
       */
      initialize: function initialize() {
        // set the initial state of checkout
        members.currentStage = checkoutStages.indexOf($('.data-checkout-stage').data('checkout-stage'));
        var isExpressCheckout = $('#checkout-main').data('isexpresscheckout');
        var isPaypalExpress = $('[name="return-from-paypal"]').val() === 'true';
        var isAmazonpayExpress = $('[name="return-from-amazonpay"]').val() === 'true';

        if (!isAmazonpayExpress && !isPaypalExpress && !isExpressCheckout && members.currentStage === 3) {
          members.currentStage = 2;
        }

        $(plugin).attr('data-checkout-stage', checkoutStages[members.currentStage]);
        $('body').on('click', '.submit-customer-login', function (e) {
          e.preventDefault();
          members.nextStage(e);
        });
        $('body').on('click', '.submit-customer', function (e) {
          e.preventDefault();
          members.nextStage(e);
        });
        $('body').on('click', '.pay-with-paypal', function (e) {
          e.preventDefault();
          members.nextStage(e);
        }); //
        // Handle Payment option selection
        //

        $('input[name$="paymentMethod"]', plugin).on('change', function () {
          $('.credit-card-form').toggle($(this).val() === 'CREDIT_CARD');
        }); //
        // Handle Next State button click
        //

        $(plugin).on('click', '.next-step-button button', function (e) {
          if (!$(this).hasClass('cancel-shipping-form')) {
            members.nextStage(e);
          }
        }); //
        // Handle Edit buttons on shipping and payment summary cards
        //

        $('.customer-summary .edit-button', plugin).on('click', function () {
          members.gotoStage('customer');
        });
        $('.shipping-summary .edit-button', plugin).on('click', function () {
          if (!$('#checkout-main').hasClass('multi-ship')) {
            $('body').trigger('shipping:selectSingleShipping');
          }

          $('.multiple-shipment-div').css('display', 'none');
          members.gotoStage('shipping');
          validateShippingForm('form#dwfrm_shipping');

          if (checkoutStages[members.currentStage] === 'shipping') {
            scrollCustomAnimate($('.shipping-section .CO-progress-header'));
          }

          $('.js-reduce-package-selection').closest('.reducepackage-message-block').show();
          $('.js-reduce-package-selection').prop('disabled', false);
        });
        $('.shipping-method-summary .edit-button', plugin).on('click', function () {
          members.gotoStage('shippingMethod');
          validateShippingForm('form#dwfrm_shipping');

          if (checkoutStages[members.currentStage] === 'shippingMethod') {
            scrollCustomAnimate($('.shipping-method-section .CO-progress-header'));
            $('body').trigger('checkout:enableButton', $('.next-step-button .submit-shipping-method'));
          }

          $('.js-reduce-package-selection').closest('.reducepackage-message-block').show();
          $('.js-reduce-package-selection').prop('disabled', false);

          if ($('.shipping-summary .edit-holder-shipping').hasClass('d-none')) {
            $('.shipping-summary .edit-holder-shipping').removeClass('d-none');
          }

          swiperSlide.swiperInitialization();
        });
        $('.payment-summary .edit-button', plugin).on('click', function () {
          if ($('.amazonpay-order').length > 0) {
            $('.amazonpay-order').removeClass('amazonpay-order');
            $('.shipping-summary .edit-holder-shipping').removeClass('d-none');
            $('#billingAddressBlock').appendTo('.billing-address-form');
            $('#redeemGiftCard').appendTo('.billing-address-form');
          }

          adyenCheckout.methods.renderGenericComponent();
          members.gotoStage('payment');
          var isGiftCardApplied = document.querySelector('#appliedGiftCard').getAttribute('value');

          if (isGiftCardApplied === 'true') {
            $('.js-redeem-gc').prop('checked', true);
          }

          validateForm('form#dwfrm_billing');
          validateShippingForm('form#dwfrm_shipping');

          if (checkoutStages[members.currentStage] === 'payment') {
            scrollCustomAnimate($('.payment-form .CO-progress-header'));
          }

          if (checkoutStages[members.currentStage] === 'placeOrder') {
            scrollCustomAnimate($('.payment-summary .CO-progress-header'));
          }

          $('.shipment-selector-block').show();
        });
        $('body').on('click', '.js-reduce-package-selection', function () {
          var $reducePackage = $(this).is(':checked');
          $('.js-reduce-package-selection').prop('checked', $reducePackage);
          $.spinner().start();
          $.ajax({
            url: $(this).data('url'),
            method: 'POST',
            data: {
              reducePackage: $reducePackage
            },
            success: function success() {
              $.spinner().stop();
            },
            error: function error() {
              $.spinner().stop();
            }
          });
        });
        $('body').on('click', '.js-samedaySMSOptIn-selection', function () {
          var $smsOptIn = $(this).is(':checked');
          $('.js-samedaySMSOptIn-selection').prop('checked', $smsOptIn);
          $.spinner().start();
          $.ajax({
            url: $(this).data('url'),
            method: 'POST',
            data: {
              samedaySMSOptIn: $smsOptIn
            },
            success: function success() {
              $.spinner().stop();
            },
            error: function error() {
              $.spinner().stop();
            }
          });
        }); // Trigger chat click event for RL EU sites

        $('.chat360-init').on('click', function (e) {
          e.preventDefault();

          if (!$('#chat360-widget-container').hasClass('hide')) {
            $('#chat360-widget-launcher-avatar-button').trigger('click');
          } else if ($('iframe.hero-launcher-avatar').length) {
            $('iframe.hero-launcher-avatar').contents().find('button').trigger('click');
          } else if ($('#myLauncher').length) {
            $('#myLauncher').trigger('click');
          }
        }); // Customer create account/login events

        customerUtil.init(); //
        // remember stage (e.g. shipping)
        //

        updateUrl(members.currentStage); //
        // Listen for foward/back button press and move to correct checkout-stage
        //

        $(window).on('popstate', function (e) {
          //
          // Back button when event state less than current state in ordered
          // checkoutStages array.
          //
          if (e.state === null || checkoutStages.indexOf(e.state) < members.currentStage) {
            members.handlePrevStage(false);
          } else if (checkoutStages.indexOf(e.state) > members.currentStage) {
            // Forward button  pressed
            members.handleNextStage(false);
          }
        }); // Get billing countries

        customerUtil.getBillingCountries(); // Validate shipping form

        if ($('#checkout-main').data('expand-shippingform')) {
          $('.detailed-shipping-info-formfields').removeClass('d-none');
          $('.js-manualEnter-option').addClass('d-none');
          validateShippingForm('form#dwfrm_shipping');
        }

        if ($('.express-checkout-form').is(':visible') && $('.data-checkout-stage').data('customer-type') === 'registered' && !$('.payment-information').data('is-new-payment')) {
          $('#securityCode').on('keydown', function (event) {
            var keyName = event.key || event.code || 0;

            if (keyName == 'Enter') {
              event.preventDefault();
              $('body').find('.next-step-button button.place-order').trigger('click');
            }
          });
        } //
        // Set the form data
        //


        plugin.data('formData', formData);
      },

      /**
       * @function
       * @description The next checkout state step updates the css for showing correct buttons etc...
       * @param {object} e event object
       */
      nextStage: function nextStage(e) {
        if ($('.checkout-error-message').length) {
          $('.checkout-error-message').addClass('error-message');
          $('.checkout-error-message .error-message-text').empty();
        }

        var $target = !$(e.target).is(':visible') && $(e.target).hasClass('place-order') ? $('.next-step-button .submit-payment') : $(e.target);
        $target.css('position', 'relative');
        $target.addClass('change-text-color');
        progress.show($target);
        var promise = members.updateStage();
        promise.done(function () {
          // Update UI with new stage
          $('.error-message').hide();

          if (checkoutStages[members.currentStage] === 'shippingMethod') {
            setTimeout(function () {
              members.handleNextStage(true, $target);
            }, 1500);
          } else {
            members.handleNextStage(true, $target);
          }

          if (checkoutStages[members.currentStage] === 'submitted') {
            progress.show($target);
          }
        });
        promise.fail(function (data) {
          // show errors
          $target.removeClass('change-text-color');
          progress.hide($target);

          if (data) {
            if (data.errorStage) {
              members.gotoStage(data.errorStage.stage);

              if (data.errorStage.step === 'billingAddress') {
                var $billingAddressSameAsShipping = $('input[name$="_shippingAddressUseAsBillingAddress"]');

                if ($billingAddressSameAsShipping.is(':checked')) {
                  $billingAddressSameAsShipping.prop('checked', false);
                }
              }
            }

            if (data.errorMessage) {
              $('.error-message').show();
              $('.error-message-text').text(data.errorMessage);
            }
          }
        });
      },

      /**
       * The next checkout state step updates the css for showing correct buttons etc...
       *
       * @param {boolean} bPushState - boolean when true pushes state using the history api.
       * @param {element} $target - element that has been clicked.
       */
      handleNextStage: function handleNextStage(bPushState, $target) {
        if (members.currentStage < checkoutStages.length - 1) {
          // move stage forward
          members.currentStage++; //
          // show new stage in url (e.g.payment)
          //

          if (bPushState) {
            updateUrl(members.currentStage);
          }
        } // Set the next stage on the DOM


        $(plugin).attr('data-checkout-stage', checkoutStages[members.currentStage]); // scroll to respective CO stage while previous form submitted

        if (checkoutStages[members.currentStage] === 'shipping') {
          scrollCustomAnimate($('.shipping-section .CO-progress-header'));
        }

        if (checkoutStages[members.currentStage] === 'shippingMethod') {
          scrollCustomAnimate($('.shipping-method-section .CO-progress-header'));
          swiperSlide.swiperInitialization();
          $('body').trigger('checkout:enableButton', $('.next-step-button .submit-shipping-method'));
        }

        if (checkoutStages[members.currentStage] === 'payment') {
          scrollCustomAnimate($('.payment-form .CO-progress-header'));

          if ($('.js-reduce-package-selection').is(':checked')) {
            $('.js-reduce-package-selection').prop('disabled', 'disabled');
          } else {
            $('.js-reduce-package-selection').closest('.reducepackage-message-block').hide();
          }
        }

        if (checkoutStages[members.currentStage] === 'placeOrder' || checkoutStages[members.currentStage] === 'submitted') {
          $target.addClass('change-text-color');
          progress.show($target);
        } else {
          $target.removeClass('change-text-color');
          progress.hide($target);
        }
      },

      /**
       * Previous State
       */
      handlePrevStage: function handlePrevStage() {
        if (members.currentStage > 0) {
          // move state back
          members.currentStage--;
          updateUrl(members.currentStage);
        } else {
          window.location.href = $('#checkout-main').data('cart-url');
        }

        $(plugin).attr('data-checkout-stage', checkoutStages[members.currentStage]);
      },

      /**
       * Use window history to go to a checkout stage
       * @param {string} stageName - the checkout state to goto
       */
      gotoStage: function gotoStage(stageName) {
        members.currentStage = checkoutStages.indexOf(stageName);
        updateUrl(members.currentStage);
        $(plugin).attr('data-checkout-stage', checkoutStages[members.currentStage]);
      }
    }; //
    // Initialize the checkout
    //

    members.initialize();
    return this;
  };
})(jQuery);

var _exports = {
  initialize: function initialize() {
    $('#checkout-main').checkout();
  },

  /**
  * Handle Select one of saved cards in checkout page
  */
  selectSavedCard: function selectSavedCard() {
    customerUtil.selectSavedCard();
  },

  /**
  * Handle the action of add new card
  */
  newCard: function newCard() {
    customerUtil.newCard();
  },
  updateCheckoutView: function updateCheckoutView() {
    $('body').on('checkout:updateCheckoutView', function (e, data) {
      if (data.csrfToken) {
        $('input[name*=\'csrf_token\']').val(data.csrfToken);
      }

      if (!data.order.isGiftPayment) {
        cleave.handleCreditCardNumber('.cardNumber', '#cardType');
      }

      shippingHelpers.methods.updateMultiShipInformation(data.order);
      summaryHelpers.updateTotals(data.order.totals, data.order);
      data.order.shipping.forEach(function (shipping) {
        shippingHelpers.methods.updateShippingInformation(shipping, data.order, data.customer, data.options, data);
      });

      if ($('.shipping-method-summary-list').length > 0 && data.order.shippingMethodSummary) {
        $('.shipping-method-summary-content').html(data.order.shippingMethodSummary);

        if ($('.shipping-method-list .shipping-options-container').length === 1) {
          $('.economy-shipping-msg').removeClass('d-lg-block d-block'); // Desktop

          $('.economy-shipping-msg').addClass('d-none'); // Mobile
        }
      }

      var currentStage = window.location.search.substring(window.location.search.indexOf('=') + 1);
      var renderAdyenComponent = 'shipping|payment|shippingMethod';

      if (renderAdyenComponent.indexOf(currentStage) >= 0) {
        adyenCheckout.methods.renderGenericComponent();
      }

      billingHelpers.methods.updateBillingInformation(data.order, data.customer, data.options);

      if ($('#checkout-main').attr('data-checkout-stage') !== 'placeOrder') {
        billingHelpers.methods.updatePaymentInformation(data.order, data.options);
      }

      summaryHelpers.updateOrderProductSummaryInformation(data.order, data.options);
      summaryHelpers.updateOrderProductSamedayMessage(data.order, data.options);
    });
  },
  disableButton: function disableButton() {
    $('body').on('checkout:disableButton', function (e, button) {
      $(button).prop('disabled', true);
    });
  },
  enableButton: function enableButton() {
    $('body').on('checkout:enableButton', function (e, button) {
      $(button).prop('disabled', false);
    });
  },
  orderSummaryBag: function orderSummaryBag() {
    $('.promo-code-form:visible').hide();

    if (window.matchMedia('(max-width: 959px)').matches) {
      $('.order-summary-detail').find('.bag-header .bag-toggle').addClass('collapsed');
      $('.order-summary-detail').find('.product-section').removeClass('show');
    }
  },
  // show more fundtionality for saved address.
  showMoreAddress: function showMoreAddress() {
    $('body').on('click', '.js-show-more-address', function () {
      $(this).closest('.shipment-selector-block').find('.additional-address-blocks').removeClass('d-none');
      $(this).hide();
    });
  },
  checkoutBtnEnabilityCheck: function checkoutBtnEnabilityCheck() {
    $('.billing-address').on('keyup change select blur', 'input:visible, select:visible', function () {
      var isInValid = false;
      $('.billing-address input:required, .billing-address select:required').each(function () {
        if ($(this).val() == '' && !$(this).prop('disabled')) {
          isInValid = true;
        }
      });

      if (isInValid) {
        $('.next-step-button .submit-payment').closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', 'disabled');
        document.querySelector('#billing-address-field-filled').setAttribute('value', 'false');
      } else if ($('.paymentMethod.klarna button.selected').length > 0) {
        validateForm('form#dwfrm_billing .billing-address-block');
      } else {
        validateForm('.billing-address');

        if ($('button#rb_paypal').length > 0 && $('button#rb_paypal').hasClass('selected')) {
          $('form#dwfrm_billing').closest('.data-checkout-stage').find('button.pay-with-paypal').prop('disabled', false);
        }
      }
    });
    $('.single-shipping form#dwfrm_shipping').on('keyup change select blur', 'input:visible, select:visible', function () {
      var isInValidShip = false;
      $('.single-shipping form#dwfrm_shipping input:required, .single-shipping form#dwfrm_shipping select:required').each(function () {
        if ($(this).val() == '') {
          isInValidShip = true;
        }
      });

      if ($(this).hasClass('shippingPhoneNumber')) {
        $(this).val($(this).val().replace(/^(\d{3})(\d{3})(\d+)$/, '($1)$2-$3'));
      }

      if (isInValidShip) {
        $('.single-shipping form#dwfrm_shipping').closest('.data-checkout-stage').find('button.submit-shipping').prop('disabled', 'disabled');
      } else {
        validateShippingForm('.single-shipping form#dwfrm_shipping');
      }
    });
  },
  validatePhoneNumber: function validatePhoneNumber() {
    $('body').on('blur', '.shippingPhoneNumber, .billingPhone', function () {
      var naPhoneRegex = /(^[0-9]{10}$)/;
      var otherPhoneRegex = /^(?:\+\d{1,3}|0\d{1,3}|00\d{1,2})?(?:\s?\(\d+\))?(?:[-\/\s.]|\d)+$/; // eslint-disable-line

      var value = $(this).val();
      var minLength = $(this).closest('.not-US-Country').length === 0 ? 10 : 8;
      var isValid = true;
      $('.shippingCountry').find('option').each(function (index, element) {
        value = value.replace(/[()-]/g, '');

        if (element.id == 'US' && naPhoneRegex.test(value)) {
          value = value.replace(/[^a-zA-Z 0-9]+/g, '');
        }

        if (element.id == 'US' && !naPhoneRegex.test(value)) {
          isValid = false;
        }
      });

      if (value) {
        if (isValid && (naPhoneRegex.test(value) || otherPhoneRegex.test(value)) && value !== null && value.match(/\d/g).length >= minLength) {
          $(this).addClass('has-success').removeClass('is-invalid');
          $(this).closest('.form-group').find('.invalid-feedback').html('');
          validateShippingForm('form#dwfrm_shipping');
          $(this).val(value);
        } else {
          $(this).removeClass('has-success').addClass('is-invalid');
          $(this).closest('.data-checkout-stage').find('button.submit-shipping').prop('disabled', 'disabled');
          $(this).closest('.form-group').find('.invalid-feedback').html($(this).data('pattern-mismatch'));
          $('form#dwfrm_shipping').closest('.data-checkout-stage').find('button.submit-shipping').prop('disabled', 'disabled');
        }
      } else {
        $(this).removeClass('has-success').addClass('is-invalid');
        $(this).closest('.form-group').find('.invalid-feedback').html($(this).data('missing-error'));
      }

      $(this).val($(this).val().replace(/^(\d{3})(\d{3})(\d+)$/, '($1)$2-$3'));
    });
  },
  showRedeemGiftCardForm: function showRedeemGiftCardForm() {
    $('body').on('change', '.js-redeem-gc', function () {
      var checkedCb = $(this).is(':checked');

      if (checkedCb) {
        $('.payment-gift-card').removeClass('d-none');
        $('.giftcert-error').show();
        $('.gift-card-container').show();
      } else {
        $('.payment-gift-card').addClass('d-none');
        $('.giftcert-error').hide();
        $('.gift-card-container').hide();
        var isGiftCardApplied = document.querySelector('#appliedGiftCard').getAttribute('value');

        if (isGiftCardApplied === 'true') {
          var removeUrl = $('.js-redeem-gc').attr('actionurl');
          removeAllGiftCertificates(removeUrl);
        }
      }

      $('.payment-gift-card #gc-num').val('');
      $('.payment-gift-card #gc-pin').val('');
      $('.giftcert-error').empty();
    });
    var checkedCb = $('.js-redeem-gc').is(':checked');

    if (checkedCb) {
      $('.gift-card-container').show();
    } else {
      $('.gift-card-container').hide();
    }
  },
  savePaymentCheckBox: function savePaymentCheckBox() {
    $('body').on('change', '.paymentBlockContainer #component_scheme .adyen-checkout__card-input .adyen-checkout__loading-input__form .adyen-checkout__store-details .adyen-checkout__checkbox', function () {
      var checkbox = $('.paymentBlockContainer #component_scheme .adyen-checkout__card-input .adyen-checkout__loading-input__form .adyen-checkout__store-details .adyen-checkout__checkbox .adyen-checkout__checkbox__input').attr('value');

      if (checkbox === 'true') {
        $('.paymentBlockContainer #component_scheme .adyen-checkout__card-input .adyen-checkout__loading-input__form .adyen-checkout__store-details .adyen-checkout__checkbox .adyen-checkout__checkbox__input').addClass('unchecked');
        $('.paymentBlockContainer #component_scheme .adyen-checkout__card-input .adyen-checkout__loading-input__form .adyen-checkout__store-details .adyen-checkout__checkbox .adyen-checkout__checkbox__input').removeClass('checked');
      } else {
        $('.paymentBlockContainer #component_scheme .adyen-checkout__card-input .adyen-checkout__loading-input__form .adyen-checkout__store-details .adyen-checkout__checkbox .adyen-checkout__checkbox__input').addClass('checked');
        $('.paymentBlockContainer #component_scheme .adyen-checkout__card-input .adyen-checkout__loading-input__form .adyen-checkout__store-details .adyen-checkout__checkbox .adyen-checkout__checkbox__input').removeClass('unchecked');
      }
    });
  },
  initializeGiftCardPayment: function initializeGiftCardPayment() {
    $('body').on('blur input', '.js-gc-redeem', function () {
      if ($(this).closest('.gc-details').find('input#gc-num').val() != '' && $(this).closest('.gc-details').find('input#gc-pin').val() != '') {
        $(this).closest('.gc-details').find('.gc-btn-apply').removeClass('disabled');
      } else {
        $(this).closest('.gc-details').find('.gc-btn-apply').addClass('disabled');
      }
    });
    giftCardRemoveButtonAction();

    if ($('input[name="isGCSatisfyCart"]').val() == 'true') {
      $('input[name$="paymentMethod"]').val('GIFT_CERTIFICATE');
      $('.payment-form-fields').hide();
      $('.submit-payment, .place-order').prop('disabled', '');
      $('.payment-form-fields input').attr('disabled', 'disabled');

      if ($('.express-checkout-form')) {
        $('.express-checkout-form input').attr('disabled', 'disabled');
      }
    }

    $('.payment-gift-card').submit(function (e) {
      e.preventDefault();
      $('.gc-btn-apply').addClass('disabled');
      var url = $(this).attr('action');
      var urlData = 'giftCertCode=' + $(this).find('#gc-num').val() + '&gcPin=' + $(this).find('#gc-pin').val();
      var billingForm = $('.billing-address-form');
      urlData = urlData + '&firstName=' + billingForm.find('input[name*="firstName"').val();
      urlData = urlData + '&lastName=' + billingForm.find('input[name*="lastName"').val();
      urlData = urlData + '&address1=' + billingForm.find('input[name*="address1"').val();
      urlData = urlData + '&address2=' + billingForm.find('input[name*="address2"').val();
      urlData = urlData + '&city=' + billingForm.find('input[name*="city"').val();
      urlData = urlData + '&postal=' + billingForm.find('input[name*="postal"').val();
      urlData = urlData + '&state=' + billingForm.find('select[name*="stateCode"').find(':selected').val();
      urlData = urlData + '&country=' + billingForm.find('select[name*="country"').find(':selected').val();
      urlData = urlData + '&chkSameAsAddress=' + billingForm.find('input[name*="sameAsShipping"').is(':checked');
      urlData = urlData + '&phone=' + $('#shippingPhoneNumberdefault').val();
      urlData = urlData + '&email=' + $('input[name*="coCustomer_email"').val();
      urlData = urlData + '&format=ajax&submitcard=true';

      if ($(this).closest('.express-checkout-payment').length > 0) {
        urlData = urlData + '&isExpressCheckout=true';
      }

      $.ajax({
        url: url,
        type: 'get',
        data: urlData,
        success: function success(data) {
          if (data != '') {
            if (data.success == true) {
              updateAplliedGifts(data);
            } else {
              $('.giftcert-error').empty();

              if (data.status == 'GIFTCERTIFICATE_NOT_FOUND') {
                $('.giftcert-error').append(window.Resources.GIFTCARD_NOT_FOUND);
              } else if (data.status == 'GIFTCERTIFICATE_INSUFFICIENT_BALANCE') {
                $('.giftcert-error').append(window.Resources.GIFTCARD_INSUFFICINT_BALANCE);
              } else {
                $('.giftcert-error').append(data.message);
              }
            }
          }

          $('.gc-btn-apply').removeClass('disabled');
        }
      });
    });
  },
  updatePaypalTab: function updatePaypalTab() {
    $('#paymentMethodsList').on('click', '.paymentMethod button', function () {
      if (this.id != 'rb_scheme' && $('.giftcert-error')[0].innerText != '') {
        $('.giftcert-error').addClass('hide');
      } else if ($('.giftcert-error').hasClass('hide')) {
        $('.giftcert-error').removeClass('hide');
      }

      if (this.id === 'rb_paypal') {
        $('#component_paypal').empty();
        $('#component_paypal').append($('.paypal-content')[0].innerHTML);
        $('.submit-payment').addClass('d-none');
        $('.pay-with-paypal').removeClass('d-none');
        $('.pay-with-paypal').removeAttr('disabled', true);
      } else if (this.id === 'rb_applepay') {
        $('.submit-payment').addClass('d-none');
        $('.pay-with-paypal').addClass('d-none');
      } else if (this.id === 'rb_afterpaytouch') {
        $('.submit-payment').removeClass('d-none');
        $('.pay-with-paypal').addClass('d-none');
        $('#component_afterpaytouch').empty();
        $('#component_afterpaytouch').append($('.afterpay-content')[0].innerHTML);
      } else if (this.id === 'rb_amazonpay') {
        $('#component_amazonpay .paypal-continue').remove();
        $('.submit-payment').addClass('d-none');
        $('.pay-with-paypal').addClass('d-none');
        $($('.amazonpay-content')[0].innerHTML).insertBefore('#component_amazonpay .adyen-checkout__amazonpay');

        if ($('#component_amazonpay .adyen-checkout__amazonpay').length) {
          $('#component_amazonpay .paypal-continue').addClass('mb-3');
        }
      } else if (this.id.includes('klarna')) {
        $('.place-order').addClass('d-none');
        $('.pay-with-paypal').addClass('d-none');
        $('.submit-payment').removeClass('d-none');
      } else {
        $('.submit-payment').removeClass('d-none');
        $('.pay-with-paypal').addClass('d-none');
      }
    });
  },
  updateIdealTab: function updateIdealTab() {
    $('#paymentMethodsList').on('click', '.paymentMethod button', function () {
      if (this.id === 'rb_ideal') {
        $('.component_ideal .ideal-brand-name').remove();
        $('.component_ideal .ideal-select-bank').remove();
        $('#component_ideal').addClass('component_ideal').prepend($('.ideal-content')[0].innerHTML);
      }
    });
  },
  reducePackagingEnability: function reducePackagingEnability() {
    if ($('.data-checkout-stage').data('checkout-stage') === 'payment' && $('.js-reduce-package-selection').is(':checked')) {
      $('.js-reduce-package-selection').prop('disabled', 'disabled');
    } else {
      $('.js-reduce-package-selection').prop('disabled', false);
    }
  },
  validateExpressCheckout: function validateExpressCheckout() {
    $('body ').on('input change', function () {
      if ($('.express-checkout-form .cvv-number .dwfrm_billing_creditCardFields_securityCode :input').hasClass('input-value-present')) {
        $('#securityCodeInvalidMessage').removeClass('d-none');
        validateForm('.express-checkout-form');
      }
    });
  },
  billingAddress: function billingAddress() {
    $('select.billingCountry').on('change', function () {
      var selectedCountry = $(this).find(':selected').val();
      var $zipField = $(this).closest('form').find('input.billingZipCode');
      var regexText;

      try {
        regexText = JSON.parse($(this).closest('form').find('input.billingZipCode').attr('data-zipCodesRegexMapping'))[selectedCountry];
      } catch (e) {
        regexText = false;
      }

      if (regexText) {
        $zipField.attr('pattern', regexText);
        $zipField.prop('required', true);

        if ($zipField.val()) {
          var regex = new RegExp(regexText);

          if (regexText && !regex.test($zipField.val())) {
            $zipField.addClass('is-invalid');
            $zipField.removeClass('has-success');
            $zipField.siblings('.invalid-feedback').text($zipField.data('pattern-mismatch'));
          } else {
            $zipField.removeClass('is-invalid');
            $zipField.addClass('has-success');
            $zipField.siblings('.invalid-feedback').empty();
          }
        }
      } else {
        $zipField.prop('required', false);
        $zipField.removeAttr('pattern');
        $zipField.removeClass('is-invalid');
        $zipField.addClass('has-success');
        $zipField.siblings('.invalid-feedback').empty();
      }

      setTimeout(function () {
        if ($('.edq-global-intuitive-address-suggestions') && $('.edq-global-intuitive-address-suggestions').length > 1) {
          if ($('input[name="localCountry"]') && $('input[name="localCountry"]').val() != selectedCountry) {
            $('.edq-global-intuitive-address-suggestions').last().attr('data-checkout-billing-country', 'nonDefault');
          } else {
            $('.edq-global-intuitive-address-suggestions').last().attr('data-checkout-billing-country', 'default');
          }
        }
      }, 500);
    });
    $('#billingAddressSelector').on('change', function () {
      var billingForm = $('.billing-address-form');
      var selectedDataSet = $(this).find(':selected');

      if (selectedDataSet && selectedDataSet.length > 0) {
        selectedDataSet = selectedDataSet[0].dataset;
        billingForm.find('select[name*="country"').val(selectedDataSet.countryCode);
        billingForm.find('select[name*="country"').trigger('change');
        billingForm.find('input[name*="firstName"').val(selectedDataSet.firstName);
        billingForm.find('input[name*="firstName"').removeClass('is-invalid');
        billingForm.find('input[name*="firstName"').addClass('has-success');
        billingForm.find('input[name*="lastName"').val(selectedDataSet.lastName);
        billingForm.find('input[name*="address1"').val(selectedDataSet.address1);
        billingForm.find('input[name*="address2"').val(selectedDataSet.address2);
        billingForm.find('input[name*="city"').val(selectedDataSet.city);
        billingForm.find('input[name*="postal"').val(selectedDataSet.postalCode);
        billingForm.find('select[name*="stateCode"').val(selectedDataSet.stateCode);
        billingForm.find('input[name*="phone"').val(selectedDataSet.phone !== 'null' ? selectedDataSet.phone : '');
        $('fieldset.billing-address').find('input, select').removeClass('is-invalid');
      }
    });
  },
  showCustomization: function showCustomization() {
    $('body').on('click', '.hideOptionsControl', function (e) {
      $(e.currentTarget).find('.hideOptions').toggle();

      if ($(e.currentTarget).hasClass('opened')) {
        $(e.currentTarget).removeClass('opened');
      } else {
        $(e.currentTarget).addClass('opened');
      }
    });
  },
  backToPaymentSection: function backToPaymentSection() {
    if ($('[name="return-from-amazonpay"]').val() === 'true' || $('[name="return-from-paypal"]').val() === 'true') {
      $('.next-step-button button.place-order').removeAttr('disabled');
      scrollCustomAnimate($('.payment-summary .CO-progress-header'));
    }
  },
  editPaymentMethod: function editPaymentMethod() {
    $('body').on('click', '.klarna-payment-edit-button', function () {
      $('#isFromKlarna').val('');
      $('.klarna-payment-edit-button').addClass('d-none');
      adyenCheckout.methods.renderGenericComponent();
    });
  }
};
[customerHelpers, billingHelpers, shippingHelpers, addressHelpers, promoCode].forEach(function (library) {
  Object.keys(library).forEach(function (item) {
    if ((0, _typeof2["default"])(library[item]) === 'object') {
      _exports[item] = $.extend({}, _exports[item], library[item]);
    } else {
      _exports[item] = library[item];
    }
  });
});
module.exports = _exports;

/***/ }),

/***/ "./app_foundation_sfra/cartridge/client/default/js/checkout/customer.js":
/*!******************************************************************************!*\
  !*** ./app_foundation_sfra/cartridge/client/default/js/checkout/customer.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var base = __webpack_require__(/*! base/checkout/customer */ "./app_storefront_base/cartridge/client/default/js/checkout/customer.js");

var util = __webpack_require__(/*! foundation/js/util */ "./app_foundation/cartridge/js/util.js");

function isExistingCustomer() {
  $('.js-shipping-email').on('focusout', function (e) {
    e.preventDefault();
    var ele = $(this);

    if (ele.parents('.js-login-form').length) {
      var email = $(this).val();

      if (email != '' && $(this).hasClass('has-success')) {
        ele.parents('form').find('.login-message').addClass('hide');
        ele.parents('form').find('.register-message').addClass('hide');
        ele.parents('.form-group').find('.invalid-feedback').hide();
        var url = util.appendParamsToUrl(Urls.checkIfEmailExists, {
          //eslint-disable-line
          emailValue: email
        });
        $.ajax({
          url: url,
          type: 'GET',
          dataType: 'json',
          contentType: 'application/json',
          async: false,
          success: function success(data) {
            if (data.status && ele.parents('form').hasClass('registration')) {
              ele.parents('form').find('.login-message').removeClass('hide');
            } else if (!data.status && ele.parents('form').hasClass('login')) {
              ele.parents('form').find('.register-message').removeClass('hide');
            } else {
              ele.parents('form').find('.login-message').addClass('hide');
              ele.parents('form').find('.register-message').addClass('hide');
            }
          }
        });
      } else if (ele.hasClass('error')) {
        ele.parents('form').find('.login-message, .register-message').addClass('hide');
      }
    } else {
      var fasterCheckout = $('.js-email-exist-message');
      fasterCheckout.addClass('d-none');

      if (/^[\w.%+-]+@[\w.-]+\.[\w]{2,6}$/.test(ele.val())) {
        $.ajax({
          url: ele.data('url'),
          type: 'post',
          data: ele.serialize(),
          success: function success(data) {
            if (data.isExistingUser) {
              fasterCheckout.removeClass('d-none');
            }
          }
        });
      }
    }
  });
}

base.isExistingCustomer = isExistingCustomer;
module.exports = base;

/***/ }),

/***/ "./app_foundation_sfra/cartridge/client/default/js/checkout/promoCode.js":
/*!*******************************************************************************!*\
  !*** ./app_foundation_sfra/cartridge/client/default/js/checkout/promoCode.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var dtm = __webpack_require__(/*! foundation/js/dtm */ "./app_foundation/cartridge/js/dtm.js");
/**
 * appends params to a url
 * @param {string} url - Original url
 * @param {object} params - Parameters to append
 * @returns {string} result url with appended parameters
 */


function appendToUrl(url, params) {
  var newUrl = url;
  newUrl += (newUrl.indexOf('?') !== -1 ? '&' : '?') + Object.keys(params).map(function (key) {
    return key + '=' + encodeURIComponent(params[key]);
  }).join('&');
  return newUrl;
}

function promocodeSubmit() {
  $('#checkout-main .promo-code-form').submit(function (e) {
    e.preventDefault();
    $.spinner().start();
    $('.coupon-missing-error').hide();
    $('.coupon-error-message').empty();

    if (!$('.coupon-code-field:visible').val()) {
      $('.promo-code-form .form-control').addClass('is-invalid');
      $('.promo-code-form .form-control').attr('aria-describedby', 'missingCouponCode');
      $('.coupon-missing-error').show();
      $.spinner().stop();
      return false;
    }

    var $form = $('.promo-code-form:visible');
    $('.promo-code-form .form-control').removeClass('is-invalid');
    $('.coupon-error-message').empty();
    $('body').trigger('promotion:beforeUpdate');
    $.ajax({
      url: $form.attr('action'),
      type: 'GET',
      dataType: 'json',
      data: $form.serialize() + '&checkout=true',
      success: function success(data) {
        if (data.error) {
          $('.promo-code-form .form-control').addClass('is-invalid');
          $('.promo-code-form .form-control').attr('aria-describedby', 'invalidCouponCode');
          $('.coupon-error-message').empty().append(data.errorMessage);
          $('body').trigger('promotion:error', data);
        } else {
          $('.coupons-and-promos').empty().append(data.order.totals.discountsHtml);
          $('body').trigger('checkout:updateCheckoutView', data);
          $('body').trigger('promotion:success', data);
        }

        if (typeof window.SitePreferences.ANALYTICS_ENABLED != 'undefined' && window.SitePreferences.ANALYTICS_ENABLED) {
          dtm.promoApply($('.coupon-code-field').val(), typeof data.error != 'undefined');
        }

        $('.coupon-code-field').val('');
        $.spinner().stop();
      },
      error: function error(err) {
        $('body').trigger('promotion:error', err);

        if (err.responseJSON.redirectUrl) {
          window.location.href = err.responseJSON.redirectUrl;
        } else {
          $.spinner().stop();
        }
      }
    });
    return false;
  });
}

function removePromoCode() {
  $('body').on('click', '.remove-coupon', function (e) {
    e.preventDefault();
    var couponCode = $(this).data('code');
    var uuid = $(this).data('uuid');
    var $deleteConfirmBtn = $('.delete-coupon-confirmation-btn');
    var $productToRemoveSpan = $('.coupon-to-remove');
    $deleteConfirmBtn.data('uuid', uuid);
    $deleteConfirmBtn.data('code', couponCode);
    $productToRemoveSpan.empty().append(couponCode);
  });
  $('body').on('click', '.delete-coupon-confirmation-btn', function (e) {
    e.preventDefault();
    var url = $(this).data('action');
    var uuid = $(this).data('uuid');
    var couponCode = $(this).data('code');
    var urlParams = {
      code: couponCode,
      uuid: uuid,
      checkout: true
    };
    url = appendToUrl(url, urlParams);
    $('body > .modal-backdrop').remove();
    $.spinner().start();
    $('body').trigger('promotion:beforeUpdate');
    $.ajax({
      url: url,
      type: 'get',
      dataType: 'json',
      success: function success(data) {
        $('.coupon-uuid-' + uuid).remove();
        $('body').trigger('checkout:updateCheckoutView', data);
        $('body').trigger('promotion:success', data);
        $.spinner().stop();
      },
      error: function error(err) {
        $('body').trigger('promotion:error', err);
        $.spinner().stop();
      }
    });
  });
  $('body').on('click', '.optional-promo', function (e) {
    e.preventDefault();
    $(this).toggleClass('active');
    $('.coupon-missing-error').hide();
    $('.coupon-error-message').empty();
    $('.promo-code-form').toggle();
  });
}

module.exports = {
  promocodeSubmit: promocodeSubmit,
  removePromoCode: removePromoCode
};

/***/ }),

/***/ "./app_foundation_sfra/cartridge/client/default/js/checkout/shipping.js":
/*!******************************************************************************!*\
  !*** ./app_foundation_sfra/cartridge/client/default/js/checkout/shipping.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));

var base = __webpack_require__(/*! base/checkout/shipping */ "./app_storefront_base/cartridge/client/default/js/checkout/shipping.js");

var addressHelpers = __webpack_require__(/*! ./address */ "./app_foundation_sfra/cartridge/client/default/js/checkout/address.js");

var scrollAnimate = __webpack_require__(/*! base/components/scrollAnimate */ "./app_storefront_base/cartridge/client/default/js/components/scrollAnimate.js");

var formHelpers = __webpack_require__(/*! base/checkout/formErrors */ "./app_storefront_base/cartridge/client/default/js/checkout/formErrors.js");

var swiperSlide = __webpack_require__(/*! ../components/swiperInit */ "./app_foundation_sfra/cartridge/client/default/js/components/swiperInit.js");

var progress = __webpack_require__(/*! foundation/js/progress */ "./app_foundation/cartridge/js/progress.js");
/**
 * updates the shipping method radio buttons within shipping forms
 * @param {object} shipping - the shipping (shipment model) model
 * @param {object} data - response object
 */


function updateShippingMethods(shipping, data) {
  var uuidEl = $('input[value=' + shipping.UUID + ']');

  if (uuidEl && uuidEl.length > 0) {
    $.each(uuidEl, function (shipmentIndex, el) {
      var form = el.form;

      if (!form) {
        return;
      }

      var $shippingMethodList = $('[data-uuid="' + shipping.UUID + '"] .shipping-method-list');
      var disableSDDeliveryOption = $('.shipping-method-section').data('same-day-limit-exceeded');

      if ($shippingMethodList && $shippingMethodList.length > 0) {
        $shippingMethodList.empty();
        var shippingMethods = [];
        var sameDayShipping = '';
        var otherShippingAdded = false;

        if (data.order.sameDaySelected) {
          $.each(data.order.shipping, function () {
            if (this.sameDayShipment) {
              sameDayShipping = this.applicableShippingMethods;
            } else if (!otherShippingAdded && !this.shipmentType) {
              $.merge(shippingMethods, this.applicableShippingMethods);
              otherShippingAdded = true;
            }
          });
          $.merge(shippingMethods, sameDayShipping);
        } else {
          shippingMethods = shipping.applicableShippingMethods;
        }

        var selected = shipping.selectedShippingMethod || {}; //
        // Create the new rows for each shipping method
        //

        /* eslint-disable complexity */

        $.each(shippingMethods, function (methodIndex, shippingMethod) {
          var tmpl = $('#shipping-method-template').clone();

          if (shippingMethod.ID === selected.ID) {
            $('.shipping-options-container', tmpl).addClass('checked-option');
          } // set input


          if ((shippingMethod.ID === 'SameDay' || shippingMethod.ID === 'NextDay') && disableSDDeliveryOption) {
            $('input', tmpl).prop('id', 'shippingMethod-' + shippingMethod.ID + '-' + shipping.UUID).prop('value', shippingMethod.ID).attr('checked', shippingMethod.ID === selected.ID).attr('disabled', 'disabled');
            $('input', tmpl).closest('.shipping-options-container').addClass('sameday-delivery-disabled');
          } else {
            $('input', tmpl).prop('id', 'shippingMethod-' + shippingMethod.ID + '-' + shipping.UUID).prop('value', shippingMethod.ID).attr('checked', shippingMethod.ID === selected.ID).removeAttr('disabled');
            $('input', tmpl).closest('.shipping-options-container').removeClass('sameday-delivery-disabled');
          }

          $('label', tmpl).prop('for', 'shippingMethod-' + shippingMethod.ID + '-' + shipping.UUID); // set shipping method name

          $('.display-name', tmpl).text(shippingMethod.displayName.toLowerCase()); // set or hide arrival time

          if (shippingMethod.estimatedArrivalTime && shipping.shipmentType !== 'WG') {
            $('.arrival-time', tmpl).text(shippingMethod.estimatedArrivalTime).show();
          } else if (shipping.shipmentType == 'WG' && data && data.farthestEDD) {
            $('.arrival-time', tmpl).text(data.farthestEDD.farthestArrivalDate).show();
          } // set shipping cost


          if (shippingMethod.shippingCost != 'N/A' && shippingMethod.shippingCost != 0) {
            $('.shipping-cost', tmpl).text(shippingMethod.shippingCost);
          } else {
            $('.shipping-cost', tmpl).text(shippingMethod.freeMessage);
          } // set S2S header message


          if (shipping.shipmentType === 'S2S' && shipping.s2sMessage && shipping.s2sMessage !== null) {
            var s2sMsg = $('h3.select-shipping-method-pickup.S2S-delivery').data('instore-msg');
            $('h3.select-shipping-method-pickup.S2S-delivery').text(s2sMsg + ' ' + shipping.s2sMessage);
          }

          if (shippingMethod.ID === 'SameDay' || shippingMethod.ID === 'NextDay') {
            var tooltipcontent = $('.sameday-tooltip-content');
            var estimatedArrivalMessage = shippingMethod.estimatedArrivalTime ? shippingMethod.estimatedArrivalTime : '';
            $('.arrival-time', tmpl).html(estimatedArrivalMessage + tooltipcontent.html()).show();
          } // show login message


          if ($('.sign-in-message-wrapper', tmpl).length && shippingMethod.freeShippingMethodLoginMsg && shippingMethod.shippingCost !== 'N/A' && shippingMethod.shippingCost !== 0) {
            $('.sign-in-message-wrapper', tmpl).append(shippingMethod.freeShippingMethodLoginMsg);
          }

          $shippingMethodList.append(tmpl.html());

          if (shipping.shipmentType == 'WG' && data && data.farthestEDD) {
            $('.shipping-method-option .info-icon-wg').removeClass('d-none');
          }
        });
      }
    });
  }

  $('body').trigger('shipping:updateShippingMethods', {
    shipping: shipping
  });
}
/**
  * Create an alert to display the error message
  * @param {object} message - Error message to display
  */


function createErrorNotification(message) {
  var errorHtml = '<div class="alert alert-danger alert-dismissible valid-cart-error ' + 'fade show" role="alert">' + '<button type="button" class="close" data-dismiss="alert" aria-label="Close">' + '<span aria-hidden="true">&times;</span>' + '</button>' + message + '</div>';
  $('.shipping-error').append(errorHtml);
  scrollAnimate($('.shipping-error'));
}
/**
 *
 * @param {object} address - Suggested address
 * @param {object} form - current form
 */


function fillAddressSuggestion(address, form) {
  $('.btn-show-details').trigger('click');
  var url = $('#vertex-suggestions').data('suggest');
  $.ajax({
    url: url,
    type: 'post',
    dataType: 'json'
  });
  $(form).find('input[name$=_address1]').val(address.address1);

  if (address.address2) {
    $(form).find('input[name$=_address2]').val(address.address2);
  }

  $(form).find('input[name$=_city]').val(address.city);
  $(form).find('input[name$=_postalCode]').val(address.postalCode);
  $(form).find('select[name$=_stateCode],input[name$=_stateCode]').val(address.stateCode);
  $(form).find('select[name$=_country]').val(address.countryCode.toUpperCase());
}
/**
 * @description clears error container
 */


function clearVertexErrors() {
  $('.vertexError').addClass('d-none');
  $('.vertexSuggestions').addClass('d-none');
}
/**
 * @description view Vertex error container
 *
 * @param {object} data - response data
 * @param {string} vertexErrorBlock - vertexErrorBlock
 * @param {string} vertexSuggestionBlock - vertexSuggestionBlock
 * @param {object} vertexAddresses - vertexAddresses container
 */


function showVertexErrors(data, vertexErrorBlock, vertexSuggestionBlock, vertexAddresses) {
  if (!data.vertexAddressSuggestions) {
    vertexErrorBlock.removeClass('d-none');
  } else {
    vertexSuggestionBlock.removeClass('d-none');
    $(vertexAddresses).html('');
    data.vertexAddressSuggestions.forEach(function (item, i) {
      var aid = item.UUID ? item.ID : item.key;

      if (i < 2) {
        $(vertexAddresses).append($('<option></option>').attr('value', aid).text('(' + aid + ') ' + item.address1 + ' ' + item.city + ' ' + item.stateCode + ' ' + item.postalCode).attr('data-address', JSON.stringify(item)));
      }
    });
  }
}
/**
 * Hide and show to appropriate elements to show the multi ship shipment cards in the view mode
 * @param {jQuery} element - The shipping content
 */


function viewMultishipAddress(element) {
  element.find('.view-address-block').removeClass('d-none');
  element.find('.btn-edit-multi-ship').removeClass('d-none');
  element.find('.shipping-address').addClass('d-none');
  element.find('.btn-save-multi-ship.save-shipment').addClass('d-none');
  element.find('.btn-enter-multi-ship').addClass('d-none');
  element.find('.multi-ship-address-actions').addClass('d-none');
}
/**
 * Validate whole Shipping form, to check if form is invalid or valid.Flag to indicate if form is valid then make button enabled
 * @param {string=} id - form id's name.
 */


function validateShippingForm(id) {
  var valid = $(id)[0].checkValidity();

  if (valid) {
    $(id).closest('.data-checkout-stage').find('button.submit-shipping').prop('disabled', false);
  } else {
    $(id).closest('.data-checkout-stage').find('button.submit-shipping').prop('disabled', 'disabled');
  }
}
/**
 * Update list of available shipping methods whenever user modifies shipping address details.
 * @param {jQuery} $shippingForm - current shipping form
 */


function updateShippingMethodList($shippingForm) {
  // delay for autocomplete!
  setTimeout(function () {
    var $shippingMethodList = $('.shipping-method-section');
    var urlParams = addressHelpers.methods.getAddressFieldsFromUI($shippingForm);
    var shipmentUUID = $('.shipment-shipping-method-list').data('uuid');
    var url = $shippingMethodList.data('actionUrl');
    urlParams.shipmentUUID = shipmentUUID;
    $shippingMethodList.spinner().start();
    $.ajax({
      url: url,
      type: 'post',
      dataType: 'json',
      data: urlParams,
      success: function success(data) {
        if (data.error) {
          window.location.href = data.redirectUrl;
        } else {
          $('body').trigger('checkout:updateCheckoutView', {
            order: data.order,
            customer: data.customer,
            options: {
              keepOpen: true
            }
          });

          if ($('.shipping-method-desc').length > 0 && data.order.shipping[0].ShippingMethodEdd != '' && data.order.shipping[0].ShippingMethodEdd !== null) {
            // && !SitePreferences.MONETATE_SHIPPING_DELIVERY_DATE
            $('.shipping-method-desc').html(data.order.shipping[0].ShippingMethodEdd);
          } else {
            $('.shipping-method-desc').html('');
          }

          var isValid = true;
          $('form#dwfrm_shipping input, form#dwfrm_shipping select').each(function () {
            var shippingCountry = $(this).closest('form').find('.shippingCountry').val();
            var isValidPhoneNumber = true;
            var phoneNumber = $(this).val().replace(/[()-]/g, '');

            if ($(this).hasClass('shippingPhoneNumber') && (phoneNumber.length > 10 || phoneNumber.length < 10)) {
              isValidPhoneNumber = false;
            }

            if ($(this).hasClass('shippingPhoneNumber')) {
              $('.shippingPhoneNumber').val($('.shippingPhoneNumber').val().replace(/^(\d{3})(\d{3})(\d+)$/, '($1)$2-$3'));
            }

            if ($(this).val() && this.checkValidity && !this.checkValidity() || !isValidPhoneNumber && shippingCountry == 'US') {
              $(this).addClass('is-invalid');
              $(this).removeClass('has-success');

              if ($(this).hasClass('shippingPhoneNumber') && shippingCountry == 'US') {
                $(this).closest('.form-group').find('.invalid-feedback').html($(this).data('pattern-mismatch'));
                isValid = false;
              }
            } else {
              $(this).removeClass('is-invalid');

              if ($(this).val().length > 0) {
                $(this).addClass('has-success');
              } else {
                $(this).removeClass('has-success');
              } // $(this).closest('div.form-group').find('.invalid-feedback').text('');

            }
          });
          validateShippingForm('form#dwfrm_shipping');

          if (!isValid) {
            $('form#dwfrm_shipping').closest('.data-checkout-stage').find('button.submit-shipping').prop('disabled', 'disabled');
          }

          $shippingMethodList.spinner().stop();
        }
      }
    });
  }, 300);
}
/**
 * Update the sameday message after ajax updated
 * @param {object} data - response object
 */


function updateSamedayMessage(data) {
  var $samedayFreeMessage = $('.sameday-free-message');
  var $samedayMessageBlock = $('.sameday-message-block');

  if (typeof data.order.isSamedayLimitExceed !== 'undefined' && data.order.isSamedayLimitExceed) {
    if ($('[id^=shippingMethod-SameDay], [id^=shippingMethod-NextDay]').length > 0) {
      $('[id^=shippingMethod-SameDay], [id^=shippingMethod-NextDay]').parent().addClass('sameday-delivery-disabled');
      $('[id^=shippingMethod-SameDay], [id^=shippingMethod-NextDay]').prop('disabled', true);
    }

    if ($('.sameday-limit-exceed').length == 0) {
      $('.shipping-method-list').after('<div class="sameday-limit-exceed p-txt-small sameday-alert-message"> ' + data.order.sameDayLimitMessage + '</div>');
    } else {
      $('.sameday-limit-exceed').removeClass('d-none');
    }

    $samedayFreeMessage.addClass('d-none');
  } else if (typeof data.order.sameDaySelected !== 'undefined' && data.order.sameDaySelected) {
    if ($('[id^=shippingMethod-SameDay], [id^=shippingMethod-NextDay]').length > 0) {
      $('[id^=shippingMethod-SameDay], [id^=shippingMethod-NextDay]').parent().removeClass('sameday-delivery-disabled');
      $('[id^=shippingMethod-SameDay], [id^=shippingMethod-NextDay]').prop('disabled', false);
    }

    if ($('.sameday-limit-exceed').length > 0) {
      $('.sameday-limit-exceed').addClass('d-none');
    }

    $samedayMessageBlock.removeClass('d-none');

    if (typeof data.order.sdNotApplicableProductsMessage !== 'undefined' && data.order.sdNotApplicableProductsMessage !== '' && $samedayFreeMessage.length > 0) {
      $samedayFreeMessage.html('<div class="p-txt-small sameday-alert-message">' + data.order.sdNotApplicableProductsMessage + '</div>').removeClass('d-none');
    } else {
      $samedayFreeMessage.addClass('d-none');
    }
  } else {
    if ($('[id^=shippingMethod-SameDay], [id^=shippingMethod-NextDay]').length > 0) {
      $('[id^=shippingMethod-SameDay], [id^=shippingMethod-NextDay]').parent().removeClass('sameday-delivery-disabled');
      $('[id^=shippingMethod-SameDay], [id^=shippingMethod-NextDay]').prop('disabled', false);
    }

    if ($('.sameday-limit-exceed').length > 0) {
      $('.sameday-limit-exceed').addClass('d-none');
    }

    if ($samedayFreeMessage.length > 0) {
      $samedayFreeMessage.addClass('d-none');
    }

    if ($samedayMessageBlock.length > 0) {
      $samedayMessageBlock.addClass('d-none');
      var isSamedaySMSOptIn = $('.js-samedaySMSOptIn-selection').is(':checked');

      if (isSamedaySMSOptIn) {
        $('.js-samedaySMSOptIn-selection').trigger('click');
      }
    }
  }
}
/**
 * Does Ajax call to select shipping method
 * @param {string} url - string representation of endpoint URL
 * @param {object} urlParams - url params
 * @param {object} el - element that triggered this call
 */


function selectShippingMethodAjax(url, urlParams, el) {
  $.spinner().start();
  $('body').trigger('checkout:beforeShippingMethodSelected');
  $.ajax({
    url: url,
    type: 'post',
    dataType: 'json',
    data: urlParams
  }).done(function (data) {
    if (data.error) {
      window.location.href = data.redirectUrl;
    } else {
      $('body').trigger('checkout:updateCheckoutView', {
        order: data.order,
        customer: data.customer,
        options: {
          keepOpen: true
        },
        urlParams: urlParams,
        skipShippingUpdate: true
      });
      $('body').trigger('checkout:postUpdateCheckoutView', {
        el: el
      });
    }

    if (data.giftCardsRemoved) {
      $('.order-gift-total').empty();
      $('.applied-gift-cards').empty();
      $('.gift-discount').addClass('hide-gift-discount');
      window.isGCApplied = false;
      $('.payment-form-fields').show();
      $('.payment-form-fields input').removeAttr('disabled');

      if ($('.express-checkout-form')) {
        $('.express-checkout-form input').removeAttr('disabled');
      }

      $('input[name$="paymentMethod"]').val('AdyenComponent');
      $('.payment-gift-card').show();
      $('.gift-card-limit-msg').remove();

      if (data.numberOfAppliedGiftCards === 0) {
        $('#paymentMethodsList .klarna').removeClass('d-none');
      }
    }

    $('body').trigger('checkout:shippingMethodSelected', data);

    if ($('.shipping-method-desc').length > 0 && data.order.shipping[0].ShippingMethodEdd != '' && data.order.shipping[0].ShippingMethodEdd !== null) {
      // && !SitePreferences.MONETATE_SHIPPING_DELIVERY_DATE
      $('.shipping-method-desc').html(data.order.shipping[0].ShippingMethodEdd);
    } else {
      $('.shipping-method-desc').html('');
    }

    updateSamedayMessage(data);
    $.spinner().stop();
  }).fail(function () {
    $.spinner().stop();
  });
}
/**
 * updates the shipping address form values within split shipment modal
 * @param {object} shipping - the shipping (shipment model) model
 * @param {object} splitShipmentSummary - the shipping (shipment model) model
 */


function updateSplitShipmentModal(shipping, splitShipmentSummary) {
  var parentSelector = $('#shipping-split-shipment-template').find('.address-details');
  var address = $.extend({}, shipping.shippingAddress);

  if (address) {
    $.each(address, function (attr) {
      var val = address[attr];

      if (attr === 'countryCode') {
        $('.' + attr, parentSelector).text(val.displayValue || '');
      } else {
        $('.' + attr, parentSelector).text(val || '');
      }
    });
  }

  $('#shipping-split-shipment-template').find('.prod-details-section').html(splitShipmentSummary);
}
/**
 * updates the shipping address form values within shipping forms
 * @param {object} shipping - the shipping (shipment model) model
 */


function updateShippingAddressFormValues(shipping) {
  var addressObject = $.extend({}, shipping.shippingAddress);

  if (!addressObject) {
    addressObject = {
      firstName: null,
      lastName: null,
      address1: null,
      address2: null,
      city: null,
      postalCode: null,
      stateCode: null,
      countryCode: null,
      phone: null
    };
  }

  addressObject.isGift = shipping.isGift;
  addressObject.giftMessage = shipping.giftMessage;
  $('input[value=' + shipping.UUID + ']').each(function (formIndex, el) {
    var form = el.form;

    if (!form) {
      return;
    }

    var countryCode = addressObject.countryCode;
    $('input[name$=_firstName]', form).val(addressObject.firstName);
    $('input[name$=_lastName]', form).val(addressObject.lastName);
    $('input[name$=_address1]', form).val(addressObject.address1);
    $('input[name$=_address2]', form).val(addressObject.address2);
    $('input[name$=_city]', form).val(addressObject.city);
    $('input[name$=_postalCode]', form).val(addressObject.postalCode);
    $('select[name$=_stateCode],input[name$=_stateCode]', form).val(addressObject.stateCode);

    if (countryCode && (0, _typeof2["default"])(countryCode) === 'object') {
      $('select[name$=_country]', form).val(addressObject.countryCode.value);
    } else if (countryCode) {
      $('select[name$=_country]', form).val(countryCode);
    }

    $('input[name$=_phone]', form).val(addressObject.phone);
    $('input[name$="_experianValidated"]', form).val(addressObject.experianValidated);
    $('input[name$=_isGift]', form).prop('checked', addressObject.isGift);
    $('textarea[name$=_giftMessage]', form).val(addressObject.isGift && addressObject.giftMessage ? addressObject.giftMessage : '');
  });
  $('body').trigger('shipping:updateShippingAddressFormValues', {
    shipping: shipping
  });
}
/**
 * updates the order shipping summary for an order shipment model
 * @param {object} shipping - the shipping (shipment model) model
 */


function updateShippingMethodsSummaryInformation(shipping) {
  $('[data-shipping-method-summary=' + shipping.UUID + ']').each(function () {
    var selectedShippingMethod = shipping.selectedShippingMethod;

    if (!selectedShippingMethod) {
      return;
    }

    $(this).find('.shipping-method-title')[0].innerHTML = selectedShippingMethod.displayName.toLowerCase();
    $(this).find('.shipping-method-price')[0].innerHTML = selectedShippingMethod.shippingCost;
    var estimatedArrivalTimeDom = $(this).find('.shipping-method-arrival-time span');

    if (estimatedArrivalTimeDom && estimatedArrivalTimeDom.length > 0 && selectedShippingMethod.ID !== 'WG_DELIVERY' && selectedShippingMethod.ID !== 'Complimentary_Delivery') {
      shipping.applicableShippingMethods.forEach(function (shippingMethod) {
        if (selectedShippingMethod.ID === shippingMethod.ID && shippingMethod.estimatedArrivalTime) {
          estimatedArrivalTimeDom[0].innerHTML = shippingMethod.estimatedArrivalTime;
        }
      });
    }
  });

  if ($('[data-shipping-method-summary=' + shipping.UUID + ']').length === 0) {
    var selectedShippingMethod = shipping.selectedShippingMethod;
    var shippingMethodSummaryClone = jQuery.clone($('.shipping-method-summary-list')[0].firstElementChild);
    shippingMethodSummaryClone.dataset.shippingMethodSummary = shipping.UUID;
    shippingMethodSummaryClone.querySelector('.shipping-method-title').innerHTML = selectedShippingMethod.displayName.toLowerCase();
    shippingMethodSummaryClone.querySelector('.shipping-method-price').innerHTML = selectedShippingMethod.shippingCost;
    var estimatedArrivalTime = '';

    if (selectedShippingMethod.ID !== 'WG_DELIVERY' && selectedShippingMethod.ID !== 'Complimentary_Delivery') {
      shipping.applicableShippingMethods.forEach(function (shippingMethod) {
        if (selectedShippingMethod.ID === shippingMethod.ID && shippingMethod.estimatedArrivalTime) {
          estimatedArrivalTime = shippingMethod.estimatedArrivalTime;
        }
      });
    }

    shippingMethodSummaryClone.querySelector('.shipping-method-arrival-time span').innerHTML = estimatedArrivalTime;
    $('.shipping-method-summary-list')[0].prepend(shippingMethodSummaryClone);
  }
}
/**
 * Update the shipping UI for a single shipping info (shipment model)
 * @param {object} shipping - the shipping (shipment model) model
 * @param {object} order - the order/basket model
 * @param {object} customer - the customer model
 * @param {object} [options] - options for updating PLI summary info
 * @param {object} [options.keepOpen] - if true, prevent changing PLI view mode to 'view'
 * @param {object} data - response object
 */


function updateShippingInformation(shipping, order, customer, options, data) {
  // First copy over shipmentUUIDs from response, to each PLI form
  order.shipping.forEach(function (aShipping) {
    aShipping.productLineItems.items.forEach(function (productLineItem) {
      base.methods.updateProductLineItemShipmentUUIDs(productLineItem, aShipping);
    });
  }); // Now update shipping information, based on those associations

  updateShippingMethods(shipping, data);

  if (shipping.shipmentType !== 'S2S' && shipping.shipmentType !== 'instore') {
    updateShippingAddressFormValues(shipping);
  }

  base.methods.updateShippingSummaryInformation(shipping, order);

  if (order.splitShipmentShow) {
    $('.multiple-shipment-div').removeClass('hide').css('display', 'block');
    updateSplitShipmentModal(shipping, order.splitShipmentSummary);
  } else {
    $('.multiple-shipment-div').addClass('hide').css('display', 'none');
  } // And update the PLI-based summary information as well


  shipping.productLineItems.items.forEach(function (productLineItem) {
    base.methods.updateShippingAddressSelector(productLineItem, shipping, order, customer);
    base.methods.updatePLIShippingSummaryInformation(productLineItem, shipping, order, options);
  }); // Update Shipping Method Selected List

  if (shipping.shipmentType !== 'S2S' && shipping.shipmentType !== 'instore') {
    $('[data-uuid="' + shipping.UUID + '"] .shipping-method-list .shipping-options-container').each(function () {
      $(this).removeClass('checked-option');

      if (shipping.selectedShippingMethod && shipping.selectedShippingMethod.ID === $(this).find('input').val()) {
        $(this).addClass('checked-option');
      }
    });
  }

  updateSamedayMessage(data);
  $('body').trigger('shipping:updateShippingInformation', {
    order: order,
    shipping: shipping,
    customer: customer,
    options: options
  });
}
/**
 * Update the checkout state (single vs. multi-ship)
 * @param {object} order - checkout model to use as basis of new truth
 */


function updateMultiShipInformation(order) {
  var $checkoutMain = $('#checkout-main');
  var $checkbox = $('[name=usingMultiShipping]');
  var $submitShippingBtn = $('button.submit-shipping');
  $('.shipping-error .alert-danger').remove();

  if (order.usingMultiShipping) {
    $checkoutMain.addClass('multi-ship');
    $checkbox.prop('checked', true);
  } else {
    $checkoutMain.removeClass('multi-ship');
    $checkbox.prop('checked', null);
    $('.single-shipping form#dwfrm_shipping input:required, .single-shipping form#dwfrm_shipping select:required').each(function () {
      if ($(this).val() == '' || $(this).hasClass('is-invalid')) {
        $submitShippingBtn.prop('disabled', 'disabled');
        return false;
      }

      $submitShippingBtn.prop('disabled', false);
      return true;
    });
  }

  $('body').trigger('shipping:updateMultiShipInformation', {
    order: order
  });
}
/**
 * Return Experian ajax url and return Experian on/off flag
 * @param {object} $form - Jquery shipping form object
 * @returns {object} - Return Experian ajax url and return Experian on/off flag
 */


function addressValidation($form) {
  var isEnableExperian = $('.js-address-validation-modal').data('enableexperian');
  var params = {
    firstName: $form.find('input[name$="_firstName"]').val(),
    lastName: $form.find('input[name$="_lastName"]').val(),
    address1: $form.find('input[name$="_address1"]').val(),
    address2: $form.find('input[name$="_address2"]').val(),
    countryCode: $form.find('select[name$="_country"]').val(),
    stateCode: $form.find('select[name$="_stateCode"]').val() || $form.find('input[name$="_stateCode"]').val(),
    postalCode: $form.find('input[name$="_postalCode"]').val(),
    city: $form.find('input[name$="_city"]').val(),
    phone: $form.find('input[name$="_phone"]').val(),
    experianSuggest: $form.find('input[name$="_experianSuggest"]').val(),
    experianValidated: $form.find('input[name$="_experianValidated"]').val()
  };
  var urlValue = $('#checkout-main').data('address-validateurl');
  return {
    enableExperian: isEnableExperian,
    url: urlValue,
    urlData: {
      params: JSON.stringify(params)
    },
    experianSuggest: params.experianSuggest,
    experianValidated: params.experianValidated
  };
}
/**
 * Call function after Experian ajax called when no result or suggestion address return.
 * @param {object} $form - Jquery shipping form object
 * @param {object} $editAddrForm - Jquery address validation modal form object
 */


function addressModal($form, $editAddrForm) {
  var $addressValidationModal = $('.js-address-validation-modal');

  function setFormValues(address) {
    if (address.firstName) {
      $form.find('input[name$="_firstName"]').val(address.firstName);
    }

    if (address.lastName) {
      $form.find('input[name$="_lastName"]').val(address.lastName);
    }

    if (address.address1) {
      $form.find('input[name$="_address1"]').val(address.address1);
    }

    if (address.address2) {
      $form.find('input[name$="_address2"]').val(address.address2);
    }

    if (address.stateCode) {
      if ($form.find('select[id$="_stateCode"]') && $form.find('select[id$="_stateCode"]').length > 0) {
        $form.find('select[id$="_stateCode"]').val(address.stateCode);
      } else {
        $form.find('input[name$="stateCode"]').val(address.stateCode);
      }
    }

    if (address.state) {
      $form.find('select[id$="_state"]').val(address.state);
    }

    if (address.city) {
      $form.find('input[name$="_city"]').val(address.city);
    }

    if (address.postalCode) {
      $form.find('input[name$="_postalCode"]').val(address.postalCode);
    }

    if (address.country) {
      $form.find('input[name$="_country"]').val(address.country);
    }

    if (address.stateOptionLabel) {
      $form.find('select[id$="_state"]').find('option').each(function (index, element) {
        if (element.value == 'AE') {
          $(element).prop('selected', element.text == address.stateOptionLabel);
        }
      });
    }
  }

  function closeDialog() {
    $addressValidationModal.find('button.close').trigger('click');
  }

  function useSuggested() {
    var card = $editAddrForm.find('.miniaddress.suggestion');
    var address = card.data('address');
    setFormValues(address);
    closeDialog(); // Bound as event handler below.

    $form.find('select[id$="_state"]').trigger('change');
    $addressValidationModal.data('enableexperian', false);
    $('button.submit-shipping').trigger('click');
    $addressValidationModal.data('enableexperian', true);
  }

  function skipSuggested() {
    $addressValidationModal.data('enableexperian', false);
    $('button.submit-shipping').trigger('click');
    closeDialog();
    $addressValidationModal.data('enableexperian', true);
  }

  function showEdit() {
    closeDialog();
    $form.find('input[name$="_address1"]').focus();
    scrollAnimate($('.shipping-info-holder .co-page-subHead'));
  }

  $editAddrForm.off('click', '.js-dialog-confirm-button').on('click', '.js-dialog-confirm-button', useSuggested);
  $editAddrForm.off('click', '.js-dialog-skip-button').on('click', '.js-dialog-skip-button', skipSuggested);
  $editAddrForm.off('click', '.js-edit-button').on('click', '.js-edit-button', showEdit);
  $('.js-address-validation-modal').on('hidden.bs.modal', function () {
    var btn = $('button.submit-shipping');
    btn.removeClass('change-text-color');
    progress.hide(btn);
  });
}
/**
 * Handle response from the server for valid or invalid form fields.
 * @param {object} defer - the deferred object which will resolve on success or reject.
 * @param {object} data - the response data with the invalid form fields or
 *  valid model data.
 */


function shippingFormResponse(defer, data) {
  var isMultiShip = $('#checkout-main').hasClass('multi-ship');
  var formSelector = isMultiShip ? '.multi-shipping .active form' : '.single-shipping form'; // highlight fields with errors

  if (data.error) {
    if (data.fieldErrors.length) {
      data.fieldErrors.forEach(function (error) {
        if (Object.keys(error).length) {
          formHelpers.loadFormErrors(formSelector, error);
        }
      });
      defer.reject(data);
    }

    if (data.serverErrors && data.serverErrors.length) {
      $.each(data.serverErrors, function (index, element) {
        base.methods.createErrorNotification(element);
      });
      defer.reject(data);
    }

    if (data.cartError) {
      window.location.href = data.redirectUrl;
      defer.reject();
    }
  } else if (data.vertexError) {
    showVertexErrors(data, $('.vertexError'), $('.vertexSuggestions'), $('#vertex-suggestion'));
  } else {
    // Populate the Address Summary
    $('body').trigger('checkout:updateCheckoutView', {
      order: data.order,
      customer: data.customer,
      farthestEDD: data.farthestEDD
    });
    defer.resolve(data);
  }
}

module.exports = {
  methods: {
    updateShippingAddressSelector: base.methods.updateShippingAddressSelector,
    updateShippingAddressFormValues: updateShippingAddressFormValues,
    updateShippingMethods: updateShippingMethods,
    updateShippingSummaryInformation: base.methods.updateShippingSummaryInformation,
    updatePLIShippingSummaryInformation: base.methods.updatePLIShippingSummaryInformation,
    updateProductLineItemShipmentUUIDs: base.methods.updateProductLineItemShipmentUUIDs,
    updateShippingInformation: updateShippingInformation,
    updateMultiShipInformation: updateMultiShipInformation,
    shippingFormResponse: shippingFormResponse,
    createNewShipment: base.methods.createNewShipment,
    selectShippingMethodAjax: selectShippingMethodAjax,
    updateShippingMethodList: updateShippingMethodList,
    addressValidation: addressValidation,
    addressModal: addressModal,
    clearShippingForms: base.methods.clearShippingForms,
    editMultiShipAddress: base.methods.editMultiShipAddress,
    editOrEnterMultiShipInfo: base.methods.editOrEnterMultiShipInfo,
    createErrorNotification: createErrorNotification,
    viewMultishipAddress: viewMultishipAddress,
    updateShippingMethodsSummaryInformation: updateShippingMethodsSummaryInformation
  },
  saveMultiShipInfo: function saveMultiShipInfo() {
    var baseObj = this;
    $('.btn-save-multi-ship').on('click', function (e) {
      e.preventDefault(); // Save address to checkoutAddressBook

      var form = $(this).closest('form');
      var $rootEl = $(this).closest('.shipping-content');
      var data = $(form).serialize();
      var url = $(form).attr('action');
      var vertexErrorBlock = $($rootEl).parent().find('.vertexError');
      var vertexSuggestionBlock = $($rootEl).parent().find('.vertexSuggestions');
      var vertexAddresses = $($rootEl).parent().find('#vertex-suggestion');
      clearVertexErrors();
      $rootEl.spinner().start();
      $.ajax({
        url: url,
        type: 'post',
        dataType: 'json',
        data: data
      }).done(function (response) {
        formHelpers.clearPreviousErrors(form);

        if (response.error) {
          if (response.vertexError) {
            showVertexErrors(response, vertexErrorBlock, vertexSuggestionBlock, vertexAddresses);
          } else if (response.fieldErrors && response.fieldErrors.length) {
            response.fieldErrors.forEach(function (error) {
              if (Object.keys(error).length) {
                formHelpers.loadFormErrors(form, error);
              }
            });
          } else if (response.serverErrors && response.serverErrors.length) {
            $.each(response.serverErrors, function (index, element) {
              createErrorNotification(element);
            });
          } else if (response.redirectUrl) {
            window.location.href = response.redirectUrl;
          }
        } else {
          // Update UI from response
          $('body').trigger('checkout:updateCheckoutView', {
            order: response.order,
            customer: response.customer
          });

          if (baseObj.methods && baseObj.methods.viewMultishipAddress) {
            baseObj.methods.viewMultishipAddress($rootEl);
          } else {
            viewMultishipAddress($rootEl);
          }
        }

        if (response.order && response.order.shippable) {
          $('button.submit-shipping').attr('disabled', null);
        }

        $rootEl.spinner().stop();
      }).fail(function (err) {
        if (err.responseJSON.redirectUrl) {
          window.location.href = err.responseJSON.redirectUrl;
        }

        $rootEl.spinner().stop();
      });
      return false;
    });
  },
  selectSingleShipAddress: function selectSingleShipAddress() {
    $('.single-shipping .addressSelector').on('change', function (e, isAddressTile) {
      var form = $(this).parents('form')[0];
      var selectedOption = $('option:selected', this);
      var attrs = selectedOption.data();
      var countryCode = attrs.countryCode;
      var shipmentUUID = selectedOption[0].value;
      var originalUUID = $('input[name=shipmentUUID]', form).val();
      var element;
      Object.keys(attrs).forEach(function (attr) {
        element = attr === 'countryCode' ? 'country' : attr;
        element = attr === 'experianvalidated' ? 'experianValidated' : attr;

        if (attr != 'country' && attr != 'countryCode') {
          $('[name$=' + element + ']', form).val(attrs[attr]);
        }

        if (countryCode === 'US' && attr === 'phone' && typeof attrs[attr] === 'string') {
          $('[name$=' + element + ']', form).val(attrs[attr].replace(/[^a-zA-Z 0-9]+/g, ''));
        }
      });

      if (shipmentUUID !== 'new') {
        $('[name$=stateCode]', form).trigger('change');
      }

      if (shipmentUUID === 'new') {
        $(form).attr('data-address-mode', 'new');
        $(form).find('.shipping-address-block').removeClass('d-none');
        $(form).find('.shipment-selector-block').hide();
        $(form).closest('.data-checkout-stage').find('.cancel-shipping-form').removeClass('d-none');
        $(form).find('.shipping-address-block .add-to-addressBook').removeClass('d-none');
        $(form).find('.shipping-address-block .add-to-addressBook input').prop('checked', false);
        $(form).find('.shipping-address-block .make-address-default input').prop('checked', false);
        $(form).closest('.data-checkout-stage').find('button.submit-shipping').prop('disabled', true);
        $(form).find('input').removeClass('has-success');
        $(form).find('input[name$="_experianValidated"]').val('');
      } else if (shipmentUUID === originalUUID) {
        $(form).attr('data-address-mode', 'shipment');
      } else if (shipmentUUID.indexOf('ab_') === 0) {
        if (isAddressTile) {
          if (countryCode == 'US') {
            $('input[name$=_phone]').val($('input[name$=_phone]').val().replace(/^(\d{3})(\d{3})(\d+)$/, '($1)$2-$3'));
          }

          var phoneNumberLength = attrs.phone.toString().replace(/[()-]/g, '');

          if (phoneNumberLength.length > 10 && countryCode == 'US') {
            $(form).find('input[name$=_phone]').removeClass('has-success');
            $(form).find('input[name$=_phone]').addClass('is-invalid');
            $('input[name$=_phone]').val($('input[name$=_phone]').val().replace(/^(\d{3})(\d{3})(\d+)$/, '($1)$2-$3'));
            $(form).find('.form-group .invalid-feedback').html($(form).find('input[name$=_phone]').data('pattern-mismatch'));
            return;
          }

          $(form).attr('data-address-mode', 'customer');
        } else {
          $(form).attr('data-address-mode', 'details');
          $(form).find('.shipment-selector-block').hide();
          $(form).find('.shipping-address-block').removeClass('d-none');
          $(form).find('.shipping-address-block .add-to-addressBook').addClass('d-none');
          $(form).find('.shipping-address-block .add-to-addressBook input').prop('checked', false);
          $(form).find('.shipping-address-block .make-address-default input').prop('checked', false);
          $(form).find('.js-manualEnter-option').addClass('d-none');
          $(form).find('.shipping-address-block .detailed-shipping-info-formfields').removeClass('d-none');
          $(form).closest('.data-checkout-stage').find('.cancel-shipping-form').removeClass('d-none');

          if (countryCode == 'US') {
            $('input[name$=_phone]').val($('input[name$=_phone]').val().replace(/^(\d{3})(\d{3})(\d+)$/, '($1)$2-$3'));
          }

          var phonelength = attrs.phone.toString().replace(/[()-]/g, '');

          if (phonelength.length > 10 && countryCode == 'US') {
            $(form).find('input[name$=_phone]').removeClass('has-success');
            $(form).find('input[name$=_phone]').addClass('is-invalid');
            $(form).find('.form-group .invalid-feedback').html($(form).find('input[name$=_phone]').data('pattern-mismatch'));
            return;
          }

          $('input[name$=_phone]').val($('input[name$=_phone]').val().replace(/^(\d{3})(\d{3})(\d+)$/, '($1)$2-$3'));
          $('form#dwfrm_shipping input:required').each(function () {
            $(this).addClass('has-success');
          });
        }

        validateShippingForm('form#dwfrm_shipping');
      } else {
        $(form).attr('data-address-mode', 'edit');
        $(form).find('.shipment-selector-block').hide();
        $('.data-checkout-stage').find('.cancel-shipping-form').removeClass('d-none');
      }
    });
    $('.shipping-form .make-address-default').on('click', function (e) {
      e.preventDefault();

      if (!$(this).find('input').is(':checked')) {
        $(this).find('input').prop('checked', true);
        $('.shipping-form .add-to-addressBook input').prop('checked', true);
      } else {
        $(this).find('input').prop('checked', false);
      }
    });
    $('.shipping-form .add-to-addressBook').on('click', function (e) {
      e.preventDefault();

      if (!$(this).find('input').is(':checked')) {
        $(this).find('input').prop('checked', true);
      } else {
        $(this).find('input').prop('checked', false);
        $('.shipping-form .make-address-default input').prop('checked', false);
      }
    });
  },
  cancelShipAddress: function cancelShipAddress() {
    $('button.cancel-shipping-form').on('click', function () {
      var $form = $('#checkout-main').find('form.shipping-form');
      $form.attr('data-address-mode', 'edit');
      $form.find('.shipment-selector-block').show();
      $form.closest('.data-checkout-stage').find('button.cancel-shipping-form').addClass('d-none');
      $form.find('.shipping-address-block .detailed-shipping-info-formfields').addClass('d-none');
      $form.find('.js-manualEnter-option').removeClass('d-none').show();
      $form.closest('.data-checkout-stage').find('button.submit-shipping').prop('disabled', true);

      if ($form.find('.saved-address-block-rlco .addr-card.selected').length) {
        $form.find('.saved-address-block-rlco .addr-card.selected').trigger('click');
      }
    });
  },
  editShipAddress: function editShipAddress() {
    $('.shipping-form .js-edit-address').on('click', function (e) {
      if ($(e.target).hasClass('js-edit-address')) {
        var $form = $(this).closest('form');
        var addressID = $(this).siblings('.adress-data-holder').data('addressid');
        var isDefaultAddress = $(this).siblings('.adress-data-holder').data('default-address');
        var $newEl = $form.find('.addressSelector option[value="' + addressID + '"]');

        if ($newEl.length) {
          $newEl.prop('selected', 'selected');
          $newEl.parent().trigger('change');

          if (isDefaultAddress) {
            $form.find('.shipping-address-block .make-address-default').addClass('d-none');
          } else {
            $form.find('.shipping-address-block .make-address-default').removeClass('d-none');
          }
        }

        $('.addressId').val(addressID.substring('3'));
      }
    });
  },
  multiShipmentDialogue: function multiShipmentDialogue() {
    $('body').on('click', '.multiple-shipment-div .view-details-link', function () {
      $('#multi-shipment-modal').modal('show');
    });
    $('body').on('shown.bs.modal', '#multi-shipment-modal', function () {
      swiperSlide.swiperInitialization();
      var sliderBtns = $(this).find('.swiper-container-initialized .btnedd-swiper');
      $.each(sliderBtns, function (key, value) {
        if (!$(value).hasClass('swiper-button-disabled')) {
          $(value).parent().parent().parent().addClass('edd-swiper-main');
        }
      });
    });
    $('body').on('hidden.bs.modal', '#multi-shipment-modal', function () {
      swiperSlide.swiperInitialization();
    });
  },
  selectShipAddressTile: function selectShipAddressTile() {
    $('.saved-address-block-rlco .addr-card').on('click', function (e) {
      if (!$(e.target).hasClass('js-edit-address')) {
        $('.saved-address-block-rlco .addr-card').removeClass('selected');
        $(this).addClass('selected');
        var phone = $(this).find('.adress-data-holder').data('phone').toString();
        var countryCode = $(this).find('.adress-data-holder').data('country-code');
        phone = phone.replace(/[()-]/g, '');

        if (phone.length > 10 && countryCode == 'US') {
          $(this).find('.js-edit-address').trigger('click');
        }

        var $form = $(this).closest('form');
        var addressID = $(this).find('.adress-data-holder').data('addressid');
        var $newEl = $form.find('.addressSelector option[value="' + addressID + '"]');

        if ($newEl.length) {
          $newEl.prop('selected', 'selected');
          $newEl.parent().trigger('change', true);
        }

        if ($('select[name$="shippingAddress_addressFields_states_stateCode"]').children('option:selected').val() === 'AE' && $('.armed-forces-alert-msg').length) {
          $('.armed-forces-alert-msg').removeClass('d-none');
        } else {
          $('.armed-forces-alert-msg').addClass('d-none');
        }

        $('.addressId').val(addressID.substring('3'));
      }
    });
  },
  selectShippingMethod: function selectShippingMethod() {
    $('body').on('change', '.shipping-options-container .js-form-check-input', function () {
      var $shippingForm = $('form.shipping-form');

      if ($(this).closest('.shipping-options-container').hasClass('checked-option')) {
        return;
      }

      var methodID = $(this).val();
      var shipmentUUID = $(this).closest('.shipment-shipping-method-list').data('uuid');
      var urlParams = addressHelpers.methods.getAddressFieldsFromUI($shippingForm);
      urlParams.shipmentUUID = shipmentUUID;
      urlParams.methodID = methodID;
      var url = $(this).closest('.shipping-method-section').data('select-shipping-method-url');
      selectShippingMethodAjax(url, urlParams, $(this));
      $('.shipping-options-container').removeClass('checked-option');

      if ($('.shipping-options-container').find('.js-form-check-input').is(':checked')) {
        $(this).closest('.shipping-options-container').addClass('checked-option');
      } else {
        $(this).closest('.shipping-options-container').removeClass('checked-option');
      }
    });
  },
  updateShippingList: function updateShippingList() {
    var baseObj = this;
    $('select[name$="shippingAddress_addressFields_states_stateCode"]').on('change', function (e) {
      if (baseObj.methods && baseObj.methods.updateShippingMethodList) {
        baseObj.methods.updateShippingMethodList($(e.currentTarget.form));
      } else {
        updateShippingMethodList($(e.currentTarget.form));
      }
    });
  },
  // Upon click, clears the shipping info from form and show the hidden form elements.
  manualAddressEntry: function manualAddressEntry() {
    var $toggleSwitch = $('.shipping-form').find('.js-manualEnter-option');
    $toggleSwitch.on('click', function () {
      var $hiddenFields = $(this).closest('.shipping-address-block').find('.detailed-shipping-info-formfields');

      if ($hiddenFields.hasClass('d-none')) {
        $hiddenFields.removeClass('d-none');
      }

      $(this).hide();

      if ($('select[name$="shippingAddress_addressFields_states_stateCode"]').children('option:selected').val() === 'AE' && $('.armed-forces-alert-msg').length) {
        $('.armed-forces-alert-msg').removeClass('d-none');
      } else {
        $('.armed-forces-alert-msg').addClass('d-none');
      }
    });
  },
  vertexSuggestions: function vertexSuggestions() {
    $('select[name="vertex-suggestion"]').change(function () {
      var form = $(this).closest('.card').find('.shipping-form');
      fillAddressSuggestion($(this).find('option:selected').data('address'), form);
    });
  },
  addressSuggestionChange: function addressSuggestionChange() {
    var lastVal = $('input[name$="_address1"]').val();
    $('body').on('change', 'input[name$="_address1"]', function () {
      lastVal = $('input[name$="_address1"]').val();

      if ($('#shippingAddressOnedefault').attr('edq-metadata')) {
        var lastEdqResponse = JSON.parse($('#shippingAddressOnedefault').attr('edq-metadata'));
        var address1 = lastEdqResponse.address[0] ? lastEdqResponse.address[0].addressLine1 : '';

        if (lastVal !== address1) {
          var $experianSuggest = $('#experianSuggest');
          $experianSuggest.val(false);
          $('#experianValidated').val(false);

          if (!$('.edq-global-intuitive-address-suggestions').is(':visible') && $('.edq-global-intuitive-address-suggestions').find('.selected').length > 0) {
            $('.edq-global-intuitive-address-suggestions').find('.selected').removeClass('selected');
          }
        }
      }
    });
    $('body').on('change', 'input[name$="_address2"], select[name$="_states_state"], input[name$="_city"], input[name$="_postal"]', function () {
      var curVal = $('input[name$="_address1"]').val();

      if ($('#shippingAddressOnedefault').attr('edq-metadata')) {
        var lastEdqResponse = JSON.parse($('#shippingAddressOnedefault').attr('edq-metadata'));
        var address1 = lastEdqResponse.address[0] ? lastEdqResponse.address[0].addressLine1 : '';
        lastVal = address1;
      }

      if (lastVal == curVal) {
        var $experianSuggest = $('#experianSuggest');
        $experianSuggest.val(false);
        $('#experianValidated').val(false);

        if (!$('.edq-global-intuitive-address-suggestions').is(':visible') && $('.edq-global-intuitive-address-suggestions').find('.selected').length > 0) {
          $('.edq-global-intuitive-address-suggestions').find('.selected').removeClass('selected');
        }
      }
    });
  },
  toggleArmedForceMessage: function toggleArmedForceMessage() {
    $('select[name$="shippingAddress_addressFields_states_stateCode"]').on('change blur keyup', function () {
      if ($(this).children('option:selected').val() === 'AE' && $('.armed-forces-alert-msg').length) {
        $('.armed-forces-alert-msg').removeClass('d-none');
      } else {
        $('.armed-forces-alert-msg').addClass('d-none');
      }
    });
  }
};

/***/ }),

/***/ "./app_foundation_sfra/cartridge/client/default/js/checkout/summary.js":
/*!*****************************************************************************!*\
  !*** ./app_foundation_sfra/cartridge/client/default/js/checkout/summary.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var summaryHelpers = __webpack_require__(/*! base/checkout/summary */ "./app_storefront_base/cartridge/client/default/js/checkout/summary.js");
/**
 * updates the totals summary
 * @param {Array} totals - the totals data
 * @param {object} order - order object
 */


function updateTotals(totals, order) {
  $('.js-shipping-item').empty();
  order.shipping.forEach(function (shipmentModel) {
    if (shipmentModel.selectedShippingMethod) {
      var dom = '<div class=\'col-7 start-line\'><div class=\'order-receipt-label d-flex align-items-center\'><span class=\'text-capitalize\'>' + shipmentModel.selectedShippingMethod.displayName + '</span>';

      if (shipmentModel.shipmentType === 'WG') {
        dom += '<span class=\'info-icon tooltip wg-tooltip\'><svg class=\'svg-symbol info\' title=\'Info\'><use xlink:href=\'#info\'></use><span class=\'tooltip-content\'>' + $('.wg-message-tooltip').html() + '</span>';
      }

      if (shipmentModel.fullDeposit === true) {
        var validTootipContent = document.getElementById('deposit-message-tooltip');

        if (validTootipContent && validTootipContent.textContent.replace(/\n|\r|\s/gm, '') !== '') {
          dom += '<span class=\'info-icon tooltip wg-tooltip validated\' data-aid=\'deposit-message-tooltip\'><svg class=\'svg-symbol info\' title=\'Info\'><use xlink:href=\'#info\'></use>';
        }
      }

      dom += '</div></div>';
      dom += '<div class=\'col-5 end-line\'> <p class=\'text-right\'><span class=\'shipping-total-cost\'>' + shipmentModel.selectedShippingMethod.shippingTotalPrice + '</span></p></div>';
      $('.js-shipping-item').append(dom);
    }
  });
  $('.tax-total').text(totals.totalTax);
  $('.sub-total').text(totals.subTotal);
  $('.grand-total-sum').text(totals.orderBalanceFormatted);

  if ($('.order-summary-detail .order-price').length > 0) {
    $('.order-summary-detail .order-price').text(totals.orderBalanceFormatted);
  }

  if (totals.orderLevelDiscountTotal.value > 0) {
    $('.order-discount').removeClass('hide-order-discount');
    $('.order-discount-total').text('- ' + totals.orderLevelDiscountTotal.formatted);
  } else {
    $('.order-discount').addClass('hide-order-discount');
  }

  if (totals.shippingLevelDiscountTotal.value > 0 && totals.adjustedShippingTotalPrice > 0) {
    $('.shipping-discount').removeClass('hide-shipping-discount');
    $('.shipping-discount-total').text('- ' + totals.shippingLevelDiscountTotal.formatted);
  } else {
    $('.shipping-discount').addClass('hide-shipping-discount');
  }

  if (totals.giftBox.hasGiftBox) {
    if (!totals.giftBox.isComplimentary) {
      // checks if goft box promo is active or not
      $('.gift-boxes-total').text(totals.giftBox.giftBoxTotal);
      $('.gift-boxes-label').text(totals.giftBox.giftBoxMsg);

      if (totals.giftBox.giftBoxCount) {
        $('.gift-box-total').removeClass('d-none');
      } else {
        $('.gift-box-total').addClass('d-none');
      }

      if (totals.giftBox.complimentaryGiftBoxCount) {
        $('.complimentary-gift-box').removeClass('d-none');
        $('.complimentary-gift-box-msg').text(totals ? totals.giftBox.freeGiftBoxMessage : totals.giftBox.freeGiftBoxMessage);
      } else {
        $('.complimentary-gift-box').addClass('d-none');
      }
    } else {
      $('.has-complimentary').removeClass('d-none');
      $('.no-complimentary').addClass('d-none');
      $('.free-msg').removeClass('d-none');
    }
  } else if (!totals.giftBox.isComplimentary) {
    $('.gift-box-total').addClass('d-none');
    $('.complimentary-gift-box').addClass('d-none');
  } else {
    $('.has-complimentary').addClass('d-none');
    $('.no-complimentary').removeClass('d-none');
    $('.free-msg').addClass('d-none');
  }

  var orderItems;

  if (order.items.items) {
    orderItems = order.items.items;
  } else if (order.items) {
    orderItems = order.items;
  }

  orderItems.forEach(function (item) {
    var pli = $('[data-product-line-item=' + item.UUID + ']');

    if (item.giftMessage) {
      $(pli).find('.giftBoxText').removeClass('d-none');
      $(pli).find('.giftBoxTextContent').text(item.giftMessage);
    } else {
      $(pli).find('.giftBoxText').addClass('d-none');
      $(pli).find('.giftBoxTextContent').text('');
    }
  });
}
/**
 * updates the order product shipping summary for an order model
 * @param {object} order - the order model
 */


function updateOrderProductSamedayMessage(order) {
  order.shipping.forEach(function (shipping) {
    shipping.productLineItems.items.forEach(function (lineItem) {
      var pli = $('[data-product-line-item=' + lineItem.UUID + ']');
      var samedayTextElement = pli.find('.sameday-product-message');

      if (Object.prototype.hasOwnProperty.call(lineItem, 'samedayApplicableProduct') && lineItem.samedayApplicableProduct && (!order.sdStoreSelected || order.sdStoreSelected && order.sdStoreSelected === lineItem.sdStoreID)) {
        var samedayText;

        if (Object.prototype.hasOwnProperty.call(lineItem, 'isNextDay') && lineItem.isNextDay) {
          samedayText = window.Resources.SAMEDAY_NEXTDAY_ELIGIBLE_TEXT;
        } else {
          samedayText = window.Resources.SAMEDAY_ELIGIBLE_TEXT;
        }

        var appendHTML = '<svg class="svg-symbol same-day-delivery shipping-method-image Same-Day-Delivery" title=""><use xlink:href="#Same-Day-Delivery" /></svg>' + '<span class="shipping-method-name shipping-method-attributes">' + samedayText + '</span>';
        samedayTextElement.html(appendHTML);
      } else {
        samedayTextElement.html('');
      }
    });
  });
}
/**
 * updates the order product summary for an order shippng model
 * @param {object} shipping - the shipping model
 * @param {object} productSummary - productSummary container
 */


function updateProductSummary(shipping, productSummary) {
  shipping.productLineItems.items.forEach(function (lineItem) {
    var pli = $('[data-product-line-item=' + lineItem.UUID + ']');
    $(productSummary).append(pli);
  });
}
/**
 * updates the order addres summary from an order shipping model
 * @param {object} order - the order model
 * @param {object} shipping - the shipping model
 * @param {boolean} stateBoolean - productSummary container
 * @param {object} tmpl - shipping summary template
 */


function updateShippingAddressSummary(order, shipping, stateBoolean, tmpl) {
  var shippingForm = $('.multi-shipping input[name="shipmentUUID"][value="' + shipping.UUID + '"]').parent();
  var address = shipping.shippingAddress || {};
  var nameLine = address.firstName ? address.firstName + ' ' : '';

  if (address.lastName) {
    nameLine += address.lastName;
  }

  var address1Line = address.address1;
  var address2Line = address.address2;
  var phoneLine = address.phone;

  if (shipping.shippingAddress && shipping.shippingAddress.firstName && shipping.shippingAddress.address1 && shipping.shippingAddress.city && stateBoolean && shipping.shippingAddress.countryCode && (shipping.shippingAddress.phone || shipping.productLineItems.items[0].fromStoreId)) {
    $('.ship-to-name', tmpl).text(nameLine);
    $('.ship-to-address1', tmpl).text(address1Line);
    $('.ship-to-address2', tmpl).text(address2Line);
    $('.ship-to-city', tmpl).text(address.city);

    if (address.stateCode) {
      $('.ship-to-st', tmpl).text(address.stateCode);
    }

    $('.ship-to-zip', tmpl).text(address.postalCode);
    $('.ship-to-phone', tmpl).text(phoneLine);

    if (!address2Line) {
      $('.ship-to-address2', tmpl).hide();
    }

    if (!phoneLine) {
      $('.ship-to-phone', tmpl).hide();
    }

    shippingForm.find('.ship-to-message').text('');
  } else {
    shippingForm.find('.ship-to-message').text(order.resources.addressIncomplete);
  }
}
/**
 * updates the order product shipping summary for an order model
 * @param {object} order - the order model
 */


function updateOrderProductSummaryInformation(order) {
  var $productSummary = $('<div />');
  order.shipping.forEach(function (shipping) {
    updateProductSummary(shipping, $productSummary);
    var selectedMethod = shipping.selectedShippingMethod;
    var shippingCost = selectedMethod ? selectedMethod.shippingCost : '';
    var methodNameLine = selectedMethod ? selectedMethod.displayName : '';
    var methodArrivalTime = selectedMethod && selectedMethod.estimatedArrivalTime ? '( ' + selectedMethod.estimatedArrivalTime + ' )' : '';
    var tmpl = $('#pli-shipping-summary-template').clone();

    if (shipping.productLineItems.items && shipping.productLineItems.items.length > 1) {
      $('h5 > span').text(' - ' + shipping.productLineItems.items.length + ' ' + order.resources.items);
    } else {
      $('h5 > span').text('');
    }

    var stateRequiredAttr = $('#shippingState').attr('required');
    var isRequired = stateRequiredAttr && stateRequiredAttr !== false;
    var stateExists = shipping.shippingAddress && shipping.shippingAddress.stateCode ? shipping.shippingAddress.stateCode : false;
    var stateBoolean = false;

    if (isRequired && stateExists || !isRequired) {
      stateBoolean = true;
    }

    updateShippingAddressSummary(order, shipping, stateBoolean, tmpl);

    if (shipping.isGift) {
      $('.gift-message-summary', tmpl).text(shipping.giftMessage);
    } else {
      $('.gift-summary', tmpl).addClass('d-none');
    } // checking h5 title shipping to or pickup


    var $shippingAddressLabel = $('.shipping-header-text', tmpl);
    $('body').trigger('shipping:updateAddressLabelText', {
      selectedShippingMethod: selectedMethod,
      resources: order.resources,
      shippingAddressLabel: $shippingAddressLabel
    });

    if (shipping.selectedShippingMethod) {
      $('.display-name', tmpl).text(methodNameLine);
      $('.arrival-time', tmpl).text(methodArrivalTime);
      $('.price', tmpl).text(shippingCost);
    }

    var $shippingSummary = $('<div class="multi-shipping" data-shipment-summary="' + shipping.UUID + '" />');
    $shippingSummary.html(tmpl.html());
    $productSummary.append($shippingSummary);
  });
  $('.product-summary-block').html($productSummary.html()); // Also update the line item prices, as they might have been altered

  $('.grand-total-price').text(order.totals.subTotal);
  order.items.items.forEach(function (item) {
    if (item.appliedProductPromotionsHtml) {
      $('.line-item-promo.item-' + item.UUID).empty().append(item.appliedProductPromotionsHtml);
    } else {
      $('.line-item-promo.item-' + item.UUID).empty();
    }

    if (item.custom.isVGC || item.custom.isCustomPGC || item.custom.gcPrice || item.custom.unmadeUpcharges) {
      var vgcPrice = '<div class="price">' + '<span class="sales">' + '<span class="value" content="' + item.priceTotal.price + '">' + item.priceTotal.price + '</span>' + '</span>' + '</div>';
      $('.product-attributes.item-unit-price-' + item.UUID).find('span.product-attributes-price').empty().append(vgcPrice);
    } else {
      $('.product-attributes.item-unit-price-' + item.UUID).find('span.product-attributes-price').empty().append(item.renderedPrice);
    }

    if (item.priceTotal && item.priceTotal.renderedPrice && !(item.custom.gcPrice || item.custom.unmadeUpcharges)) {
      $('.item-total-' + item.UUID).empty().append(item.priceTotal.renderedPrice);
    }
  });
}

function showCustomization() {
  $('body').on('click', '.hideOptionsControl', function (e) {
    $(e.currentTarget).find('.hideOptions').toggle();

    if ($(e.currentTarget).hasClass('opened')) {
      $(e.currentTarget).removeClass('opened');
    } else {
      $(e.currentTarget).addClass('opened');
    }
  });
}

module.exports = $.extend({}, summaryHelpers, {
  updateTotals: updateTotals,
  updateOrderProductSamedayMessage: updateOrderProductSamedayMessage,
  updateOrderProductSummaryInformation: updateOrderProductSummaryInformation,
  showCustomization: showCustomization
});

/***/ }),

/***/ "./app_foundation_sfra/cartridge/client/default/js/components/swiperInit.js":
/*!**********************************************************************************!*\
  !*** ./app_foundation_sfra/cartridge/client/default/js/components/swiperInit.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Swiper = __webpack_require__(/*! swiper/cjs/components/core/core-class.js */ "./node_modules/swiper/cjs/components/core/core-class.js")["default"];

var pagination = __webpack_require__(/*! swiper/cjs/components/pagination/pagination.js */ "./node_modules/swiper/cjs/components/pagination/pagination.js")["default"];

var navigation = __webpack_require__(/*! swiper/cjs/components/navigation/navigation.js */ "./node_modules/swiper/cjs/components/navigation/navigation.js")["default"];

var autoplay = __webpack_require__(/*! swiper/cjs/components/autoplay/autoplay.js */ "./node_modules/swiper/cjs/components/autoplay/autoplay.js")["default"];

var EffectFade = __webpack_require__(/*! swiper/cjs/components/effect-fade/effect-fade.js */ "./node_modules/swiper/cjs/components/effect-fade/effect-fade.js")["default"];

Swiper.use(pagination);
Swiper.use(navigation);
Swiper.use(autoplay);
Swiper.use(EffectFade);

function swiperInitialization() {
  $('.js-swiper-delivery').each(function () {
    var swiper = new Swiper('.swiper-ship', {
      //eslint-disable-line
      direction: 'horizontal',
      freeMode: true,
      resistanceRatio: 0,
      observer: 'true',
      observerParents: 'true',
      slidesPerView: 'auto',
      watchSlidesVisibility: true,
      navigation: {
        nextEl: '.swiper-button-next',
        prevEl: '.swiper-button-prev'
      },
      scrollbar: {
        el: 'swiper-scrollbar'
      }
    });
  });
  $('.js-swiper-instore').each(function () {
    var swiper = new Swiper('.swiper-instore', {
      //eslint-disable-line
      direction: 'horizontal',
      freeMode: true,
      resistanceRatio: 0,
      observer: 'true',
      observerParents: 'true',
      slidesPerView: 'auto',
      watchSlidesVisibility: true,
      navigation: {
        nextEl: '.swiper-button-next-instore',
        prevEl: '.swiper-button-prev-instore'
      },
      scrollbar: {
        el: 'swiper-scrollbar'
      }
    });
  });
  $('.js-swiper-wg').each(function () {
    var swiper = new Swiper('.swiper-wg', {
      //eslint-disable-line
      direction: 'horizontal',
      freeMode: true,
      resistanceRatio: 0,
      observer: 'true',
      observerParents: 'true',
      slidesPerView: 'auto',
      watchSlidesVisibility: true,
      navigation: {
        nextEl: '.swiper-button-next-wg',
        prevEl: '.swiper-button-prev-wg'
      },
      scrollbar: {
        el: 'swiper-scrollbar'
      }
    });
  });
  $('.js-swiper-edd-split').each(function () {
    var swiper = new Swiper('.swiper-edd-split', {
      //eslint-disable-line
      direction: 'horizontal',
      freeMode: true,
      resistanceRatio: 0,
      observer: 'true',
      observerParents: 'true',
      slidesPerView: 2.5,
      navigation: {
        nextEl: '.swiper-button-next-edd',
        prevEl: '.swiper-button-prev-edd'
      },
      scrollbar: {
        el: 'swiper-scrollbar'
      },
      breakpoints: {
        960: {
          slidesPerView: 3.5
        }
      }
    });
  });
}

module.exports = {
  swiperInitialization: swiperInitialization
};

/***/ }),

/***/ "./app_foundation_sfra/cartridge/client/default/js/components/tooltip_sfra.js":
/*!************************************************************************************!*\
  !*** ./app_foundation_sfra/cartridge/client/default/js/components/tooltip_sfra.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* Ensure that the arrow at the bottom of the tooltip points to the target of the tooltip.
*/

function getOffset(arrow, target) {
  var arrowMiddle = (arrow.left + arrow.right) / 2;
  var targetMiddle = (target.left + target.right) / 2;
  var offset = targetMiddle - arrowMiddle;
  return offset;
}

function adjustArrowPlacement(event, ui) {
  try {
    var $arrow = ui.tooltip.find('.arrow');
    var target = event.originalEvent.target;
    var offset = getOffset($arrow[0].getBoundingClientRect(), target.getBoundingClientRect());
    var left = parseInt($arrow.css('left')) || 0; // default to 0 if NaN.

    $arrow.css('left', left + offset);
  } catch (ignored) {// Nothing we can do, but don't break anything.
  }
}
/**
 * @function
 * @description Initializes the tooltip-content and layout
 */


module.exports = function () {
  $(document).tooltip({
    items: '.tooltip',
    position: {
      my: 'center bottom-20',
      at: 'center bottom-20',
      collision: 'flipfit flip',
      using: function using(position, feedback) {
        if ($(this).find('.tt-up').length > 0) {
          position.top -= 20;
        }

        $(this).css(position);
        $('<div>').addClass('arrow').addClass(feedback.vertical).addClass(feedback.horizontal).appendTo(this);
      }
    },
    tooltipClass: 'rl-tooltip',
    content: function content() {
      if ($(this).data('aid')) {
        return $('#' + $(this).data('aid')).html();
      }

      return $(this).find('.tooltip-content').html();
    },
    create: function create() {
      $(this).find('.tooltip[data-aid]').each(function () {
        var content = document.getElementById(this.dataset.aid);

        if (!(content && content.textContent.replace(/\n|\r|\s/gm, '') !== '')) {
          this.remove();
        } else {
          this.classList.add('validated');
        }
      });
    },
    open: function open(event, ui) {
      adjustArrowPlacement(event, ui);
      var $element = $(event.target);
      ui.tooltip.on('click', function () {
        $element.tooltip('close');
      });
    },
    close: function close(event, ui) {
      ui.tooltip.hover(function () {
        $(this).stop(true).fadeTo(400, 1);
      }, function () {
        $(this).fadeOut('400', function () {
          $(this).remove();
        });
      });
    }
  });
  $('.share-link').on('click', function (e) {
    e.preventDefault();
    var target = $(this).data('target');

    if (!target) {
      return;
    }

    $(target).toggleClass('active');
  });
  /* JIRA PREV-282 : DEV-32: SG issue- 'What is this' link in checkout billing page should not be clickable. Added the folloiwng block.*/

  $('a.tooltip').on('click', function (e) {
    e.preventDefault();
    e.stopPropagation();
  });
  $('a.tooltip').on('hover', function () {
    $('.rl-tooltip').attr('tabindex', '0');
    $('.rl-tooltip').on('focus', function () {
      return true;
    });
  });
  $('a.tooltip').on({
    mouseenter: function mouseenter() {
      $('.rl-tooltip').attr('tabindex', '0');
      $('.rl-tooltip').on('focus', function () {
        return true;
      });
    }
  });
};

/***/ }),

/***/ "./app_foundation_sfra/cartridge/client/default/js/customerUtil.js":
/*!*************************************************************************!*\
  !*** ./app_foundation_sfra/cartridge/client/default/js/customerUtil.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var formValidation = __webpack_require__(/*! base/components/formValidation */ "./app_storefront_base/cartridge/client/default/js/components/formValidation.js");

var createErrorNotification = __webpack_require__(/*! base/components/errorNotification */ "./app_storefront_base/cartridge/client/default/js/components/errorNotification.js");
/**
 * Generates the modal window on the first call.
 *
 */


function getModalHtmlElement() {
  if ($('#employeeViewModal').length !== 0) {
    $('#employeeViewModal').remove();
  }

  var htmlString = '<!-- Modal -->' + '<div class="modal fade user-shopping-terms-dialog employee-view-modal" id="employeeViewModal" tabindex="-1" data-keyboard="false" data-backdrop="static" role="dialog">' + '<span class="enter-message sr-only" ></span>' + '<div class="modal-dialog ui-dialog employee-dialog">' + '<!-- Modal content-->' + '<div class="modal-content">' + '<div class="modal-body"></div>' + '</div>' + '</div>' + '</div>';
  $('body').append(htmlString);
}
/**
 * replaces the content in the modal window on for the selected product variation.
 * @param {string} selectedValueUrl - url to be used to retrieve a new product model
 */


function fillModalElement(selectedValueUrl) {
  var $loader = $('<div/>').addClass('loader ');
  $loader.append($('<div/>').addClass('loader-indicator'));
  $loader.appendTo('#employeeViewModal .modal-content');
  $.ajax({
    url: selectedValueUrl + '?format=ajax',
    method: 'GET',
    dataType: 'HTML',
    success: function success(data, status, xhr) {
      var dataType = xhr.getResponseHeader('content-type') || '';

      if (dataType.indexOf('json') > -1) {
        data = JSON.parse(data);

        if (!data.isEmployee && data.redirectUrl) {
          window.location.href = data.redirectUrl;
        }
      } else {
        if ($('#signInModal').is(':visible')) {
          $('#signInModal').modal('toggle');
        } else if ($('#cartLoginModal').is(':visible')) {
          $('#cartLoginModal').modal('toggle');
        }

        $('#employeeViewModal .modal-body').empty();
        var $employeeAgreementModal = $(data).find('div.user-shopping-terms');
        $('#employeeViewModal .modal-body').html($employeeAgreementModal);
        $('#employeeViewModal').modal('show');
        $loader.remove();
      }
    },
    error: function error() {
      $loader.remove();
    }
  });
}
/**
 * Initiates create account/login events
 */


function init() {
  $('.modal-login .login').submit(function (e) {
    e.stopImmediatePropagation();
    e.preventDefault();
    var $form = $(this);
    var valid = $form[0].checkValidity();

    if (valid) {
      var generateCSRFURL = $form.find('button[type="submit"]').data('generatecsrf');

      if (generateCSRFURL !== null) {
        $.ajax({
          url: generateCSRFURL,
          method: 'POST',
          success: function success(data) {
            if (data && data.csrfToken) {
              $form.find('input[name="csrf_token"]').val(data.csrfToken);
              $.ajax({
                url: $form.attr('action'),
                method: 'POST',
                dataType: 'json',
                data: $form.serialize(),
                success: function success(response) {
                  if (!response.success) {
                    formValidation($form, response);
                    $('form.login').trigger('login:error', response);
                  } else if (response.isEmployee || response.isTradeUser) {
                    getModalHtmlElement();
                    fillModalElement(response.termsURL);
                  } else {
                    $('form.login').trigger('login:success', response);
                    window.location.href = response.redirectUrl;
                  }
                },
                error: function error(_error) {
                  if (_error && _error.responseJSON && _error.responseJSON.redirectUrl) {
                    window.location.href = _error.responseJSON.redirectUrl;
                  } else {
                    $('form.login').trigger('login:error', _error);
                    $form.spinner().stop();
                  }
                }
              });
            } else {
              $('form.login').trigger('login:error', data);
              $form.spinner().stop();
            }
          },
          error: function error(data) {
            $('form.login').trigger('login:error', data);
            $form.spinner().stop();
          }
        });
      }
    }

    return false;
  });
  $('body .js-registration-form').on('submit', function (e) {
    e.stopImmediatePropagation();
    e.preventDefault();
    var $form = $(this);
    var valid = $form[0].checkValidity();

    if (valid) {
      var generateCSRFURL = $form.find('button[type="submit"]').data('generatecsrf');

      if (generateCSRFURL !== null) {
        $.ajax({
          url: generateCSRFURL,
          method: 'POST',
          success: function success(data) {
            if (data && data.csrfToken) {
              $form.find('input[name="csrf_token"]').val(data.csrfToken);
              $.ajax({
                url: $form.attr('action'),
                method: 'POST',
                dataType: 'json',
                data: $form.serialize(),
                success: function success(response) {
                  if (!response.success) {
                    $('form.registration').trigger('login:register:error', response);
                    formValidation($form, response);
                  } else if (response.isEmployee || response.isTradeUser) {
                    getModalHtmlElement();
                    fillModalElement(response.termsURL);
                  } else {
                    $('form.registration').trigger('login:register:success', response);
                    window.location.href = response.redirectUrl;
                  }
                },
                error: function error(err) {
                  if (err && err.responseJSON && err.responseJSON.redirectUrl) {
                    window.location.href = err.responseJSON.redirectUrl;
                  } else {
                    createErrorNotification($('.error-messaging'), err.responseJSON.errorMessage);
                    $form.spinner().stop();
                  }
                }
              });
            } else {
              $('form.registration').trigger('login:register:error', data);
              $form.spinner().stop();
            }
          },
          error: function error(data) {
            $('form.registration').trigger('login:register:error', data);
            $form.spinner().stop();
          }
        });
      }
    }

    return false;
  });
  $('body').on('click', '#password-reset, .password-reset-modal button.close', function () {
    var $element = $(this);
    var $inputField = $element.closest('.modal-content').find('input#reset-password-email');
    $inputField.removeClass('is-invalid').removeClass('error').val('');
    $inputField.next('span').remove();
    $inputField.closest('div.form-group').find('.invalid-feedback').text('');

    if (!$element.parents('.modal').hasClass('custom-login-modal-style')) {
      if ($element.data('target') && $element.data('target').indexOf('cartRequestPasswordResetModal') >= 0) {
        $('#cartLoginModal').modal('toggle');
        setTimeout(function () {
          $('body').addClass('modal-open');
        }, 300);
      } else {
        $('#signInModal').modal('toggle');
        setTimeout(function () {
          $('body').addClass('modal-open');
        }, 300);
      }
    }
  });
  $('.reset-password-form').submit(function (e) {
    e.preventDefault();
    var $form = $(this);
    var valid = $form[0].checkValidity();

    if (valid) {
      var formURL = $form.attr('action');
      $.ajax({
        url: formURL,
        method: 'POST',
        dataType: 'json',
        data: $form.serialize(),
        success: function success(data) {
          if (!data.success) {
            formValidation($form, data);
          } else {
            $('.request-password-title').text(data.receivedMsgHeading);
            $('.request-password-body').empty().append('<p>' + data.receivedMsgBody + '</p>');

            if (!data.mobile) {
              $('.password-reset-modal.show #submitEmailButton').hide();
            } else {
              $('.password-reset-modal.show .send-email-btn').hide();
            }
          }
        },
        error: function error() {
          $.spinner().stop();
        }
      });
    }

    return false;
  });
  $('body').on('click', '.js-createAccount', function () {
    var form = $(this).closest('form');
    form.find('#OAuthProvider').val(this.id);
  });
}
/**
 * @function
 * @description appends the parameters to the given url and returns the changed url
 * @param {string} $form - address form
 */


function updateStateOptions($form) {
  var $country = $form.find('select[id$="_country"]');
  var $frmState = $form.find('select[id$="_stateCode"]');
  var stVal = $frmState.val();
  var country = $country.val();
  var countryObj = window.Countries[country];
  var arrHtml = '';
  var selectID = '';
  var autocomplete = '';
  var selectName = '';
  var ariaRequiredAttr = '';
  var requiredAttr = '';
  var placeholder = '';
  var missingErrorMsg = '';
  var inputField, selectBox;
  $form.find('[id$="_stateCode"]').closest('.form-group').find('span.error').remove();
  $form.find('[id$="_stateCode"]').removeClass('error'); // if statement execute only for the countries which has states as dropdown( ex : US, CA)

  if (typeof countryObj !== 'undefined' && countryObj !== null && typeof countryObj.regions !== 'undefined' && countryObj.regions !== null && Object.keys(countryObj.regions).length > 0) {
    selectID = 'id="' + $form.find('[name$="_stateCode"]').attr('id') + '"';
    selectName = 'name="' + $form.find('[name$="_stateCode"]').attr('name') + '"';
    ariaRequiredAttr = 'aria-required="' + $form.find('[name$="_stateCode"]').attr('aria-required') + '"';
    requiredAttr = $form.find('[name$="_stateCode"]').attr('required');
    placeholder = 'placeholder="' + $form.find('[name$="_stateCode"]').attr('placeholder') + '"';
    missingErrorMsg = 'data-missing-error="' + $form.find('[name$="_stateCode"]').data('missing-error') + '"';
    autocomplete = 'autocomplete="billing address-level1"';
    inputField = $('<input class="input-text state billingState" type="text" ' + selectID + ' ' + placeholder + ' ' + selectName + ' ' + missingErrorMsg + ' ' + requiredAttr + ' ' + ariaRequiredAttr + ' ' + autocomplete + ' />');
    arrHtml = '<option value="">Select...</option>';
    var countryRegions = Object.keys(countryObj.regions);

    for (var i = 0; i < countryRegions.length; i++) {
      var stateValue = countryRegions[i];
      arrHtml += '<option id="' + stateValue + '" value="' + stateValue + '">' + countryObj.regions[stateValue] + '</option>';
    }

    selectBox = $('<select class="form-control state billingState custom-select valid" ' + selectID + ' ' + placeholder + ' ' + selectName + ' ' + missingErrorMsg + ' ' + requiredAttr + ' ' + ariaRequiredAttr + ' ' + autocomplete + '>' + arrHtml + '</select>');

    if (country !== 'US' && country != 'CA') {
      $form.find('select[name$="_stateCode"]').replaceWith($(inputField));
      $form.find('input[name$="_stateCode"]').closest('.form-group').find('label').html('State/Province');
      $form.find('input[name$="_stateCode"]').attr('placeholder', $('.ship-bill-payment-pages').data('state-placeholder'));
      $form.find('input[name$="_stateCode"]').closest('.form-group').removeClass('required');
      $form.find('input[name$="_postalCode"]').closest('.form-group').find('label').html('Post Code');
    } else {
      $form.find('input[name$="_stateCode"]').replaceWith($(selectBox));
      $form.find('select[name$="_stateCode"]').replaceWith($(selectBox));
      $form.find('select[name$="_stateCode"]').closest('.form-group').find('label').html('State');

      if (!$form.find('select[name$="_stateCode"]').closest('.form-group').hasClass('required')) {
        $form.find('select[name$="_stateCode"]').closest('.form-group').addClass('required');
      }

      $form.find('input[name$="_postalCode"]').closest('.form-group').find('label').html('Zip Code');

      if (stVal && stVal !== null) {
        $form.find('select[name$="_stateCode"]').val(stVal);
      }
    }

    if (country === 'CA' || country === 'US') {
      $form.find('input[name$="_postalCode"]').attr('placeholder', $('#checkout-main').data('zipcode-label'));
    } else {
      $form.find('input[name$="_postalCode"]').attr('placeholder', $('#checkout-main').data('postalcode-label'));
    }
  }
}
/**
 * @function
 * @description get billing countries
 */


function getBillingCountries() {
  var url = $('.ship-bill-payment-pages').data('billcountries');
  $.ajax({
    url: url,
    method: 'GET',
    success: function success(response) {
      if (response && response.billingCountries) {
        window.Countries = response.billingCountries; // Trigger billing country change on page refresh based on billing address

        var billingCountryVal = $('.billing-address-form select[id$="_country"]').val();

        if (billingCountryVal !== null && billingCountryVal !== '') {
          $('.billing-address-form select[id$="_country"]').val(billingCountryVal).trigger('change');
        }
      }
    }
  });
}

function selectSavedCard() {
  $('.saved_cards').on('change', function () {
    var cardId = $(this).find('option:selected').val();
    var isBancontactCard = $(this).find('option:selected').text().toLowerCase().indexOf('bcmc') > -1;
    var ID = cardId.substr(13);

    var helpers = __webpack_require__(/*! adyen/adyen_checkout/helpers */ "./int_adyen_SFRA/cartridge/client/default/js/adyen_checkout/helpers.js");

    if ($('.paymentBlockContainer').hasClass('myStoredCard')) {
      var item = document.querySelector('.myStoredCard');
      var storedID = item.getAttribute('id');
      storedID = storedID.substr(20);
      document.querySelector('button[id=rb_storedCard' + storedID + ']').classList.remove('selected');
      document.querySelector('.myStoredCard').classList.remove('myStoredCard');
      document.querySelector('.paymentBlockContainer .selectedContainer').classList.remove('selectedContainer');

      if (storedID === ID) {
        $('form#dwfrm_billing').closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', false);
      } else {
        $('form#dwfrm_billing').closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', 'disabled');
        document.querySelector('#adyen-component-saved-form-field-filled').setAttribute('value', 'false');
      }
    }

    if (cardId === 'SelectFromSavedCards') {
      var newCardMethod = document.querySelector('button[id=rb_scheme]');
      newCardMethod.classList.add('selected');
      helpers.displaySelectedMethod(newCardMethod.getAttribute('value'));
      document.querySelector('.new-card').classList.add('d-none');
      document.querySelector('.enter-cvv').classList.add('d-none');
      var billingAddressFieldsfilled = $('#billing-address-field-filled').val();
      var adyenComponentSavedFieldsfilled = $('#adyen-component-saved-form-field-filled').val();
      var adyenFormIsEntered = $('#adyen-component-form-field-filled').hasClass('entered');

      if (billingAddressFieldsfilled === 'true' && adyenFormIsEntered === true || billingAddressFieldsfilled === 'true' && adyenComponentSavedFieldsfilled === 'true') {
        $('form#dwfrm_billing').closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', false);
        $('.paymentBlockContainer #component_scheme .adyen-checkout__card-input .adyen-checkout__loading-input__form .adyen-checkout__card__holderName .adyen-checkout__label .adyen-checkout__input-wrapper :input ').val($('#adyenCard-holderName').val());
      } else {
        $('.paymentBlockContainer #component_scheme .adyen-checkout__card-input .adyen-checkout__loading-input__form .adyen-checkout__card__holderName .adyen-checkout__label .adyen-checkout__input-wrapper :input ').val('');
        $('form#dwfrm_billing').closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', 'disabled');
      }
    } else {
      var holderName = $(this).find('option:selected').attr('holderName');
      holderName = holderName.replace(/\s\s+/g, ' ');
      $(this).find('option:selected').attr('holderName', holderName);
      $('.paymentBlockContainer #component_scheme .adyen-checkout__card-input .adyen-checkout__loading-input__form .adyen-checkout__card__holderName .adyen-checkout__label .adyen-checkout__input-wrapper :input ').val(holderName);
      var selectdStoredCard = document.querySelector('button[id=rb_storedCard' + ID + ']');
      selectdStoredCard.classList.add('selected');
      helpers.displaySelectedMethod(selectdStoredCard.getAttribute('value'));
      document.querySelector('#savedCardSelected').setAttribute('value', 'true');
      document.querySelector('#component_storedCard' + ID).classList.add('selectedContainer');
      document.querySelector('#container_storedCard' + ID).classList.add('myStoredCard');
      document.querySelector('.paymentMethodsList').classList.add('storedCard_selected');
      document.querySelector('.paymentBlockContainer .selectedContainer .adyen-checkout__card-input .adyen-checkout__loading-input__form  .adyen-checkout__card__form .adyen-checkout__card__exp-cvc .adyen-checkout__field--storedCard').classList.add('d-none');
      var isEntered = $('#saved_cards').find('option:selected').hasClass('entered');
      var adyenComponentSavedFormFieldsfilled = $('#adyen-component-saved-form-field-filled').val();

      if (adyenComponentSavedFormFieldsfilled === 'true' || isEntered === true) {
        $('form#dwfrm_billing').closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', false);
      } else {
        $('form#dwfrm_billing').closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', 'disabled');
      }

      if (isBancontactCard) {
        if ($('.gift-card-container').length === 0) {
          $('.redeem-gift-card').addClass('d-none');

          if ($('.js-redeem-gc').is(':checked')) {
            $('.js-redeem-gc').prop('checked', false).trigger('change');
          }
        }

        document.querySelector('.enter-cvv').classList.add('d-none');
        $('form#dwfrm_billing').closest('.data-checkout-stage').find('button.submit-payment').prop('disabled', false);
      } else {
        document.querySelector('.enter-cvv').classList.remove('d-none');
        $('.redeem-gift-card').removeClass('d-none');
      }

      document.querySelector('.new-card').classList.remove('d-none');
    }
  });
}

function newCard() {
  $('.new-card').on('click', function () {
    var newCardMethod = document.querySelector('button[id=rb_scheme]');
    newCardMethod.classList.add('selected');

    var helpers = __webpack_require__(/*! adyen/adyen_checkout/helpers */ "./int_adyen_SFRA/cartridge/client/default/js/adyen_checkout/helpers.js");

    helpers.displaySelectedMethod(newCardMethod.getAttribute('value'));
    var item = document.querySelector('.myStoredCard');
    var storedID = item.getAttribute('id');
    storedID = storedID.substr(20);
    document.querySelector('button[id=rb_storedCard' + storedID + ']').classList.remove('selected');
    $('#saved_cards').val($('#saved_cards option:first').val());

    if ($('.paymentBlockContainer').hasClass('myStoredCard')) {
      document.querySelector('.myStoredCard').classList.remove('myStoredCard');
      document.querySelector('.paymentBlockContainer .selectedContainer').classList.remove('selectedContainer');
    }

    document.querySelector('.new-card').classList.add('d-none');
    document.querySelector('.enter-cvv').classList.add('d-none');
  });
} // initialize the event on load.


(function () {
  init();
})();

module.exports = {
  init: init,
  updateStateOptions: updateStateOptions,
  getBillingCountries: getBillingCountries,
  selectSavedCard: selectSavedCard,
  newCard: newCard
};

/***/ }),

/***/ "./app_foundation_sfra/cartridge/client/default/js/giftOptions.js":
/*!************************************************************************!*\
  !*** ./app_foundation_sfra/cartridge/client/default/js/giftOptions.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var summaryHelpers = __webpack_require__(/*! ./checkout/summary */ "./app_foundation_sfra/cartridge/client/default/js/checkout/summary.js");

var klarnaAfterPayUtil = __webpack_require__(/*! ./klarnaAfterPayUtil.js */ "./app_foundation_sfra/cartridge/client/default/js/klarnaAfterPayUtil.js");
/**
 * Clear profanity validations
 */


function clearProfanityValidations() {
  if ($('#container-wrap.cart-page').length) {
    if ($('button[name$="chkoutButton"]').length) {
      $('button[name$="chkoutButton"]').prop('disabled', false);
    }

    if ($('.checkout-continue .js-checkout-btn').length) {
      $('.checkout-continue .js-checkout-btn').removeClass('disabled');
    }

    $('.paypal-cart-buttons-container').removeClass('d-none');
    $('.paypal-or-sfra').removeClass('d-none');
    $('.js-cart-applepay').removeClass('d-none');
  }

  var isShippingValid = $('form#dwfrm_shipping').length ? $('form#dwfrm_shipping')[0].checkValidity() : false;

  if ($('button.submit-shipping-method').length && $('button.submit-shipping-method').is(':visible') && isShippingValid) {
    $('button.submit-shipping-method').prop('disabled', false);
  }

  var isSavedCardSelected = $('#saved_cards').length ? $('#saved_cards').find('option:selected').hasClass('entered') : false;
  var isPaymentValid = $('#adyen-component-saved-form-field-filled').val() === 'true' || $('#adyen-component-form-field-filled').val() === 'true';

  if ($('button.submit-payment').length && $('button.submit-payment').is(':visible') && (isPaymentValid || isSavedCardSelected === true)) {
    $('button.submit-payment').prop('disabled', false);
  }
} // DIGITAL-21853 - Profanity validations for gift message

/* eslint-disable no-useless-escape */


function profanityCheck(el) {
  var profanityWords = window.SitePreferences.PROFANITY_WORDS;
  var result = false; // Profanity check for gift message

  var replacedText = $(el).val().replace(/[^éâêîôûàèùëïüÉÂÊÎÔÛÀÈÙÜËÏçöäæœÇß?ÖÄÆŒìòÌÒa-zA-Z0-9,./;'<>?:"!@#$%()_-\s]/gi, '');
  $(el).val(replacedText);
  var value = $(el).val();

  if ((typeof profanityWords === 'undefined' || profanityWords == 'null' || profanityWords == '' || value == '') && $(el).closest('.gift-message').length > 0) {
    $(el).closest('.gift-field').find('.gift-Message-error').remove();
    $(el).removeClass('customerror');
    clearProfanityValidations(el);
    return true;
  }

  profanityWords = profanityWords.split('|');
  var valuecheck = value.toLowerCase().replace(/[.,\/#@!$%\^&\*;:{}=\-_`~()?\+\[\]|'"<>]/g, ' ');
  var newValueCheck = valuecheck.replace(/[0-9]/g, ' ');
  var newValueCheckArray = newValueCheck.split(' ');

  if ($(el).closest('.gift-message').length > 0) {
    var intersection = newValueCheckArray.filter(function (element) {
      return profanityWords.includes(element);
    });

    if (intersection.length > 0 && intersection !== 'undefined') {
      result = true;
    }

    if (result) {
      $(el).addClass('customerror');
      $(el).closest('.gift-field').find('.gift-Message-error').remove();
      $(el).closest('.gift-field').append('<span class="gift-Message-error error">' + window.Resources.PROFANITY_INCORRECTCHARACTERSS + '</span>');

      if ($('#container-wrap.cart-page').length) {
        $('button[name$="chkoutButton"]').prop('disabled', true);
        $('.checkout-continue .js-checkout-btn').addClass('disabled');
        $('.paypal-or-sfra').addClass('d-none');
        $('.paypal-cart-buttons-container').addClass('d-none');
        $('.js-cart-applepay').addClass('d-none');
      }

      if ($('button.submit-shipping-method').length && $('button.submit-shipping-method').is(':visible')) {
        $('button.submit-shipping-method').prop('disabled', true);
      }

      if ($('button.submit-payment').length && $('button.submit-payment').is(':visible')) {
        $('button.submit-payment').prop('disabled', true);
      }

      $(el).closest('.js-gift-prod-data-holder').find('.js-copy-to-all-txt-holder').addClass('d-none');
      return false;
    }

    $(el).closest('.gift-field').find('.gift-Message-error').remove();
    $(el).removeClass('customerror');
    clearProfanityValidations(el);
    return true;
  }

  return true;
}
/**
 * Sets Gift Message on a line item
 * @param {object} $this - this object of triggered event
 */


function setGiftMessage($this) {
  var flagValid1 = profanityCheck($this.closest('.js-gift-prod-data-holder').find('.js-message-field-first'));
  var flagValid2 = profanityCheck($this.closest('.js-gift-prod-data-holder').find('.js-message-field-second'));
  var flagGreeting = profanityCheck($this.closest('.js-gift-prod-data-holder').find('.js-message-field-greeting'));
  var flagSender = profanityCheck($this.closest('.js-gift-prod-data-holder').find('.js-message-field-sender')); // Process form only when profanity check is passed

  if (flagValid1 && flagValid2 && flagGreeting && flagSender) {
    $this.closest('.js-gift-text-field-holder').find('.js-copy-to-all-txt-holder').removeClass('d-none');

    if ($this.closest('form.gift-message-form').length > 0) {
      var $triggeredForm = $this.closest('form.gift-message-form');
      var $giftInputWrapper = $triggeredForm.closest('.js-gift-text-field-holder').siblings('.gift-message-input-wrapper');
      var hasGiftMessage = false;
      var url;

      if ($this.hasClass('js-copy-to-all-txt-holder')) {
        var uuids = '';
        $('.text-field-holder').each(function () {
          if ($(this).closest('.js-gift-prod-data-holder').find('.js-addGift-msg').is(':checked')) {
            if (uuids.length > 0) {
              uuids += ',' + $(this).attr('data-uuid');
            } else {
              uuids += $(this).attr('data-uuid');
            }
          }
        });
        url = $this.attr('data-addgiftmessage-action') + '?giftMessageEnabled=all&uuid=' + uuids;
      } else {
        if ($giftInputWrapper.length > 0 && $giftInputWrapper.find('input.js-addGift-msg').is(':checked')) {
          hasGiftMessage = true;
        }

        url = $triggeredForm.attr('action') + '&giftMessageEnabled=' + hasGiftMessage;
      }

      $.ajax({
        url: url,
        dataType: 'json',
        data: $triggeredForm.serialize(),
        method: 'POST',
        success: function success() {},
        error: function error() {}
      });
    } else if ($this.hasClass('justChecked')) {
      $.ajax({
        url: $this.closest('.gift-message-input-wrapper').siblings('.js-gift-text-field-holder').find('form.gift-message-form').attr('action') + '&giftMessageEnabled=' + true,
        dataType: 'json',
        data: {},
        method: 'POST',
        success: function success() {},
        error: function error() {}
      });
    } else {
      $.ajax({
        url: $this.closest('.gift-message-input-wrapper').siblings('.js-gift-text-field-holder').find('form.gift-message-form').attr('action') + '&giftMessageEnabled=' + false,
        dataType: 'json',
        data: {},
        method: 'POST',
        success: function success() {},
        error: function error() {}
      });
    }
  }
}

function toggleGiftMessage() {
  $('body').on('change', '.js-addGift-msg', function (e) {
    e.preventDefault();
    var $this = $(this);
    var checked = $this.is(':checked');
    var contentToShow = $this.closest('.js-gift-prod-data-holder').find('.js-gift-text-field-holder');
    var firstMsgField = contentToShow.find('.js-message-field-first');
    var secondMsgField = contentToShow.find('.js-message-field-second');

    if (checked) {
      contentToShow.removeClass('d-none');
      $(this).addClass('justChecked');
      setGiftMessage($(this));
    } else {
      if ($(this).hasClass('justChecked')) {
        $(this).removeClass('justChecked');
      }

      firstMsgField.val('');
      secondMsgField.val('');
      firstMsgField.closest('.gift-message').find('.js-char-count-msg').html(0 + '/' + parseInt(firstMsgField.attr('maxlength')));
      secondMsgField.closest('.gift-message').find('.js-char-count-msg').html(0 + '/' + parseInt(secondMsgField.attr('maxlength')));
      contentToShow.find('.gift-Message-error').remove();
      setGiftMessage($(this));
      contentToShow.addClass('d-none');
      clearProfanityValidations($this);
    }
  });
} // on single click, copies data of one gift option and fills same to all other


function fillDataToallGiftFields() {
  $('body').on('click', '.js-copy-to-all-txt-holder', function () {
    var AddressToGiftField = $(this).closest('.js-gift-text-field-holder').find('.js-address-to-field').val().trim();
    var AddressToGiftFieldCount = $(this).closest('.js-gift-text-field-holder').find('.js-address-to-field').siblings('.js-char-count-msg').html();
    var AddressFromGiftField = $(this).closest('.js-gift-text-field-holder').find('.js-address-from-field').val().trim();
    var AddressFromGiftFieldCount = $(this).closest('.js-gift-text-field-holder').find('.js-address-from-field').siblings('.js-char-count-msg').html();
    var AddressMessageField1 = $(this).closest('.js-gift-text-field-holder').find('.js-message-field-first').val().trim();
    var AddressMessageField1Count = $(this).closest('.js-gift-text-field-holder').find('.js-message-field-first').siblings('.js-char-count-msg').html();
    var AddressMessageField2 = $(this).closest('.js-gift-text-field-holder').find('.js-message-field-second').val().trim();
    var AddressMessageField2Count = $(this).closest('.js-gift-text-field-holder').find('.js-message-field-second').siblings('.js-char-count-msg').html();
    var $this = $(this);
    $('.text-field-holder').each(function () {
      if ($(this).closest('.js-gift-prod-data-holder').find('.js-addGift-msg').is(':checked')) {
        $(this).find('.js-address-to-field').val(AddressToGiftField);
        $(this).find('.js-address-to-field').siblings('.js-char-count-msg').html(AddressToGiftFieldCount);
        $(this).find('.js-address-from-field').val(AddressFromGiftField);
        $(this).find('.js-address-from-field').siblings('.js-char-count-msg').html(AddressFromGiftFieldCount);
        $(this).find('.js-message-field-first').val(AddressMessageField1);
        $(this).find('.js-message-field-first').siblings('.js-char-count-msg').html(AddressMessageField1Count);
        $(this).find('.js-message-field-second').val(AddressMessageField2);
        $(this).find('.js-message-field-second').siblings('.js-char-count-msg').html(AddressMessageField2Count);
      }
    });
    setGiftMessage($this);
  });
}
/**
 * @param {object} data - update the complimentary gift box details
 */


function updateFreeGiftBoxContent(data) {
  if (data.totals.giftBox.complimentaryGiftBoxCount) {
    $('.complimentary-gift-box').removeClass('d-none');
    $('.complimentary-gift-box-msg').text(data.totals.giftBox.complimentaryGiftBoxCount && data.totals ? data.totals.giftBox.freeGiftBoxMessage : data.totals.giftBox.freeGiftBoxMessage);
  } else {
    $('.complimentary-gift-box').addClass('d-none');
  }
}
/**
 * re-renders the order totals and the number of items in the cart
 * @param {object} data - AJAX response from the server
 */


function updateCartTotals(data) {
  $('.js-shipping-item-cost').empty();
  data.shipping.forEach(function (shipmentModel) {
    if (shipmentModel.selectedShippingMethod) {
      var dom = '<div class=\'row\'><div class=\'col-7 col-sm-8\'><div class=\'d-flex align-items-center shipping-delivery-text\'><span class=\'text-capitalize\'>' + shipmentModel.selectedShippingMethod.displayName + '</span>';

      if (shipmentModel.shipmentType === 'WG') {
        dom += '<span class=\'info-icon tooltip wg-tooltip\'><svg class=\'svg-symbol info\' title=\'Info\'><use xlink:href=\'#info\'></use><span class=\'tooltip-content\'>' + $('.wg-message-tooltip').html() + '</span>';
      }

      if (shipmentModel.fullDeposit === true) {
        var validTootipContent = document.getElementById('deposit-message-tooltip');

        if (validTootipContent && validTootipContent.textContent.replace(/\n|\r|\s/gm, '') !== '') {
          dom += '<span class=\'info-icon tooltip wg-tooltip validated\' data-aid=\'deposit-message-tooltip\'><svg class=\'svg-symbol info\' title=\'Info\'><use xlink:href=\'#info\'></use>';
        }
      }

      dom += '</div></div>';
      dom += '<div class=\'col-5 col-sm-4\'> <p class=\'text-right shipping-cost\'>' + shipmentModel.selectedShippingMethod.shippingTotalPrice + '</p></div></div>';
      $('.js-shipping-item-cost').append(dom);
    }
  });
  $('.tax-total').empty().append(data.totals.totalTax);
  $('.grand-total').empty().append(data.totals.estimateTotal);
  $('.sub-total').empty().append(data.totals.subTotal);
  $('.minicart-quantity').empty().append(data.numItems);
  $('.minicart-link').attr({
    'aria-label': data.resources.minicartCountOfItems,
    title: data.resources.minicartCountOfItems
  });

  if (data.klarnaThresholdAcceptable && $('.klarna-express-button-wrapper').hasClass('d-none')) {
    $('.klarna-express-button-wrapper').removeClass('d-none');
  } else if (!data.klarnaThresholdAcceptable && !$('.klarna-express-button-wrapper').hasClass('d-none')) {
    $('.klarna-express-button-wrapper').addClass('d-none');
  }

  if (data.totals.orderLevelDiscountTotal.value > 0) {
    $('.order-discount').removeClass('hide-order-discount');
    $('.order-discount-total').empty().append('- ' + data.totals.orderLevelDiscountTotal.formatted);
  } else {
    $('.order-discount').addClass('hide-order-discount');
  }

  var $klarnaElement = $('.klarna-cart-message');

  if ($('.klarna-afterpay-message').length) {
    $klarnaElement = $('.klarna-afterpay-message');
  }

  if (data.BOPISFlags.wgProductCount > 0 && $klarnaElement.length) {
    $klarnaElement.addClass('d-none');
  } else {
    $klarnaElement.removeClass('d-none');

    if ($('.klarna-cart-message').length) {
      var purchaseAmount = (data.totals.orderBalance * 100).toFixed();
      $('klarna-placement').attr('data-purchase-amount', purchaseAmount);
      window.KlarnaOnsiteService = window.KlarnaOnsiteService || [];
      window.KlarnaOnsiteService.push({
        eventName: 'refresh-placements'
      });
    } else if ($('.klarna-afterpay-message').length) {
      klarnaAfterPayUtil.updateKlarnaAfterpayMessaging(data.totals.orderBalance);
    }
  }

  if (data.totals.shippingLevelDiscountTotal.value > 0 && data.totals.adjustedShippingTotalPrice > 0) {
    $('.shipping-discount').removeClass('hide-shipping-discount');
    $('.shipping-discount-total').empty().append('- ' + data.totals.shippingLevelDiscountTotal.formatted);
  } else {
    $('.shipping-discount').addClass('hide-shipping-discount');
  }

  if (data.totals.giftBox.hasGiftBox) {
    if (!data.totals.giftBox.isComplimentary) {
      $('.gift-boxes-total').text(data.totals.giftBox.giftBoxTotal);
      $('.gift-boxes-label').text(data.totals ? data.totals.giftBox.giftBoxMsg : data.totals.giftBox.giftBoxMsg);

      if (data.totals.giftBox.giftBoxCount) {
        $('.gift-box-total').removeClass('d-none');
      } else {
        $('.gift-box-total').addClass('d-none');
      }

      updateFreeGiftBoxContent(data);
    } else {
      $('.has-complimentary').removeClass('d-none');
      $('.no-complimentary').addClass('d-none');
      $('.free-msg').removeClass('d-none');
    }
  } else if (!data.totals.giftBox.isComplimentary) {
    $('.gift-box-total').addClass('d-none');
    $('.complimentary-gift-box').addClass('d-none');
  } else {
    $('.has-complimentary').addClass('d-none');
    $('.no-complimentary').removeClass('d-none');
    $('.free-msg').addClass('d-none');
  }

  data.items.forEach(function (item) {
    if (data.totals.orderLevelDiscountTotal.value > 0) {
      $('.coupons-and-promos').empty().append(data.totals.discountsHtml);
    }

    if (item.appliedProductPromotionsHtml) {
      $('.item-' + item.UUID).empty().append(item.appliedProductPromotionsHtml);
    } else {
      $('.item-' + item.UUID).empty();
    }

    $('.uuid-' + item.UUID + ' .unit-price').empty().append(item.renderedPrice);
    $('.line-item-price-' + item.UUID + ' .unit-price').empty().append(item.renderedPrice);
    $('.item-total-' + item.UUID).empty().append(item.priceTotal.renderedPrice);
  });
}
/**
 * Add or removes Gift Box by checking/unchecking checkbox on Cart page
 */


function addRemoveGiftbox() {
  $('body').on('click', '.AddGift-box, .complimentary-opt-out, .complimentary-opt-in', function () {
    var url = '';

    if ($(this).hasClass('complimentary-opt-out')) {
      url = $(this).attr('data-removeall-action');
      $('input.AddGift-box').prop('checked', false);
    } else if ($(this).hasClass('complimentary-opt-in')) {
      url = $(this).attr('data-addall-action');
      $('input.AddGift-box').prop('checked', true);
    } else if ($(this).hasClass('AddGift-box')) {
      if ($(this).is(':checked')) {
        url = $(this).attr('data-addgiftbox-action');
      } else {
        url = $(this).attr('data-removegiftbox-action');
      }
    }

    if (url) {
      $.spinner().start();
      $.ajax({
        url: url,
        method: 'POST',
        success: function success(data) {
          if ($('#checkout-main').length) {
            summaryHelpers.updateTotals(data.totals, data);
          } else {
            updateCartTotals(data);
          }

          $.spinner().stop();
        },
        error: function error() {
          $.spinner().stop();
        }
      });
    }
  });
}
/**
 * Initiates Gift Message events
 */


function initGiftMessage() {
  $('body').on('focusout', '.gift-message-form .js-gift-message-field', function () {
    setGiftMessage($(this));
  });
}

module.exports = {
  toggleGiftMessage: toggleGiftMessage,
  fillDataToallGiftFields: fillDataToallGiftFields,
  addRemoveGiftbox: addRemoveGiftbox,
  initGiftMessage: initGiftMessage
};

/***/ }),

/***/ "./app_foundation_sfra/cartridge/client/default/js/klarnaAfterPayUtil.js":
/*!*******************************************************************************!*\
  !*** ./app_foundation_sfra/cartridge/client/default/js/klarnaAfterPayUtil.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function openBnplOverlayDeskTop() {
  $('.bnpl-overlay-container').css('width', '503px');
  $('body').addClass('bnpl-overlay-container-modal-open');
}

function closeBnplOverlayDeskTop() {
  $('.bnpl-overlay-container').css('width', '0px');
  $('.bnpl-overlay').remove(); // Remove darkened background overlay

  $('body').removeClass('bnpl-overlay-container-modal-open');
}

function openBnplOverlayMobile() {
  $('.bnpl-overlay-container').addClass('mobile-show');
  $('body').addClass('bnpl-overlay-container-modal-open');
}

function closeBnplOverlayMobile() {
  $('.bnpl-overlay-container').removeClass('mobile-show');
  $('.bnpl-overlay').remove(); // Remove darkened background overlay

  $('body').removeClass('bnpl-overlay-container-modal-open');
}

function checkThressholdValues(thressholdValue, orderTotal) {
  if (!thressholdValue) {
    return false;
  } else if (orderTotal > 0 && orderTotal >= thressholdValue || orderTotal === 0) {
    return false;
  }

  return true;
}
/**
*updates the klarna and afterpay cart messaging on page load
*and on ajax call
*@param {number} updatedPurchaseAmount
*/


function updateKlarnaAfterpayMessaging(updatedPurchaseAmount) {
  var showKlarnaContent = false;
  var showAfterPayContent = false;

  if ($('.klarna-afterpay-message').length) {
    showKlarnaContent = $('.klarna-afterpay-message').data('isklarnaenabled');
    showAfterPayContent = $('.klarna-afterpay-message').data('isafterpayenabled');
  }

  if (showAfterPayContent && showKlarnaContent && $('.klarna-afterpay-content').length > 0) {
    var maxMobile = 960;
    var klarnaLimit = $('.klarna-afterpay-message').data('klarnalimit');
    var afterPayLimit = $('.klarna-afterpay-message').data('afterpaylimit');
    var orderTotal = updatedPurchaseAmount >= 0 ? updatedPurchaseAmount : $('.klarna-afterpay-message').data('orderbalance');
    orderTotal = parseFloat(orderTotal);
    showKlarnaContent = checkThressholdValues(klarnaLimit, orderTotal);
    showAfterPayContent = checkThressholdValues(afterPayLimit, orderTotal);
    $('.klarna-afterpay-content').removeClass('showing');

    if (orderTotal > 0 && (showKlarnaContent || showAfterPayContent)) {
      if (showKlarnaContent) {
        $('.klarna-logo').show();
        $('.js-klarna-tab').show();
      } else {
        $('.klarna-logo').hide();
        $('.js-klarna-tab').hide();
      }

      if (showAfterPayContent) {
        $('.afterpay-logo').show();
        $('.js-afterpay-tab').show();
      } else {
        $('.afterpay-logo').hide();
        $('.js-afterpay-tab').hide();
      }

      if (!showAfterPayContent || !showKlarnaContent) {
        $('.orText').hide();
      } else {
        $('.orText').show();
      }

      var segCost = parseFloat(orderTotal / 4);
      segCost = segCost.toFixed(2);
      var formattedAmount = window.Resources.CURRENCY_SYMBOL == '€' ? segCost + window.Resources.CURRENCY_SYMBOL : window.Resources.CURRENCY_SYMBOL + segCost;
      $('.klarna-afterpay-content .payment').text(formattedAmount);
      $('.flyOutKlarnaInfo .dollar_amt').text(formattedAmount);
      $('.bnpl-overlay-container').appendTo('body');
      $('.buyNowPayLaterInfo').on('click', function () {
        if ($('.ui-widget-overlay.ui-front.bnpl-overlay').length == 0) {
          $('body').prepend('<div class="ui-widget-overlay ui-front bnpl-overlay"></div>');
        }

        $('.tabs-nav li').removeClass('active');
        $('.tabs-nav li').removeClass('inactive');

        if (showAfterPayContent && showKlarnaContent) {
          // Show the first tab and hide the rest
          $('.tabs-nav li:first-child').addClass('active');
          $('.tabs-nav li:nth-child(2)').addClass('inactive');
          $('.tab-content-messaging').hide();
          $('.tab-content-messaging:first').show(); // Tab Click function

          $('.tabs-nav li').on('click', function () {
            $('.tabs-nav li').removeClass('active');
            $('.tabs-nav li').addClass('inactive');
            $(this).removeClass('inactive');
            $(this).addClass('active');
            $('.tab-content-messaging').hide();
            var activeTab = '#' + $(this).find('a').attr('class');
            $(activeTab).fadeIn(400);
          });
        } else if (showKlarnaContent) {
          $('.tabs-nav li:first-child').addClass('active');
          $('.tab-content-messaging').hide();
          $('.tab-content-messaging:first').show();
        } else if (showAfterPayContent) {
          $('.tabs-nav li:nth-child(2)').addClass('active');
          $('.tab-content-messaging').hide();
          $('.tab-content-messaging:nth-child(2)').show();
        }

        if ($('.bnpl-overlay-container').length > 1) {
          $('.bnpl-overlay-container')[1].remove();
        }

        if ($(window).width() >= maxMobile) {
          openBnplOverlayDeskTop();
          $('.bnpl-overlay-container-close, .bnpl-overlay').on('click', function () {
            closeBnplOverlayDeskTop();
          });
        } else {
          openBnplOverlayMobile();
          $('.bnpl-overlay-container-close, .bnpl-overlay').on('click', function () {
            closeBnplOverlayMobile();
          });
        }
      });
      $('.klarna-afterpay-content').addClass('showing');
    }
  }
}

module.exports = {
  updateKlarnaAfterpayMessaging: updateKlarnaAfterpayMessaging
};

/***/ }),

/***/ "./app_foundation_sfra/cartridge/client/default/js/modalTabToggle.js":
/*!***************************************************************************!*\
  !*** ./app_foundation_sfra/cartridge/client/default/js/modalTabToggle.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // on click of anchor link(signin/joinus) goes to respective modal tab(signin-tab/createaccount-tab)

function modalTabToggle() {
  $('body').on('click', '.login-help a', function () {
    // Find which button was clicked, so we know which tab to target
    if ($(this).hasClass('create-account-sfra')) {
      $('#register-tab').trigger('click');
    } else {
      $('#login-tab').trigger('click');
    }
  });
}

module.exports = {
  modalTabToggle: modalTabToggle
};

/***/ }),

/***/ "./app_storefront_base/cartridge/client/default/js/checkout/address.js":
/*!*****************************************************************************!*\
  !*** ./app_storefront_base/cartridge/client/default/js/checkout/address.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Populate the Billing Address Summary View
 * @param {string} parentSelector - the top level DOM selector for a unique address summary
 * @param {Object} address - the address data
 */

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));

function populateAddressSummary(parentSelector, address) {
  $.each(address, function (attr) {
    var val = address[attr];
    $('.' + attr, parentSelector).text(val || '');
  });
}
/**
 * returns a formed <option /> element
 * @param {Object} shipping - the shipping object (shipment model)
 * @param {boolean} selected - current shipping is selected (for PLI)
 * @param {order} order - the Order model
 * @param {Object} [options] - options
 * @returns {Object} - the jQuery / DOMElement
 */


function optionValueForAddress(shipping, selected, order, options) {
  var safeOptions = options || {};
  var isBilling = safeOptions.type && safeOptions.type === 'billing';
  var className = safeOptions.className || '';
  var isSelected = selected;
  var isNew = !shipping;

  if (typeof shipping === 'string') {
    return $('<option class="' + className + '" disabled>' + shipping + '</option>');
  }

  var safeShipping = shipping || {};
  var shippingAddress = safeShipping.shippingAddress || {};

  if (isBilling && isNew && !order.billing.matchingAddressId) {
    shippingAddress = order.billing.billingAddress.address || {};
    isNew = false;
    isSelected = true;
    safeShipping.UUID = 'manual-entry';
  }

  var uuid = safeShipping.UUID ? safeShipping.UUID : 'new';
  var optionEl = $('<option class="' + className + '" />');
  optionEl.val(uuid);
  var title;

  if (isNew) {
    title = order.resources.addNewAddress;
  } else {
    title = [];

    if (shippingAddress.firstName) {
      title.push(shippingAddress.firstName);
    }

    if (shippingAddress.lastName) {
      title.push(shippingAddress.lastName);
    }

    if (shippingAddress.address1) {
      title.push(shippingAddress.address1);
    }

    if (shippingAddress.address2) {
      title.push(shippingAddress.address2);
    }

    if (shippingAddress.city) {
      if (shippingAddress.state) {
        title.push(shippingAddress.city + ',');
      } else {
        title.push(shippingAddress.city);
      }
    }

    if (shippingAddress.stateCode) {
      title.push(shippingAddress.stateCode);
    }

    if (shippingAddress.postalCode) {
      title.push(shippingAddress.postalCode);
    }

    if (!isBilling && safeShipping.selectedShippingMethod) {
      title.push('-');
      title.push(safeShipping.selectedShippingMethod.displayName);
    }

    if (title.length > 2) {
      title = title.join(' ');
    } else {
      title = order.resources.newAddress;
    }
  }

  optionEl.text(title);
  var keyMap = {
    'data-first-name': 'firstName',
    'data-last-name': 'lastName',
    'data-address1': 'address1',
    'data-address2': 'address2',
    'data-city': 'city',
    'data-state-code': 'stateCode',
    'data-postal-code': 'postalCode',
    'data-country-code': 'countryCode',
    'data-phone': 'phone'
  };
  $.each(keyMap, function (key) {
    var mappedKey = keyMap[key];
    var mappedValue = shippingAddress[mappedKey]; // In case of country code

    if (mappedValue && (0, _typeof2["default"])(mappedValue) === 'object') {
      mappedValue = mappedValue.value;
    }

    optionEl.attr(key, mappedValue || '');
  });
  var giftObj = {
    'data-is-gift': 'isGift',
    'data-gift-message': 'giftMessage'
  };
  $.each(giftObj, function (key) {
    var mappedKey = giftObj[key];
    var mappedValue = safeShipping[mappedKey];
    optionEl.attr(key, mappedValue || '');
  });

  if (isSelected) {
    optionEl.attr('selected', true);
  }

  return optionEl;
}
/**
 * returns address properties from a UI form
 * @param {Form} form - the Form element
 * @returns {Object} - a JSON object with all values
 */


function getAddressFieldsFromUI(form) {
  var address = {
    firstName: $('input[name$=_firstName]', form).val(),
    lastName: $('input[name$=_lastName]', form).val(),
    address1: $('input[name$=_address1]', form).val(),
    address2: $('input[name$=_address2]', form).val(),
    city: $('input[name$=_city]', form).val(),
    postalCode: $('input[name$=_postalCode]', form).val(),
    stateCode: $('select[name$=_stateCode],input[name$=_stateCode]', form).val(),
    countryCode: $('select[name$=_country]', form).val(),
    phone: $('input[name$=_phone]', form).val()
  };
  return address;
}

module.exports = {
  methods: {
    populateAddressSummary: populateAddressSummary,
    optionValueForAddress: optionValueForAddress,
    getAddressFieldsFromUI: getAddressFieldsFromUI
  },
  showDetails: function showDetails() {
    $('.btn-show-details').on('click', function () {
      var form = $(this).closest('form');
      form.attr('data-address-mode', 'details');
      form.find('.multi-ship-address-actions').removeClass('d-none');
      form.find('.multi-ship-action-buttons .col-12.btn-save-multi-ship').addClass('d-none');
    });
  },
  addNewAddress: function addNewAddress() {
    $('.btn-add-new').on('click', function () {
      var $el = $(this);

      if ($el.parents('#dwfrm_billing').length > 0) {
        // Handle billing address case
        $('body').trigger('checkout:clearBillingForm');
        var $option = $($el.parents('form').find('.addressSelector option')[0]);
        $option.attr('value', 'new');
        var $newTitle = $('#dwfrm_billing input[name=localizedNewAddressTitle]').val();
        $option.text($newTitle);
        $option.prop('selected', 'selected');
        $el.parents('[data-address-mode]').attr('data-address-mode', 'new');
      } else {
        // Handle shipping address case
        var $newEl = $el.parents('form').find('.addressSelector option[value=new]');
        $newEl.prop('selected', 'selected');
        $newEl.parent().trigger('change');
      }
    });
  }
};

/***/ }),

/***/ "./app_storefront_base/cartridge/client/default/js/checkout/billing.js":
/*!*****************************************************************************!*\
  !*** ./app_storefront_base/cartridge/client/default/js/checkout/billing.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var addressHelpers = __webpack_require__(/*! ./address */ "./app_storefront_base/cartridge/client/default/js/checkout/address.js");

var cleave = __webpack_require__(/*! ../components/cleave */ "./app_storefront_base/cartridge/client/default/js/components/cleave.js");
/**
 * updates the billing address selector within billing forms
 * @param {Object} order - the order model
 * @param {Object} customer - the customer model
 */


function updateBillingAddressSelector(order, customer) {
  var shippings = order.shipping;
  var form = $('form[name$=billing]')[0];
  var $billingAddressSelector = $('.addressSelector', form);
  var hasSelectedAddress = false;

  if ($billingAddressSelector && $billingAddressSelector.length === 1) {
    $billingAddressSelector.empty(); // Add New Address option

    $billingAddressSelector.append(addressHelpers.methods.optionValueForAddress(null, false, order, {
      type: 'billing'
    })); // Separator -

    $billingAddressSelector.append(addressHelpers.methods.optionValueForAddress(order.resources.shippingAddresses, false, order, {
      // className: 'multi-shipping',
      type: 'billing'
    }));
    shippings.forEach(function (aShipping) {
      var isSelected = order.billing.matchingAddressId === aShipping.UUID;
      hasSelectedAddress = hasSelectedAddress || isSelected; // Shipping Address option

      $billingAddressSelector.append(addressHelpers.methods.optionValueForAddress(aShipping, isSelected, order, {
        // className: 'multi-shipping',
        type: 'billing'
      }));
    });

    if (customer.addresses && customer.addresses.length > 0) {
      $billingAddressSelector.append(addressHelpers.methods.optionValueForAddress(order.resources.accountAddresses, false, order));
      customer.addresses.forEach(function (address) {
        var isSelected = order.billing.matchingAddressId === address.ID;
        hasSelectedAddress = hasSelectedAddress || isSelected; // Customer Address option

        $billingAddressSelector.append(addressHelpers.methods.optionValueForAddress({
          UUID: 'ab_' + address.ID,
          shippingAddress: address
        }, isSelected, order, {
          type: 'billing'
        }));
      });
    }
  }

  if (hasSelectedAddress || !order.billing.matchingAddressId && order.billing.billingAddress.address) {
    // show
    $(form).attr('data-address-mode', 'edit');
  } else {
    $(form).attr('data-address-mode', 'new');
  }

  $billingAddressSelector.show();
}
/**
 * Updates the billing address form values within payment forms without any payment instrument validation
 * @param {Object} order - the order model
 */


function updateBillingAddress(order) {
  var billing = order.billing;
  if (!billing.billingAddress || !billing.billingAddress.address) return;
  var form = $('form[name=dwfrm_billing]');
  if (!form) return;
  $('input[name$=_firstName]', form).val(billing.billingAddress.address.firstName);
  $('input[name$=_lastName]', form).val(billing.billingAddress.address.lastName);
  $('input[name$=_address1]', form).val(billing.billingAddress.address.address1);
  $('input[name$=_address2]', form).val(billing.billingAddress.address.address2);
  $('input[name$=_city]', form).val(billing.billingAddress.address.city);
  $('input[name$=_postalCode]', form).val(billing.billingAddress.address.postalCode);
  $('select[name$=_stateCode],input[name$=_stateCode]', form).val(billing.billingAddress.address.stateCode);
  $('select[name$=_country]', form).val(billing.billingAddress.address.countryCode.value);
  $('input[name$=_phone]', form).val(billing.billingAddress.address.phone);
  $('input[name$=_email]', form).val(order.orderEmail);
}
/**
 * Validate and update payment instrument form fields
 * @param {Object} order - the order model
 */


function validateAndUpdateBillingPaymentInstrument(order) {
  var billing = order.billing;
  if (!billing.payment || !billing.payment.selectedPaymentInstruments || billing.payment.selectedPaymentInstruments.length <= 0) return;
  var form = $('form[name=dwfrm_billing]');
  if (!form) return;
  var instrument = billing.payment.selectedPaymentInstruments[0];
  $('select[name$=expirationMonth]', form).val(instrument.expirationMonth);
  $('select[name$=expirationYear]', form).val(instrument.expirationYear); // Force security code and card number clear

  $('input[name$=securityCode]', form).val('');
  $('input[name$=cardNumber]').data('cleave').setRawValue('');
}
/**
 * Updates the billing address form values within payment forms
 * @param {Object} order - the order model
 */


function updateBillingAddressFormValues(order) {
  module.exports.methods.updateBillingAddress(order);
  module.exports.methods.validateAndUpdateBillingPaymentInstrument(order);
}
/**
 * clears the billing address form values
 */


function clearBillingAddressFormValues() {
  updateBillingAddressFormValues({
    billing: {
      billingAddress: {
        address: {
          countryCode: {}
        }
      }
    }
  });
}
/**
 * update billing address summary and contact information
 * @param {Object} order - checkout model to use as basis of new truth
 */


function updateBillingAddressSummary(order) {
  // update billing address summary
  addressHelpers.methods.populateAddressSummary('.billing .address-summary', order.billing.billingAddress.address); // update billing parts of order summary

  $('.order-summary-email').text(order.orderEmail);

  if (order.billing.billingAddress.address) {
    $('.order-summary-phone').text(order.billing.billingAddress.address.phone);
  }
}
/**
 * Updates the billing information in checkout, based on the supplied order model
 * @param {Object} order - checkout model to use as basis of new truth
 * @param {Object} customer - customer model to use as basis of new truth
 * @param {Object} [options] - options
 */


function updateBillingInformation(order, customer) {
  updateBillingAddressSelector(order, customer); // update billing address form

  updateBillingAddressFormValues(order); // update billing address summary and billing parts of order summary

  updateBillingAddressSummary(order);
}
/**
 * Updates the payment information in checkout, based on the supplied order model
 * @param {Object} order - checkout model to use as basis of new truth
 */


function updatePaymentInformation(order) {
  // update payment details
  var $paymentSummary = $('.payment-details');
  var htmlToAppend = '';

  if (order.billing.payment && order.billing.payment.selectedPaymentInstruments && order.billing.payment.selectedPaymentInstruments.length > 0) {
    htmlToAppend += '<span>' + order.resources.cardType + ' ' + order.billing.payment.selectedPaymentInstruments[0].type + '</span><div>' + order.billing.payment.selectedPaymentInstruments[0].maskedCreditCardNumber + '</div><div><span>' + order.resources.cardEnding + ' ' + order.billing.payment.selectedPaymentInstruments[0].expirationMonth + '/' + order.billing.payment.selectedPaymentInstruments[0].expirationYear + '</span></div>';
  }

  $paymentSummary.empty().append(htmlToAppend);
}
/**
 * clears the credit card form
 */


function clearCreditCardForm() {
  $('input[name$="_cardNumber"]').data('cleave').setRawValue('');
  $('select[name$="_expirationMonth"]').val('');
  $('select[name$="_expirationYear"]').val('');
  $('input[name$="_securityCode"]').val('');
}

module.exports = {
  methods: {
    updateBillingAddressSelector: updateBillingAddressSelector,
    updateBillingAddressFormValues: updateBillingAddressFormValues,
    clearBillingAddressFormValues: clearBillingAddressFormValues,
    updateBillingInformation: updateBillingInformation,
    updatePaymentInformation: updatePaymentInformation,
    clearCreditCardForm: clearCreditCardForm,
    updateBillingAddress: updateBillingAddress,
    validateAndUpdateBillingPaymentInstrument: validateAndUpdateBillingPaymentInstrument,
    updateBillingAddressSummary: updateBillingAddressSummary
  },
  showBillingDetails: function showBillingDetails() {
    $('.btn-show-billing-details').on('click', function () {
      $(this).parents('[data-address-mode]').attr('data-address-mode', 'new');
    });
  },
  hideBillingDetails: function hideBillingDetails() {
    $('.btn-hide-billing-details').on('click', function () {
      $(this).parents('[data-address-mode]').attr('data-address-mode', 'shipment');
    });
  },
  selectBillingAddress: function selectBillingAddress() {
    $('.payment-form .addressSelector').on('change', function () {
      var form = $(this).parents('form')[0];
      var selectedOption = $('option:selected', this);
      var optionID = selectedOption[0].value;

      if (optionID === 'new') {
        // Show Address
        $(form).attr('data-address-mode', 'new');
      } else {
        // Hide Address
        $(form).attr('data-address-mode', 'shipment');
      } // Copy fields


      var attrs = selectedOption.data();
      var element;
      Object.keys(attrs).forEach(function (attr) {
        element = attr === 'countryCode' ? 'country' : attr;

        if (element === 'cardNumber') {
          $('.cardNumber').data('cleave').setRawValue(attrs[attr]);
        } else {
          $('[name$=' + element + ']', form).val(attrs[attr]);
        }
      });
    });
  },
  handleCreditCardNumber: function handleCreditCardNumber() {
    cleave.handleCreditCardNumber('.cardNumber', '#cardType');
  },
  santitizeForm: function santitizeForm() {
    $('body').on('checkout:serializeBilling', function (e, data) {
      var serializedForm = cleave.serializeData(data.form);
      data.callback(serializedForm);
    });
  },
  selectSavedPaymentInstrument: function selectSavedPaymentInstrument() {
    $(document).on('click', '.saved-payment-instrument', function (e) {
      e.preventDefault();
      $('.saved-payment-security-code').val('');
      $('.saved-payment-instrument').removeClass('selected-payment');
      $(this).addClass('selected-payment');
      $('.saved-payment-instrument .card-image').removeClass('checkout-hidden');
      $('.saved-payment-instrument .security-code-input').addClass('checkout-hidden');
      $('.saved-payment-instrument.selected-payment' + ' .card-image').addClass('checkout-hidden');
      $('.saved-payment-instrument.selected-payment ' + '.security-code-input').removeClass('checkout-hidden');
    });
  },
  addNewPaymentInstrument: function addNewPaymentInstrument() {
    $('.btn.add-payment').on('click', function (e) {
      e.preventDefault();
      $('.payment-information').data('is-new-payment', true);
      clearCreditCardForm();
      $('.credit-card-form').removeClass('checkout-hidden');
      $('.user-payment-instruments').addClass('checkout-hidden');
    });
  },
  cancelNewPayment: function cancelNewPayment() {
    $('.cancel-new-payment').on('click', function (e) {
      e.preventDefault();
      $('.payment-information').data('is-new-payment', false);
      clearCreditCardForm();
      $('.user-payment-instruments').removeClass('checkout-hidden');
      $('.credit-card-form').addClass('checkout-hidden');
    });
  },
  clearBillingForm: function clearBillingForm() {
    $('body').on('checkout:clearBillingForm', function () {
      clearBillingAddressFormValues();
    });
  },
  paymentTabs: function paymentTabs() {
    $('.payment-options .nav-item').on('click', function (e) {
      e.preventDefault();
      var methodID = $(this).data('method-id');
      $('.payment-information').data('payment-method-id', methodID);
    });
  }
};

/***/ }),

/***/ "./app_storefront_base/cartridge/client/default/js/checkout/customer.js":
/*!******************************************************************************!*\
  !*** ./app_storefront_base/cartridge/client/default/js/checkout/customer.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var formHelpers = __webpack_require__(/*! ./formErrors */ "./app_storefront_base/cartridge/client/default/js/checkout/formErrors.js");

var scrollAnimate = __webpack_require__(/*! ../components/scrollAnimate */ "./app_storefront_base/cartridge/client/default/js/components/scrollAnimate.js");

var createErrorNotification = __webpack_require__(/*! ../components/errorNotification */ "./app_storefront_base/cartridge/client/default/js/components/errorNotification.js");

var GUEST_FORM = '#guest-customer';
var REGISTERED_FORM = '#registered-customer';
var ERROR_SECTION = '.customer-error';
/**
 * @returns {boolean} If guest is active, registered is not visible
 */

function isGuestFormActive() {
  return $(REGISTERED_FORM).hasClass('d-none');
}
/**
 * Clear any previous errors in the customer form.
 */


function clearErrors() {
  $(ERROR_SECTION).children().remove();
  formHelpers.clearPreviousErrors('.customer-information-block');
}
/**
 * @param {Object} customerData - data includes checkout related customer information
 * @param {Object} orderData - data includes checkout related order information
 */


function updateCustomerInformation(customerData, orderData) {
  var $container = $('.customer-summary');
  var $summaryDetails = $container.find('.summary-details');
  var email = customerData.profile && customerData.profile.email ? customerData.profile.email : orderData.orderEmail;
  $summaryDetails.find('.customer-summary-email').text(email);

  if (customerData.registeredUser) {
    $container.find('.edit-button').hide();
  } else {
    $container.find('.edit-button').show();
  }
}
/**
 * Handle response from the server for valid or invalid form fields.
 * @param {Object} defer - the deferred object which will resolve on success or reject.
 * @param {Object} data - the response data with the invalid form fields or
 *  valid model data.
 */


function customerFormResponse(defer, data) {
  var parentForm = isGuestFormActive() ? GUEST_FORM : REGISTERED_FORM;
  var formSelector = '.customer-section ' + parentForm; // highlight fields with errors

  if (data.error) {
    if (data.fieldErrors.length) {
      data.fieldErrors.forEach(function (error) {
        if (Object.keys(error).length) {
          formHelpers.loadFormErrors(formSelector, error);
        }
      });
    }

    if (data.customerErrorMessage) {
      createErrorNotification(ERROR_SECTION, data.customerErrorMessage);
    }

    if (data.fieldErrors.length || data.customerErrorMessage || data.serverErrors && data.serverErrors.length) {
      defer.reject(data);
    }

    if (data.cartError) {
      window.location.href = data.redirectUrl;
      defer.reject();
    }
  } else {
    // Populate the Address Summary
    $('body').trigger('checkout:updateCheckoutView', {
      order: data.order,
      customer: data.customer,
      csrfToken: data.csrfToken
    });
    scrollAnimate($('.shipping-form'));
    defer.resolve(data);
  }
}
/**
 *
 * @param {boolean} registered - wether a registered login block will be used
 */


function chooseLoginBlock(registered) {
  $(ERROR_SECTION).find('.alert').remove();
  $('#password').val('');

  if (registered) {
    $(REGISTERED_FORM).removeClass('d-none');
    $(GUEST_FORM).addClass('d-none');
    $('#email').val($('#email-guest').val());
  } else {
    $(REGISTERED_FORM).addClass('d-none');
    $(GUEST_FORM).removeClass('d-none');
    $('#email').val('');
  }
}

module.exports = {
  /**
   * Listeners for customer form
   */
  initListeners: function initListeners() {
    // 1. password
    var customerLogin = '.js-login-customer';
    var cancelLogin = '.js-cancel-login';
    var registered;

    if (customerLogin.length !== 0) {
      $('body').on('click', customerLogin, function (e) {
        registered = true;
        e.preventDefault();
        chooseLoginBlock(registered);
      });
    }

    if (cancelLogin.length !== 0) {
      $('body').on('click', cancelLogin, function (e) {
        registered = false;
        e.preventDefault();
        chooseLoginBlock(registered);
      });
    }
  },
  methods: {
    clearErrors: clearErrors,
    updateCustomerInformation: updateCustomerInformation,
    customerFormResponse: customerFormResponse,
    isGuestFormActive: isGuestFormActive
  },
  vars: {
    GUEST_FORM: GUEST_FORM,
    REGISTERED_FORM: REGISTERED_FORM
  }
};

/***/ }),

/***/ "./app_storefront_base/cartridge/client/default/js/checkout/formErrors.js":
/*!********************************************************************************!*\
  !*** ./app_storefront_base/cartridge/client/default/js/checkout/formErrors.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var scrollAnimate = __webpack_require__(/*! ../components/scrollAnimate */ "./app_storefront_base/cartridge/client/default/js/components/scrollAnimate.js");
/**
 * Display error messages and highlight form fields with errors.
 * @param {string} parentSelector - the form which contains the fields
 * @param {Object} fieldErrors - the fields with errors
 */


function loadFormErrors(parentSelector, fieldErrors) {
  // eslint-disable-line
  // Display error messages and highlight form fields with errors.
  $.each(fieldErrors, function (attr) {
    $('*[name=' + attr + ']', parentSelector).addClass('is-invalid').siblings('.invalid-feedback').html(fieldErrors[attr]);
  }); // Animate to top of form that has errors

  scrollAnimate($(parentSelector));
}
/**
 * Clear the form errors.
 * @param {string} parentSelector - the parent form selector.
 */


function clearPreviousErrors(parentSelector) {
  $(parentSelector).find('.form-control.is-invalid').removeClass('is-invalid');
  $('.error-message').hide();
}

module.exports = {
  loadFormErrors: loadFormErrors,
  clearPreviousErrors: clearPreviousErrors
};

/***/ }),

/***/ "./app_storefront_base/cartridge/client/default/js/checkout/shipping.js":
/*!******************************************************************************!*\
  !*** ./app_storefront_base/cartridge/client/default/js/checkout/shipping.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));

var addressHelpers = __webpack_require__(/*! ./address */ "./app_storefront_base/cartridge/client/default/js/checkout/address.js");

var formHelpers = __webpack_require__(/*! ./formErrors */ "./app_storefront_base/cartridge/client/default/js/checkout/formErrors.js");

var scrollAnimate = __webpack_require__(/*! ../components/scrollAnimate */ "./app_storefront_base/cartridge/client/default/js/components/scrollAnimate.js");
/**
 * updates the shipping address selector within shipping forms
 * @param {Object} productLineItem - the productLineItem model
 * @param {Object} shipping - the shipping (shipment model) model
 * @param {Object} order - the order model
 * @param {Object} customer - the customer model
 */


function updateShippingAddressSelector(productLineItem, shipping, order, customer) {
  var uuidEl = $('input[value=' + productLineItem.UUID + ']');
  var shippings = order.shipping;
  var form;
  var $shippingAddressSelector;
  var hasSelectedAddress = false;

  if (uuidEl && uuidEl.length > 0) {
    form = uuidEl[0].form;
    $shippingAddressSelector = $('.addressSelector', form);
  }

  if ($shippingAddressSelector && $shippingAddressSelector.length === 1) {
    $shippingAddressSelector.empty(); // Add New Address option

    $shippingAddressSelector.append(addressHelpers.methods.optionValueForAddress(null, false, order));

    if (customer.addresses && customer.addresses.length > 0) {
      $shippingAddressSelector.append(addressHelpers.methods.optionValueForAddress(order.resources.accountAddresses, false, order));
      customer.addresses.forEach(function (address) {
        var isSelected = shipping.matchingAddressId === address.ID;
        $shippingAddressSelector.append(addressHelpers.methods.optionValueForAddress({
          UUID: 'ab_' + address.ID,
          shippingAddress: address
        }, isSelected, order));
      });
    } // Separator -


    $shippingAddressSelector.append(addressHelpers.methods.optionValueForAddress(order.resources.shippingAddresses, false, order, {
      className: 'multi-shipping'
    }));
    shippings.forEach(function (aShipping) {
      var isSelected = shipping.UUID === aShipping.UUID;
      hasSelectedAddress = hasSelectedAddress || isSelected;
      var addressOption = addressHelpers.methods.optionValueForAddress(aShipping, isSelected, order, {
        className: 'multi-shipping'
      });
      var newAddress = addressOption.html() === order.resources.addNewAddress;
      var matchingUUID = aShipping.UUID === shipping.UUID;

      if (newAddress && matchingUUID || !newAddress && matchingUUID || !newAddress && !matchingUUID) {
        $shippingAddressSelector.append(addressOption);
      }

      if (newAddress && !matchingUUID) {
        $(addressOption[0]).remove();
      }
    });
  }

  if (!hasSelectedAddress) {
    // show
    $(form).addClass('hide-details');
  } else {
    $(form).removeClass('hide-details');
  }

  $('body').trigger('shipping:updateShippingAddressSelector', {
    productLineItem: productLineItem,
    shipping: shipping,
    order: order,
    customer: customer
  });
}
/**
 * updates the shipping address form values within shipping forms
 * @param {Object} shipping - the shipping (shipment model) model
 */


function updateShippingAddressFormValues(shipping) {
  var addressObject = $.extend({}, shipping.shippingAddress);

  if (!addressObject) {
    addressObject = {
      firstName: null,
      lastName: null,
      address1: null,
      address2: null,
      city: null,
      postalCode: null,
      stateCode: null,
      countryCode: null,
      phone: null
    };
  }

  addressObject.isGift = shipping.isGift;
  addressObject.giftMessage = shipping.giftMessage;
  $('input[value=' + shipping.UUID + ']').each(function (formIndex, el) {
    var form = el.form;
    if (!form) return;
    var countryCode = addressObject.countryCode;
    $('input[name$=_firstName]', form).val(addressObject.firstName);
    $('input[name$=_lastName]', form).val(addressObject.lastName);
    $('input[name$=_address1]', form).val(addressObject.address1);
    $('input[name$=_address2]', form).val(addressObject.address2);
    $('input[name$=_city]', form).val(addressObject.city);
    $('input[name$=_postalCode]', form).val(addressObject.postalCode);
    $('select[name$=_stateCode],input[name$=_stateCode]', form).val(addressObject.stateCode);

    if (countryCode && (0, _typeof2["default"])(countryCode) === 'object') {
      $('select[name$=_country]', form).val(addressObject.countryCode.value);
    } else {
      $('select[name$=_country]', form).val(addressObject.countryCode);
    }

    $('input[name$=_phone]', form).val(addressObject.phone);
    $('input[name$=_isGift]', form).prop('checked', addressObject.isGift);
    $('textarea[name$=_giftMessage]', form).val(addressObject.isGift && addressObject.giftMessage ? addressObject.giftMessage : '');
  });
  $('body').trigger('shipping:updateShippingAddressFormValues', {
    shipping: shipping
  });
}
/**
 * updates the shipping method radio buttons within shipping forms
 * @param {Object} shipping - the shipping (shipment model) model
 */


function updateShippingMethods(shipping) {
  var uuidEl = $('input[value=' + shipping.UUID + ']');

  if (uuidEl && uuidEl.length > 0) {
    $.each(uuidEl, function (shipmentIndex, el) {
      var form = el.form;
      if (!form) return;
      var $shippingMethodList = $('.shipping-method-list', form);

      if ($shippingMethodList && $shippingMethodList.length > 0) {
        $shippingMethodList.empty();
        var shippingMethods = shipping.applicableShippingMethods;
        var selected = shipping.selectedShippingMethod || {};
        var shippingMethodFormID = form.name + '_shippingAddress_shippingMethodID'; //
        // Create the new rows for each shipping method
        //

        $.each(shippingMethods, function (methodIndex, shippingMethod) {
          var tmpl = $('#shipping-method-template').clone(); // set input

          $('input', tmpl).prop('id', 'shippingMethod-' + shippingMethod.ID + '-' + shipping.UUID).prop('name', shippingMethodFormID).prop('value', shippingMethod.ID).attr('checked', shippingMethod.ID === selected.ID);
          $('label', tmpl).prop('for', 'shippingMethod-' + shippingMethod.ID + '-' + shipping.UUID); // set shipping method name

          $('.display-name', tmpl).text(shippingMethod.displayName); // set or hide arrival time

          if (shippingMethod.estimatedArrivalTime) {
            $('.arrival-time', tmpl).text('(' + shippingMethod.estimatedArrivalTime + ')').show();
          } // set shipping cost


          $('.shipping-cost', tmpl).text(shippingMethod.shippingCost);
          $shippingMethodList.append(tmpl.html());
        });
      }
    });
  }

  $('body').trigger('shipping:updateShippingMethods', {
    shipping: shipping
  });
}
/**
 * Update list of available shipping methods whenever user modifies shipping address details.
 * @param {jQuery} $shippingForm - current shipping form
 */


function updateShippingMethodList($shippingForm) {
  // delay for autocomplete!
  setTimeout(function () {
    var $shippingMethodList = $shippingForm.find('.shipping-method-list');
    var urlParams = addressHelpers.methods.getAddressFieldsFromUI($shippingForm);
    var shipmentUUID = $shippingForm.find('[name=shipmentUUID]').val();
    var url = $shippingMethodList.data('actionUrl');
    urlParams.shipmentUUID = shipmentUUID;
    $shippingMethodList.spinner().start();
    $.ajax({
      url: url,
      type: 'post',
      dataType: 'json',
      data: urlParams,
      success: function success(data) {
        if (data.error) {
          window.location.href = data.redirectUrl;
        } else {
          $('body').trigger('checkout:updateCheckoutView', {
            order: data.order,
            customer: data.customer,
            options: {
              keepOpen: true
            }
          });
          $shippingMethodList.spinner().stop();
        }
      }
    });
  }, 300);
}
/**
 * updates the order shipping summary for an order shipment model
 * @param {Object} shipping - the shipping (shipment model) model
 * @param {Object} order - the order model
 */


function updateShippingSummaryInformation(shipping, order) {
  $('[data-shipment-summary=' + shipping.UUID + ']').each(function (i, el) {
    var $container = $(el);
    var $shippingAddressLabel = $container.find('.shipping-addr-label');
    var $addressContainer = $container.find('.address-summary');
    var $shippingPhone = $container.find('.shipping-phone');
    var $methodTitle = $container.find('.shipping-method-title');
    var $methodArrivalTime = $container.find('.shipping-method-arrival-time');
    var $methodPrice = $container.find('.shipping-method-price');
    var $shippingSummaryLabel = $container.find('.shipping-method-label');
    var $summaryDetails = $container.find('.row.summary-details');
    var giftMessageSummary = $container.find('.gift-summary');
    var address = shipping.shippingAddress;
    var selectedShippingMethod = shipping.selectedShippingMethod;
    var isGift = shipping.isGift;
    addressHelpers.methods.populateAddressSummary($addressContainer, address);

    if (address && address.phone) {
      $shippingPhone.text(address.phone);
    } else {
      $shippingPhone.empty();
    }

    if (selectedShippingMethod) {
      $('body').trigger('shipping:updateAddressLabelText', {
        selectedShippingMethod: selectedShippingMethod,
        resources: order.resources,
        shippingAddressLabel: $shippingAddressLabel
      });
      $shippingSummaryLabel.show();
      $summaryDetails.show();
      $methodTitle.text(selectedShippingMethod.displayName);

      if (selectedShippingMethod.estimatedArrivalTime) {
        $methodArrivalTime.text('( ' + selectedShippingMethod.estimatedArrivalTime + ' )');
      } else {
        $methodArrivalTime.empty();
      }

      $methodPrice.text(selectedShippingMethod.shippingCost);
    }

    if (isGift) {
      giftMessageSummary.find('.gift-message-summary').text(shipping.giftMessage);
      giftMessageSummary.removeClass('d-none');
    } else {
      giftMessageSummary.addClass('d-none');
    }
  });
  $('body').trigger('shipping:updateShippingSummaryInformation', {
    shipping: shipping,
    order: order
  });
}
/**
 * Update the read-only portion of the shipment display (per PLI)
 * @param {Object} productLineItem - the productLineItem model
 * @param {Object} shipping - the shipping (shipment model) model
 * @param {Object} order - the order model
 * @param {Object} [options] - options for updating PLI summary info
 * @param {Object} [options.keepOpen] - if true, prevent changing PLI view mode to 'view'
 */


function updatePLIShippingSummaryInformation(productLineItem, shipping, order, options) {
  var $pli = $('input[value=' + productLineItem.UUID + ']');
  var form = $pli && $pli.length > 0 ? $pli[0].form : null;
  if (!form) return;
  var $viewBlock = $('.view-address-block', form);
  var address = shipping.shippingAddress || {};
  var selectedMethod = shipping.selectedShippingMethod;
  var nameLine = address.firstName ? address.firstName + ' ' : '';
  if (address.lastName) nameLine += address.lastName;
  var address1Line = address.address1;
  var address2Line = address.address2;
  var phoneLine = address.phone;
  var shippingCost = selectedMethod ? selectedMethod.shippingCost : '';
  var methodNameLine = selectedMethod ? selectedMethod.displayName : '';
  var methodArrivalTime = selectedMethod && selectedMethod.estimatedArrivalTime ? '(' + selectedMethod.estimatedArrivalTime + ')' : '';
  var tmpl = $('#pli-shipping-summary-template').clone();
  $('.ship-to-name', tmpl).text(nameLine);
  $('.ship-to-address1', tmpl).text(address1Line);
  $('.ship-to-address2', tmpl).text(address2Line);
  $('.ship-to-city', tmpl).text(address.city);

  if (address.stateCode) {
    $('.ship-to-st', tmpl).text(address.stateCode);
  }

  $('.ship-to-zip', tmpl).text(address.postalCode);
  $('.ship-to-phone', tmpl).text(phoneLine);

  if (!address2Line) {
    $('.ship-to-address2', tmpl).hide();
  }

  if (!phoneLine) {
    $('.ship-to-phone', tmpl).hide();
  }

  if (shipping.selectedShippingMethod) {
    $('.display-name', tmpl).text(methodNameLine);
    $('.arrival-time', tmpl).text(methodArrivalTime);
    $('.price', tmpl).text(shippingCost);
  }

  if (shipping.isGift) {
    $('.gift-message-summary', tmpl).text(shipping.giftMessage);
    var shipment = $('.gift-message-' + shipping.UUID);
    $(shipment).val(shipping.giftMessage);
  } else {
    $('.gift-summary', tmpl).addClass('d-none');
  } // checking h5 title shipping to or pickup


  var $shippingAddressLabel = $('.shipping-header-text', tmpl);
  $('body').trigger('shipping:updateAddressLabelText', {
    selectedShippingMethod: selectedMethod,
    resources: order.resources,
    shippingAddressLabel: $shippingAddressLabel
  });
  $viewBlock.html(tmpl.html());
  $('body').trigger('shipping:updatePLIShippingSummaryInformation', {
    productLineItem: productLineItem,
    shipping: shipping,
    order: order,
    options: options
  });
}
/**
 * Update the hidden form values that associate shipping info with product line items
 * @param {Object} productLineItem - the productLineItem model
 * @param {Object} shipping - the shipping (shipment model) model
 */


function updateProductLineItemShipmentUUIDs(productLineItem, shipping) {
  $('input[value=' + productLineItem.UUID + ']').each(function (key, pli) {
    var form = pli.form;
    $('[name=shipmentUUID]', form).val(shipping.UUID);
    $('[name=originalShipmentUUID]', form).val(shipping.UUID);
    $(form).closest('.card').attr('data-shipment-uuid', shipping.UUID);
  });
  $('body').trigger('shipping:updateProductLineItemShipmentUUIDs', {
    productLineItem: productLineItem,
    shipping: shipping
  });
}
/**
 * Update the shipping UI for a single shipping info (shipment model)
 * @param {Object} shipping - the shipping (shipment model) model
 * @param {Object} order - the order/basket model
 * @param {Object} customer - the customer model
 * @param {Object} [options] - options for updating PLI summary info
 * @param {Object} [options.keepOpen] - if true, prevent changing PLI view mode to 'view'
 */


function updateShippingInformation(shipping, order, customer, options) {
  // First copy over shipmentUUIDs from response, to each PLI form
  order.shipping.forEach(function (aShipping) {
    aShipping.productLineItems.items.forEach(function (productLineItem) {
      updateProductLineItemShipmentUUIDs(productLineItem, aShipping);
    });
  }); // Now update shipping information, based on those associations

  updateShippingMethods(shipping);
  updateShippingAddressFormValues(shipping);
  updateShippingSummaryInformation(shipping, order); // And update the PLI-based summary information as well

  shipping.productLineItems.items.forEach(function (productLineItem) {
    updateShippingAddressSelector(productLineItem, shipping, order, customer);
    updatePLIShippingSummaryInformation(productLineItem, shipping, order, options);
  });
  $('body').trigger('shipping:updateShippingInformation', {
    order: order,
    shipping: shipping,
    customer: customer,
    options: options
  });
}
/**
 * Update the checkout state (single vs. multi-ship)
 * @param {Object} order - checkout model to use as basis of new truth
 */


function updateMultiShipInformation(order) {
  var $checkoutMain = $('#checkout-main');
  var $checkbox = $('[name=usingMultiShipping]');
  var $submitShippingBtn = $('button.submit-shipping');
  $('.shipping-error .alert-danger').remove();

  if (order.usingMultiShipping) {
    $checkoutMain.addClass('multi-ship');
    $checkbox.prop('checked', true);
  } else {
    $checkoutMain.removeClass('multi-ship');
    $checkbox.prop('checked', null);
    $submitShippingBtn.prop('disabled', null);
  }

  $('body').trigger('shipping:updateMultiShipInformation', {
    order: order
  });
}
/**
  * Create an alert to display the error message
  * @param {Object} message - Error message to display
  */


function createErrorNotification(message) {
  var errorHtml = '<div class="alert alert-danger alert-dismissible valid-cart-error ' + 'fade show" role="alert">' + '<button type="button" class="close" data-dismiss="alert" aria-label="Close">' + '<span aria-hidden="true">&times;</span>' + '</button>' + message + '</div>';
  $('.shipping-error').append(errorHtml);
  scrollAnimate($('.shipping-error'));
}
/**
 * Handle response from the server for valid or invalid form fields.
 * @param {Object} defer - the deferred object which will resolve on success or reject.
 * @param {Object} data - the response data with the invalid form fields or
 *  valid model data.
 */


function shippingFormResponse(defer, data) {
  var isMultiShip = $('#checkout-main').hasClass('multi-ship');
  var formSelector = isMultiShip ? '.multi-shipping .active form' : '.single-shipping form'; // highlight fields with errors

  if (data.error) {
    if (data.fieldErrors.length) {
      data.fieldErrors.forEach(function (error) {
        if (Object.keys(error).length) {
          formHelpers.loadFormErrors(formSelector, error);
        }
      });
      defer.reject(data);
    }

    if (data.serverErrors && data.serverErrors.length) {
      $.each(data.serverErrors, function (index, element) {
        createErrorNotification(element);
      });
      defer.reject(data);
    }

    if (data.cartError) {
      window.location.href = data.redirectUrl;
      defer.reject();
    }
  } else {
    // Populate the Address Summary
    $('body').trigger('checkout:updateCheckoutView', {
      order: data.order,
      customer: data.customer
    });
    scrollAnimate($('.payment-form'));
    defer.resolve(data);
  }
}
/**
 * Clear out all the shipping form values and select the new address in the drop down
 * @param {Object} order - the order object
 */


function clearShippingForms(order) {
  order.shipping.forEach(function (shipping) {
    $('input[value=' + shipping.UUID + ']').each(function (formIndex, el) {
      var form = el.form;
      if (!form) return;
      $('input[name$=_firstName]', form).val('');
      $('input[name$=_lastName]', form).val('');
      $('input[name$=_address1]', form).val('');
      $('input[name$=_address2]', form).val('');
      $('input[name$=_city]', form).val('');
      $('input[name$=_postalCode]', form).val('');
      $('select[name$=_stateCode],input[name$=_stateCode]', form).val('');
      $('select[name$=_country]', form).val('');
      $('input[name$=_phone]', form).val('');
      $('input[name$=_isGift]', form).prop('checked', false);
      $('textarea[name$=_giftMessage]', form).val('');
      $(form).find('.gift-message').addClass('d-none');
      $(form).attr('data-address-mode', 'new');
      var addressSelectorDropDown = $('.addressSelector option[value=new]', form);
      $(addressSelectorDropDown).prop('selected', true);
    });
  });
  $('body').trigger('shipping:clearShippingForms', {
    order: order
  });
}
/**
 * Does Ajax call to create a server-side shipment w/ pliUUID & URL
 * @param {string} url - string representation of endpoint URL
 * @param {Object} shipmentData - product line item UUID
 * @returns {Object} - promise value for async call
 */


function createNewShipment(url, shipmentData) {
  $.spinner().start();
  return $.ajax({
    url: url,
    type: 'post',
    dataType: 'json',
    data: shipmentData
  });
}
/**
 * Does Ajax call to select shipping method
 * @param {string} url - string representation of endpoint URL
 * @param {Object} urlParams - url params
 * @param {Object} el - element that triggered this call
 */


function selectShippingMethodAjax(url, urlParams, el) {
  $.spinner().start();
  $('body').trigger('checkout:beforeShippingMethodSelected');
  $.ajax({
    url: url,
    type: 'post',
    dataType: 'json',
    data: urlParams
  }).done(function (data) {
    if (data.error) {
      window.location.href = data.redirectUrl;
    } else {
      $('body').trigger('checkout:updateCheckoutView', {
        order: data.order,
        customer: data.customer,
        options: {
          keepOpen: true
        },
        urlParams: urlParams
      });
      $('body').trigger('checkout:postUpdateCheckoutView', {
        el: el
      });
    }

    $('body').trigger('checkout:shippingMethodSelected', data);
    $.spinner().stop();
  }).fail(function () {
    $.spinner().stop();
  });
}
/**
 * Hide and show to appropriate elements to show the multi ship shipment cards in the enter view
 * @param {jQuery} element - The shipping content
 */


function enterMultishipView(element) {
  element.find('.btn-enter-multi-ship').removeClass('d-none');
  element.find('.view-address-block').addClass('d-none');
  element.find('.shipping-address').addClass('d-none');
  element.find('.btn-save-multi-ship.save-shipment').addClass('d-none');
  element.find('.btn-edit-multi-ship').addClass('d-none');
  element.find('.multi-ship-address-actions').addClass('d-none');
}
/**
 * Hide and show to appropriate elements to show the multi ship shipment cards in the view mode
 * @param {jQuery} element - The shipping content
 */


function viewMultishipAddress(element) {
  element.find('.view-address-block').removeClass('d-none');
  element.find('.btn-edit-multi-ship').removeClass('d-none');
  element.find('.shipping-address').addClass('d-none');
  element.find('.btn-save-multi-ship.save-shipment').addClass('d-none');
  element.find('.btn-enter-multi-ship').addClass('d-none');
  element.find('.multi-ship-address-actions').addClass('d-none');
}
/**
 * Hide and show to appropriate elements that allows the user to edit multi ship address information
 * @param {jQuery} element - The shipping content
 */


function editMultiShipAddress(element) {
  // Show
  element.find('.shipping-address').removeClass('d-none');
  element.find('.btn-save-multi-ship.save-shipment').removeClass('d-none'); // Hide

  element.find('.view-address-block').addClass('d-none');
  element.find('.btn-enter-multi-ship').addClass('d-none');
  element.find('.btn-edit-multi-ship').addClass('d-none');
  element.find('.multi-ship-address-actions').addClass('d-none');
  $('body').trigger('shipping:editMultiShipAddress', {
    element: element,
    form: element.find('.shipping-form')
  });
}
/**
 * perform the proper actions once a user has clicked enter address or edit address for a shipment
 * @param {jQuery} element - The shipping content
 * @param {string} mode - the address mode
 */


function editOrEnterMultiShipInfo(element, mode) {
  var form = $(element).closest('form');
  var root = $(element).closest('.shipping-content');
  $('body').trigger('shipping:updateDataAddressMode', {
    form: form,
    mode: mode
  });
  editMultiShipAddress(root);
  var addressInfo = addressHelpers.methods.getAddressFieldsFromUI(form);
  var savedState = {
    UUID: $('input[name=shipmentUUID]', form).val(),
    shippingAddress: addressInfo
  };
  root.data('saved-state', JSON.stringify(savedState));
}

module.exports = {
  methods: {
    updateShippingAddressSelector: updateShippingAddressSelector,
    updateShippingAddressFormValues: updateShippingAddressFormValues,
    updateShippingMethods: updateShippingMethods,
    updateShippingSummaryInformation: updateShippingSummaryInformation,
    updatePLIShippingSummaryInformation: updatePLIShippingSummaryInformation,
    updateProductLineItemShipmentUUIDs: updateProductLineItemShipmentUUIDs,
    updateShippingInformation: updateShippingInformation,
    updateMultiShipInformation: updateMultiShipInformation,
    shippingFormResponse: shippingFormResponse,
    createNewShipment: createNewShipment,
    selectShippingMethodAjax: selectShippingMethodAjax,
    updateShippingMethodList: updateShippingMethodList,
    clearShippingForms: clearShippingForms,
    editMultiShipAddress: editMultiShipAddress,
    editOrEnterMultiShipInfo: editOrEnterMultiShipInfo,
    createErrorNotification: createErrorNotification,
    viewMultishipAddress: viewMultishipAddress
  },
  selectShippingMethod: function selectShippingMethod() {
    var baseObj = this;
    $('.shipping-method-list').change(function () {
      var $shippingForm = $(this).parents('form');
      var methodID = $(':checked', this).val();
      var shipmentUUID = $shippingForm.find('[name=shipmentUUID]').val();
      var urlParams = addressHelpers.methods.getAddressFieldsFromUI($shippingForm);
      urlParams.shipmentUUID = shipmentUUID;
      urlParams.methodID = methodID;
      urlParams.isGift = $shippingForm.find('.gift').prop('checked');
      urlParams.giftMessage = $shippingForm.find('textarea[name$=_giftMessage]').val();
      var url = $(this).data('select-shipping-method-url');

      if (baseObj.methods && baseObj.methods.selectShippingMethodAjax) {
        baseObj.methods.selectShippingMethodAjax(url, urlParams, $(this));
      } else {
        selectShippingMethodAjax(url, urlParams, $(this));
      }
    });
  },
  toggleMultiship: function toggleMultiship() {
    var baseObj = this;
    $('input[name="usingMultiShipping"]').on('change', function () {
      var url = $('.multi-shipping-checkbox-block form').attr('action');
      var usingMultiShip = this.checked;
      $.ajax({
        url: url,
        type: 'post',
        dataType: 'json',
        data: {
          usingMultiShip: usingMultiShip
        },
        success: function success(response) {
          if (response.error) {
            window.location.href = response.redirectUrl;
          } else {
            $('body').trigger('checkout:updateCheckoutView', {
              order: response.order,
              customer: response.customer
            });

            if ($('#checkout-main').data('customer-type') === 'guest') {
              if (baseObj.methods && baseObj.methods.clearShippingForms) {
                baseObj.methods.clearShippingForms(response.order);
              } else {
                clearShippingForms(response.order);
              }
            } else {
              response.order.shipping.forEach(function (shipping) {
                $('input[value=' + shipping.UUID + ']').each(function (formIndex, el) {
                  var form = el.form;
                  if (!form) return;
                  $(form).attr('data-address-mode', 'edit');
                  var addressSelectorDropDown = $(form).find('.addressSelector option[value="ab_' + shipping.matchingAddressId + '"]');
                  $(addressSelectorDropDown).prop('selected', true);
                  $('input[name$=_isGift]', form).prop('checked', false);
                  $('textarea[name$=_giftMessage]', form).val('');
                  $(form).find('.gift-message').addClass('d-none');
                });
              });
            }

            if (usingMultiShip) {
              $('body').trigger('shipping:selectMultiShipping', {
                data: response
              });
            } else {
              $('body').trigger('shipping:selectSingleShipping', {
                data: response
              });
            }
          }

          $.spinner().stop();
        },
        error: function error() {
          $.spinner().stop();
        }
      });
    });
  },
  selectSingleShipping: function selectSingleShipping() {
    $('body').on('shipping:selectSingleShipping', function () {
      $('.single-shipping .shipping-address').removeClass('d-none');
    });
  },
  selectMultiShipping: function selectMultiShipping() {
    var baseObj = this;
    $('body').on('shipping:selectMultiShipping', function (e, data) {
      $('.multi-shipping .shipping-address').addClass('d-none');
      data.data.order.shipping.forEach(function (shipping) {
        var element = $('.multi-shipping .card[data-shipment-uuid="' + shipping.UUID + '"]');

        if (shipping.shippingAddress) {
          if (baseObj.methods && baseObj.methods.viewMultishipAddress) {
            baseObj.methods.viewMultishipAddress($(element));
          } else {
            viewMultishipAddress($(element));
          }
        } else {
          /* eslint-disable no-lonely-if */
          if (baseObj.methods && baseObj.methods.enterMultishipView) {
            baseObj.methods.enterMultishipView($(element));
          } else {
            enterMultishipView($(element));
          }
          /* eslint-enable no-lonely-if */

        }
      });
    });
  },
  selectSingleShipAddress: function selectSingleShipAddress() {
    $('.single-shipping .addressSelector').on('change', function () {
      var form = $(this).parents('form')[0];
      var selectedOption = $('option:selected', this);
      var attrs = selectedOption.data();
      var shipmentUUID = selectedOption[0].value;
      var originalUUID = $('input[name=shipmentUUID]', form).val();
      var element;
      Object.keys(attrs).forEach(function (attr) {
        element = attr === 'countryCode' ? 'country' : attr;
        $('[name$=' + element + ']', form).val(attrs[attr]);
      });
      $('[name$=stateCode]', form).trigger('change');

      if (shipmentUUID === 'new') {
        $(form).attr('data-address-mode', 'new');
        $(form).find('.shipping-address-block').removeClass('d-none');
      } else if (shipmentUUID === originalUUID) {
        $(form).attr('data-address-mode', 'shipment');
      } else if (shipmentUUID.indexOf('ab_') === 0) {
        $(form).attr('data-address-mode', 'customer');
      } else {
        $(form).attr('data-address-mode', 'edit');
      }
    });
  },
  selectMultiShipAddress: function selectMultiShipAddress() {
    var baseObj = this;
    $('.multi-shipping .addressSelector').on('change', function () {
      var form = $(this).closest('form');
      var selectedOption = $('option:selected', this);
      var attrs = selectedOption.data();
      var shipmentUUID = selectedOption[0].value;
      var originalUUID = $('input[name=shipmentUUID]', form).val();
      var pliUUID = $('input[name=productLineItemUUID]', form).val();
      var createNewShipmentScoped = baseObj.methods && baseObj.methods.createNewShipment ? baseObj.methods.createNewShipment : createNewShipment;
      var element;
      Object.keys(attrs).forEach(function (attr) {
        if (attr === 'isGift') {
          $('[name$=' + attr + ']', form).prop('checked', attrs[attr]);
          $('[name$=' + attr + ']', form).trigger('change');
        } else {
          element = attr === 'countryCode' ? 'country' : attr;
          $('[name$=' + element + ']', form).val(attrs[attr]);
        }
      });

      if (shipmentUUID === 'new' && pliUUID) {
        var createShipmentUrl = $(this).attr('data-create-shipment-url');
        createNewShipmentScoped(createShipmentUrl, {
          productLineItemUUID: pliUUID
        }).done(function (response) {
          $.spinner().stop();

          if (response.error) {
            if (response.redirectUrl) {
              window.location.href = response.redirectUrl;
            }

            return;
          }

          $('body').trigger('checkout:updateCheckoutView', {
            order: response.order,
            customer: response.customer,
            options: {
              keepOpen: true
            }
          });
          $(form).attr('data-address-mode', 'new');
        }).fail(function () {
          $.spinner().stop();
        });
      } else if (shipmentUUID === originalUUID) {
        $('select[name$=stateCode]', form).trigger('change');
        $(form).attr('data-address-mode', 'shipment');
      } else if (shipmentUUID.indexOf('ab_') === 0) {
        var url = $(form).attr('action');
        var serializedData = $(form).serialize();
        createNewShipmentScoped(url, serializedData).done(function (response) {
          $.spinner().stop();

          if (response.error) {
            if (response.redirectUrl) {
              window.location.href = response.redirectUrl;
            }

            return;
          }

          $('body').trigger('checkout:updateCheckoutView', {
            order: response.order,
            customer: response.customer,
            options: {
              keepOpen: true
            }
          });
          $(form).attr('data-address-mode', 'customer');
          var $rootEl = $(form).closest('.shipping-content');
          editMultiShipAddress($rootEl);
        }).fail(function () {
          $.spinner().stop();
        });
      } else {
        var updatePLIShipmentUrl = $(form).attr('action');
        var serializedAddress = $(form).serialize();
        createNewShipmentScoped(updatePLIShipmentUrl, serializedAddress).done(function (response) {
          $.spinner().stop();

          if (response.error) {
            if (response.redirectUrl) {
              window.location.href = response.redirectUrl;
            }

            return;
          }

          $('body').trigger('checkout:updateCheckoutView', {
            order: response.order,
            customer: response.customer,
            options: {
              keepOpen: true
            }
          });
          $(form).attr('data-address-mode', 'edit');
        }).fail(function () {
          $.spinner().stop();
        });
      }
    });
  },
  updateShippingList: function updateShippingList() {
    var baseObj = this;
    $('select[name$="shippingAddress_addressFields_states_stateCode"]').on('change', function (e) {
      if (baseObj.methods && baseObj.methods.updateShippingMethodList) {
        baseObj.methods.updateShippingMethodList($(e.currentTarget.form));
      } else {
        updateShippingMethodList($(e.currentTarget.form));
      }
    });
  },
  updateDataAddressMode: function updateDataAddressMode() {
    $('body').on('shipping:updateDataAddressMode', function (e, data) {
      $(data.form).attr('data-address-mode', data.mode);
    });
  },
  enterMultiShipInfo: function enterMultiShipInfo() {
    var baseObj = this;
    $('.btn-enter-multi-ship').on('click', function (e) {
      e.preventDefault();

      if (baseObj.methods && baseObj.methods.editOrEnterMultiShipInfo) {
        baseObj.methods.editOrEnterMultiShipInfo($(this), 'new');
      } else {
        editOrEnterMultiShipInfo($(this), 'new');
      }
    });
  },
  editMultiShipInfo: function editMultiShipInfo() {
    var baseObj = this;
    $('.btn-edit-multi-ship').on('click', function (e) {
      e.preventDefault();

      if (baseObj.methods && baseObj.methods.editOrEnterMultiShipInfo) {
        baseObj.methods.editOrEnterMultiShipInfo($(this), 'edit');
      } else {
        editOrEnterMultiShipInfo($(this), 'edit');
      }
    });
  },
  saveMultiShipInfo: function saveMultiShipInfo() {
    var baseObj = this;
    $('.btn-save-multi-ship').on('click', function (e) {
      e.preventDefault(); // Save address to checkoutAddressBook

      var form = $(this).closest('form');
      var $rootEl = $(this).closest('.shipping-content');
      var data = $(form).serialize();
      var url = $(form).attr('action');
      $rootEl.spinner().start();
      $.ajax({
        url: url,
        type: 'post',
        dataType: 'json',
        data: data
      }).done(function (response) {
        formHelpers.clearPreviousErrors(form);

        if (response.error) {
          if (response.fieldErrors && response.fieldErrors.length) {
            response.fieldErrors.forEach(function (error) {
              if (Object.keys(error).length) {
                formHelpers.loadFormErrors(form, error);
              }
            });
          } else if (response.serverErrors && response.serverErrors.length) {
            $.each(response.serverErrors, function (index, element) {
              createErrorNotification(element);
            });
          } else if (response.redirectUrl) {
            window.location.href = response.redirectUrl;
          }
        } else {
          // Update UI from response
          $('body').trigger('checkout:updateCheckoutView', {
            order: response.order,
            customer: response.customer
          });

          if (baseObj.methods && baseObj.methods.viewMultishipAddress) {
            baseObj.methods.viewMultishipAddress($rootEl);
          } else {
            viewMultishipAddress($rootEl);
          }
        }

        if (response.order && response.order.shippable) {
          $('button.submit-shipping').attr('disabled', null);
        }

        $rootEl.spinner().stop();
      }).fail(function (err) {
        if (err.responseJSON.redirectUrl) {
          window.location.href = err.responseJSON.redirectUrl;
        }

        $rootEl.spinner().stop();
      });
      return false;
    });
  },
  cancelMultiShipAddress: function cancelMultiShipAddress() {
    var baseObj = this;
    $('.btn-cancel-multi-ship-address').on('click', function (e) {
      e.preventDefault();
      var form = $(this).closest('form');
      var $rootEl = $(this).closest('.shipping-content');
      var restoreState = $rootEl.data('saved-state'); // Should clear out changes / restore previous state

      if (restoreState) {
        var restoreStateObj = JSON.parse(restoreState);
        var originalStateCode = restoreStateObj.shippingAddress.stateCode;
        var stateCode = $('[name$=_stateCode]', form).val();

        if (baseObj.methods && baseObj.methods.updateShippingAddressFormValues) {
          baseObj.methods.updateShippingAddressFormValues(restoreStateObj);
        } else {
          updateShippingAddressFormValues(restoreStateObj);
        }

        if (stateCode !== originalStateCode) {
          $('[data-action=save]', form).trigger('click');
        } else {
          $(form).attr('data-address-mode', 'edit');

          if (baseObj.methods && baseObj.methods.editMultiShipAddress) {
            baseObj.methods.editMultiShipAddress($rootEl);
          } else {
            editMultiShipAddress($rootEl);
          }
        }
      }

      return false;
    });
  },
  isGift: function isGift() {
    $('.gift').on('change', function (e) {
      e.preventDefault();
      var form = $(this).closest('form');

      if (this.checked) {
        $(form).find('.gift-message').removeClass('d-none');
      } else {
        $(form).find('.gift-message').addClass('d-none');
        $(form).find('.gift-message').val('');
      }
    });
  }
};

/***/ }),

/***/ "./app_storefront_base/cartridge/client/default/js/checkout/summary.js":
/*!*****************************************************************************!*\
  !*** ./app_storefront_base/cartridge/client/default/js/checkout/summary.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * updates the totals summary
 * @param {Array} totals - the totals data
 */

function updateTotals(totals) {
  $('.shipping-total-cost').text(totals.totalShippingCost);
  $('.tax-total').text(totals.totalTax);
  $('.sub-total').text(totals.subTotal);
  $('.grand-total-sum').text(totals.grandTotal);

  if (totals.orderLevelDiscountTotal.value > 0) {
    $('.order-discount').removeClass('hide-order-discount');
    $('.order-discount-total').text('- ' + totals.orderLevelDiscountTotal.formatted);
  } else {
    $('.order-discount').addClass('hide-order-discount');
  }

  if (totals.shippingLevelDiscountTotal.value > 0) {
    $('.shipping-discount').removeClass('hide-shipping-discount');
    $('.shipping-discount-total').text('- ' + totals.shippingLevelDiscountTotal.formatted);
  } else {
    $('.shipping-discount').addClass('hide-shipping-discount');
  }
}
/**
 * updates the order product shipping summary for an order model
 * @param {Object} order - the order model
 */


function updateOrderProductSummaryInformation(order) {
  var $productSummary = $('<div />');
  order.shipping.forEach(function (shipping) {
    shipping.productLineItems.items.forEach(function (lineItem) {
      var pli = $('[data-product-line-item=' + lineItem.UUID + ']');
      $productSummary.append(pli);
    });
    var address = shipping.shippingAddress || {};
    var selectedMethod = shipping.selectedShippingMethod;
    var nameLine = address.firstName ? address.firstName + ' ' : '';
    if (address.lastName) nameLine += address.lastName;
    var address1Line = address.address1;
    var address2Line = address.address2;
    var phoneLine = address.phone;
    var shippingCost = selectedMethod ? selectedMethod.shippingCost : '';
    var methodNameLine = selectedMethod ? selectedMethod.displayName : '';
    var methodArrivalTime = selectedMethod && selectedMethod.estimatedArrivalTime ? '( ' + selectedMethod.estimatedArrivalTime + ' )' : '';
    var tmpl = $('#pli-shipping-summary-template').clone();

    if (shipping.productLineItems.items && shipping.productLineItems.items.length > 1) {
      $('h5 > span').text(' - ' + shipping.productLineItems.items.length + ' ' + order.resources.items);
    } else {
      $('h5 > span').text('');
    }

    var stateRequiredAttr = $('#shippingState').attr('required');
    var isRequired = stateRequiredAttr !== undefined && stateRequiredAttr !== false;
    var stateExists = shipping.shippingAddress && shipping.shippingAddress.stateCode ? shipping.shippingAddress.stateCode : false;
    var stateBoolean = false;

    if (isRequired && stateExists || !isRequired) {
      stateBoolean = true;
    }

    var shippingForm = $('.multi-shipping input[name="shipmentUUID"][value="' + shipping.UUID + '"]').parent();

    if (shipping.shippingAddress && shipping.shippingAddress.firstName && shipping.shippingAddress.address1 && shipping.shippingAddress.city && stateBoolean && shipping.shippingAddress.countryCode && (shipping.shippingAddress.phone || shipping.productLineItems.items[0].fromStoreId)) {
      $('.ship-to-name', tmpl).text(nameLine);
      $('.ship-to-address1', tmpl).text(address1Line);
      $('.ship-to-address2', tmpl).text(address2Line);
      $('.ship-to-city', tmpl).text(address.city);

      if (address.stateCode) {
        $('.ship-to-st', tmpl).text(address.stateCode);
      }

      $('.ship-to-zip', tmpl).text(address.postalCode);
      $('.ship-to-phone', tmpl).text(phoneLine);

      if (!address2Line) {
        $('.ship-to-address2', tmpl).hide();
      }

      if (!phoneLine) {
        $('.ship-to-phone', tmpl).hide();
      }

      shippingForm.find('.ship-to-message').text('');
    } else {
      shippingForm.find('.ship-to-message').text(order.resources.addressIncomplete);
    }

    if (shipping.isGift) {
      $('.gift-message-summary', tmpl).text(shipping.giftMessage);
    } else {
      $('.gift-summary', tmpl).addClass('d-none');
    } // checking h5 title shipping to or pickup


    var $shippingAddressLabel = $('.shipping-header-text', tmpl);
    $('body').trigger('shipping:updateAddressLabelText', {
      selectedShippingMethod: selectedMethod,
      resources: order.resources,
      shippingAddressLabel: $shippingAddressLabel
    });

    if (shipping.selectedShippingMethod) {
      $('.display-name', tmpl).text(methodNameLine);
      $('.arrival-time', tmpl).text(methodArrivalTime);
      $('.price', tmpl).text(shippingCost);
    }

    var $shippingSummary = $('<div class="multi-shipping" data-shipment-summary="' + shipping.UUID + '" />');
    $shippingSummary.html(tmpl.html());
    $productSummary.append($shippingSummary);
  });
  $('.product-summary-block').html($productSummary.html()); // Also update the line item prices, as they might have been altered

  $('.grand-total-price').text(order.totals.subTotal);
  order.items.items.forEach(function (item) {
    if (item.priceTotal && item.priceTotal.renderedPrice) {
      $('.item-total-' + item.UUID).empty().append(item.priceTotal.renderedPrice);
    }
  });
}

module.exports = {
  updateTotals: updateTotals,
  updateOrderProductSummaryInformation: updateOrderProductSummaryInformation
};

/***/ }),

/***/ "./app_storefront_base/cartridge/client/default/js/components/cleave.js":
/*!******************************************************************************!*\
  !*** ./app_storefront_base/cartridge/client/default/js/components/cleave.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Cleave = __webpack_require__(/*! cleave.js */ "./node_modules/cleave.js/dist/cleave-esm.js")["default"];

module.exports = {
  handleCreditCardNumber: function handleCreditCardNumber(cardFieldSelector, cardTypeSelector) {
    var cleave = new Cleave(cardFieldSelector, {
      creditCard: true,
      onCreditCardTypeChanged: function onCreditCardTypeChanged(type) {
        var creditCardTypes = {
          visa: 'Visa',
          mastercard: 'Master Card',
          amex: 'Amex',
          discover: 'Discover',
          unknown: 'Unknown'
        };
        var cardType = creditCardTypes[Object.keys(creditCardTypes).indexOf(type) > -1 ? type : 'unknown'];
        $(cardTypeSelector).val(cardType);
        $('.card-number-wrapper').attr('data-type', type);

        if (type === 'visa' || type === 'mastercard' || type === 'discover') {
          $('#securityCode').attr('maxlength', 3);
        } else {
          $('#securityCode').attr('maxlength', 4);
        }
      }
    });
    $(cardFieldSelector).data('cleave', cleave);
  },
  serializeData: function serializeData(form) {
    var serializedArray = form.serializeArray();
    serializedArray.forEach(function (item) {
      if (item.name.indexOf('cardNumber') > -1) {
        item.value = $('#cardNumber').data('cleave').getRawValue(); // eslint-disable-line
      }
    });
    return $.param(serializedArray);
  }
};

/***/ }),

/***/ "./app_storefront_base/cartridge/client/default/js/components/errorNotification.js":
/*!*****************************************************************************************!*\
  !*** ./app_storefront_base/cartridge/client/default/js/components/errorNotification.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (element, message) {
  var errorHtml = '<div class="alert alert-danger alert-dismissible ' + 'fade show" role="alert">' + '<button type="button" class="close" data-dismiss="alert" aria-label="Close">' + '<span aria-hidden="true">&times;</span>' + '</button>' + message + '</div>';
  $(element).append(errorHtml);
};

/***/ }),

/***/ "./app_storefront_base/cartridge/client/default/js/components/formValidation.js":
/*!**************************************************************************************!*\
  !*** ./app_storefront_base/cartridge/client/default/js/components/formValidation.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Remove all validation. Should be called every time before revalidating form
 * @param {element} form - Form to be cleared
 * @returns {void}
 */

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));

function clearFormErrors(form) {
  $(form).find('.form-control.is-invalid').removeClass('is-invalid');
}

module.exports = function (formElement, payload) {
  // clear form validation first
  clearFormErrors(formElement);
  $('.alert', formElement).remove();

  if ((0, _typeof2["default"])(payload) === 'object' && payload.fields) {
    Object.keys(payload.fields).forEach(function (key) {
      if (payload.fields[key]) {
        var feedbackElement = $(formElement).find('[name="' + key + '"]').parent().children('.invalid-feedback');

        if (feedbackElement.length > 0) {
          if (Array.isArray(payload[key])) {
            feedbackElement.html(payload.fields[key].join('<br/>'));
          } else {
            feedbackElement.html(payload.fields[key]);
          }

          feedbackElement.siblings('.form-control').addClass('is-invalid');
        }
      }
    });
  }

  if (payload && payload.error) {
    var form = $(formElement).prop('tagName') === 'FORM' ? $(formElement) : $(formElement).parents('form');
    form.prepend('<div class="alert alert-danger" role="alert">' + payload.error.join('<br/>') + '</div>');
  }
};

/***/ }),

/***/ "./app_storefront_base/cartridge/client/default/js/components/scrollAnimate.js":
/*!*************************************************************************************!*\
  !*** ./app_storefront_base/cartridge/client/default/js/components/scrollAnimate.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (element) {
  var position = element && element.length ? element.offset().top : 0;
  $('html, body').animate({
    scrollTop: position
  }, 500);

  if (!element) {
    $('.logo-home').focus();
  }
};

/***/ }),

/***/ "./app_storefront_base/cartridge/client/default/js/util.js":
/*!*****************************************************************!*\
  !*** ./app_storefront_base/cartridge/client/default/js/util.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));

module.exports = function (include) {
  if (typeof include === 'function') {
    include();
  } else if ((0, _typeof2["default"])(include) === 'object') {
    Object.keys(include).forEach(function (key) {
      if (typeof include[key] === 'function') {
        include[key]();
      }
    });
  }
};

/***/ }),

/***/ "./int_adyen_SFRA/cartridge/client/default/js/adyenCheckout.js":
/*!*********************************************************************!*\
  !*** ./int_adyen_SFRA/cartridge/client/default/js/adyenCheckout.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var store = __webpack_require__(/*! ../../../store */ "./int_adyen_SFRA/cartridge/store/index.js");

var _require = __webpack_require__(/*! ./adyen_checkout/renderGenericComponent */ "./int_adyen_SFRA/cartridge/client/default/js/adyen_checkout/renderGenericComponent.js"),
    renderGenericComponent = _require.renderGenericComponent;

var _require2 = __webpack_require__(/*! ./adyen_checkout/checkoutConfiguration */ "./int_adyen_SFRA/cartridge/client/default/js/adyen_checkout/checkoutConfiguration.js"),
    setCheckoutConfiguration = _require2.setCheckoutConfiguration;

var _require3 = __webpack_require__(/*! ./adyen_checkout/helpers */ "./int_adyen_SFRA/cartridge/client/default/js/adyen_checkout/helpers.js"),
    assignPaymentMethodValue = _require3.assignPaymentMethodValue,
    showValidation = _require3.showValidation,
    paymentFromComponent = _require3.paymentFromComponent;

var _require4 = __webpack_require__(/*! ./adyen_checkout/validateComponents */ "./int_adyen_SFRA/cartridge/client/default/js/adyen_checkout/validateComponents.js"),
    validateComponents = _require4.validateComponents;

$('#dwfrm_billing .submit-payment').click(function apiRequest(e) {
  e.preventDefault();
  var form = $('#dwfrm_billing');
  var url = form.attr('action');
  $.ajax({
    type: 'POST',
    url: url,
    data: form.serialize(),
    async: false,
    success: function success(data) {
      store.formErrorsExist = 'fieldErrors' in data;
    }
  });
});
setCheckoutConfiguration();

if (window.cardholderNameBool !== 'null') {
  store.checkoutConfiguration.paymentMethodsConfiguration.card.hasHolderName = true;
  store.checkoutConfiguration.paymentMethodsConfiguration.card.holderNameRequired = true;
}

if (window.installments) {
  try {
    var installments = JSON.parse(window.installments);
    store.checkoutConfiguration.paymentMethodsConfiguration.card.installments = installments;
  } catch (e) {} // eslint-disable-line no-empty

}

if (window.googleMerchantID !== 'null' && window.Configuration.environment === 'live') {
  var id = 'merchantIdentifier';
  store.checkoutConfiguration.paymentMethodsConfiguration.paywithgoogle.configuration[id] = window.googleMerchantID;
} // Submit the payment


$('button[value="submit-payment"]').on('click', function () {
  if (store.paypalTerminatedEarly) {
    paymentFromComponent({
      cancelTransaction: true,
      merchantReference: document.querySelector('#merchantReference').value
    });
    store.paypalTerminatedEarly = false;
  }

  if (document.querySelector('#selectedPaymentOption').value === 'AdyenPOS') {
    document.querySelector('#terminalId').value = document.querySelector('#terminalList').value;
  }

  if (document.querySelector('#selectedPaymentOption').value === 'AdyenComponent') {
    assignPaymentMethodValue();
    validateComponents();
    return showValidation();
  }

  return true;
});
/**
 * Assigns stateData value to the hidden stateData input field
 * so it's sent to the backend for processing
 */

module.exports.methods = {
  renderGenericComponent: renderGenericComponent
};

/***/ }),

/***/ "./int_adyen_SFRA/cartridge/client/default/js/adyen_checkout/checkoutConfiguration.js":
/*!********************************************************************************************!*\
  !*** ./int_adyen_SFRA/cartridge/client/default/js/adyen_checkout/checkoutConfiguration.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var helpers = __webpack_require__(/*! ./helpers */ "./int_adyen_SFRA/cartridge/client/default/js/adyen_checkout/helpers.js");

var _require = __webpack_require__(/*! ../commons */ "./int_adyen_SFRA/cartridge/client/default/js/commons/index.js"),
    onBrand = _require.onBrand,
    onFieldValid = _require.onFieldValid;

var store = __webpack_require__(/*! ../../../../store */ "./int_adyen_SFRA/cartridge/store/index.js");

function getCardConfig() {
  return {
    enableStoreDetails: showStoreDetails,
    onChange: function onChange(state) {
      store.isValid = state.isValid;
      var method = state.data.paymentMethod.storedPaymentMethodId ? "storedCard".concat(state.data.paymentMethod.storedPaymentMethodId) : store.selectedMethod;
      store.updateSelectedPayment(method, 'isValid', store.isValid);
      store.updateSelectedPayment(method, 'stateData', state.data);
    },
    onFieldValid: onFieldValid,
    onBrand: onBrand
  };
}

function getPaypalConfig() {
  store.paypalTerminatedEarly = false;
  return {
    showPayButton: true,
    environment: window.Configuration.environment,
    intent: window.paypalIntent,
    onSubmit: function onSubmit(state, component) {
      helpers.assignPaymentMethodValue();
      document.querySelector('#adyenStateData').value = JSON.stringify(store.selectedPayment.stateData);
      helpers.paymentFromComponent(state.data, component);
    },
    onCancel: function onCancel(data, component) {
      store.paypalTerminatedEarly = false;
      helpers.paymentFromComponent({
        cancelTransaction: true,
        merchantReference: document.querySelector('#merchantReference').value
      }, component);
    },
    onError: function onError(error, component) {
      store.paypalTerminatedEarly = false;

      if (component) {
        component.setStatus('ready');
      }

      document.querySelector('#showConfirmationForm').submit();
    },
    onAdditionalDetails: function onAdditionalDetails(state) {
      store.paypalTerminatedEarly = false;
      document.querySelector('#additionalDetailsHidden').value = JSON.stringify(state.data);
      document.querySelector('#showConfirmationForm').submit();
    },
    onClick: function onClick(data, actions) {
      if (store.paypalTerminatedEarly) {
        helpers.paymentFromComponent({
          cancelTransaction: true,
          merchantReference: document.querySelector('#merchantReference').value
        });
        store.paypalTerminatedEarly = false;
        return actions.resolve();
      }

      store.paypalTerminatedEarly = true;
      $('#dwfrm_billing').trigger('submit');

      if (store.formErrorsExist) {
        return actions.reject();
      }

      return null;
    }
  };
}

function getQRCodeConfig() {
  return {
    showPayButton: true,
    onSubmit: function onSubmit(state, component) {
      $('#dwfrm_billing').trigger('submit');

      if (store.formErrorsExist) {
        return;
      }

      helpers.assignPaymentMethodValue();
      document.querySelector('#adyenStateData').value = JSON.stringify(store.selectedPayment.stateData);
      helpers.paymentFromComponent(state.data, component);
    },
    onAdditionalDetails: function onAdditionalDetails(state
    /* , component */
    ) {
      document.querySelector('#additionalDetailsHidden').value = JSON.stringify(state.data);
      document.querySelector('#showConfirmationForm').submit();
    }
  };
}

function getMbwayConfig() {
  return {
    showPayButton: true,
    onSubmit: function onSubmit(state, component) {
      $('#dwfrm_billing').trigger('submit');
      helpers.assignPaymentMethodValue();

      if (store.formErrorsExist) {
        component.setStatus('ready');
        return;
      }

      if (document.getElementById('component_mbway')) {
        document.getElementById('component_mbway').querySelector('button').disabled = true;
      }

      helpers.paymentFromComponent(state.data, component);
      document.querySelector('#adyenStateData').value = JSON.stringify(store.selectedPayment.stateData);
    },
    onError: function onError()
    /* error, component */
    {
      document.querySelector('#showConfirmationForm').submit();
    },
    onAdditionalDetails: function onAdditionalDetails(state
    /* , component */
    ) {
      document.querySelector('#additionalDetailsHidden').value = JSON.stringify(state.data);
      document.querySelector('#showConfirmationForm').submit();
    }
  };
}

function getGooglePayConfig() {
  return {
    environment: window.Configuration.environment,
    onSubmit: function onSubmit() {
      helpers.assignPaymentMethodValue();
      document.querySelector('button[value="submit-payment"]').disabled = false;
      document.querySelector('button[value="submit-payment"]').click();
    },
    configuration: {
      gatewayMerchantId: window.merchantAccount
    },
    showPayButton: true,
    buttonColor: 'white'
  };
}

function handleOnChange(state) {
  var type = state.data.paymentMethod.type;
  store.isValid = state.isValid;

  if (!store.componentsObj[type]) {
    store.componentsObj[type] = {};
  }

  store.componentsObj[type].isValid = store.isValid;
  store.componentsObj[type].stateData = state.data;
}

function getAmazonpayConfig() {
  return {
    showPayButton: true,
    productType: 'PayAndShip',
    checkoutMode: 'ProcessOrder',
    locale: window.Configuration.locale,
    returnUrl: window.returnURL,
    onClick: function onClick(resolve, reject) {
      $('#dwfrm_billing').trigger('submit');

      if (store.formErrorsExist) {
        reject();
      } else {
        helpers.assignPaymentMethodValue();
        resolve();
      }
    },
    onError: function onError() {}
  };
}

function setCheckoutConfiguration() {
  store.checkoutConfiguration.onChange = handleOnChange;
  store.checkoutConfiguration.showPayButton = false;
  store.checkoutConfiguration.clientKey = window.adyenClientKey;
  store.checkoutConfiguration.paymentMethodsConfiguration = {
    card: getCardConfig(),
    storedCard: getCardConfig(),
    boletobancario: {
      personalDetailsRequired: true,
      // turn personalDetails section on/off
      billingAddressRequired: false,
      // turn billingAddress section on/off
      showEmailAddress: false // allow shopper to specify their email address

    },
    paywithgoogle: getGooglePayConfig(),
    paypal: getPaypalConfig(),
    mbway: getMbwayConfig(),
    swish: getQRCodeConfig(),
    bcmc_mobile: getQRCodeConfig(),
    wechatpayQR: getQRCodeConfig(),
    amazonpay: getAmazonpayConfig(),
    pix: getQRCodeConfig(),
    afterpay_default: {
      visibility: {
        personalDetails: 'editable',
        billingAddress: 'hidden',
        deliveryAddress: 'hidden'
      }
    },
    facilypay_3x: {
      visibility: {
        personalDetails: 'editable',
        billingAddress: 'hidden',
        deliveryAddress: 'hidden'
      }
    },
    ratepay: {
      visibility: {
        personalDetails: 'editable',
        billingAddress: 'hidden',
        deliveryAddress: 'hidden'
      }
    }
  };
}

module.exports = {
  getCardConfig: getCardConfig,
  getPaypalConfig: getPaypalConfig,
  getGooglePayConfig: getGooglePayConfig,
  setCheckoutConfiguration: setCheckoutConfiguration,
  getMbwayConfig: getMbwayConfig,
  getQRCodeConfig: getQRCodeConfig
};

/***/ }),

/***/ "./int_adyen_SFRA/cartridge/client/default/js/adyen_checkout/helpers.js":
/*!******************************************************************************!*\
  !*** ./int_adyen_SFRA/cartridge/client/default/js/adyen_checkout/helpers.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

var store = __webpack_require__(/*! ../../../../store */ "./int_adyen_SFRA/cartridge/store/index.js");

var _require = __webpack_require__(/*! ./qrCodeMethods */ "./int_adyen_SFRA/cartridge/client/default/js/adyen_checkout/qrCodeMethods.js"),
    qrCodeMethods = _require.qrCodeMethods;

function assignPaymentMethodValue() {
  var adyenPaymentMethod = document.querySelector('#adyenPaymentMethodName'); // if currently selected paymentMethod contains a brand it will be part of the label ID

  var paymentMethodlabelId = store.brand ? "#lb_".concat(store.selectedMethod, "_").concat(store.brand) : "#lb_".concat(store.selectedMethod);
  adyenPaymentMethod.value = document.querySelector(paymentMethodlabelId).innerHTML;
}
/**
 * Makes an ajax call to the controller function PaymentFromComponent.
 * Used by certain payment methods like paypal
 */


function paymentFromComponent(data, component) {
  $.ajax({
    url: window.paymentFromComponentURL,
    type: 'post',
    data: {
      data: JSON.stringify(data),
      paymentMethod: document.querySelector('#adyenPaymentMethodName').value
    },
    success: function success(response) {
      var _response$fullRespons;

      if (response.orderNo) {
        document.querySelector('#merchantReference').value = response.orderNo;
      }

      if ((_response$fullRespons = response.fullResponse) !== null && _response$fullRespons !== void 0 && _response$fullRespons.action) {
        component.handleAction(response.fullResponse.action);
      }

      if (response.paymentError) {
        if (response.redirectUrl) {
          window.location.href = response.redirectUrl;
        } else {
          component.handleError();
        }
      }
    }
  }).fail(function () {});
}

function resetPaymentMethod() {
  $('#requiredBrandCode').hide();
  $('#selectedIssuer').val('');
  $('#adyenIssuerName').val('');
  $('#dateOfBirth').val('');
  $('#telephoneNumber').val('');
  $('#gender').val('');
  $('#bankAccountOwnerName').val('');
  $('#bankAccountNumber').val('');
  $('#bankLocationId').val('');
  $('.additionalFields').hide();
}
/**
 * Changes the "display" attribute of the selected method from hidden to visible
 */


function displaySelectedMethod(type) {
  var _document$querySelect; // If 'type' input field is present use this as type, otherwise default to function input param


  store.selectedMethod = document.querySelector("#component_".concat(type, " .type")) ? document.querySelector("#component_".concat(type, " .type")).value : type;
  resetPaymentMethod();
  document.querySelector('#savedCardSelected').setAttribute('value', 'false');
  document.querySelector('button[value="submit-payment"]').disabled = ['paypal', 'paywithgoogle', 'mbway', 'amazonpay'].concat(_toConsumableArray(qrCodeMethods)).indexOf(type) > -1;
  document.querySelector("#component_".concat(type)).setAttribute('style', 'display:block'); // set brand for giftcards if hidden inputfield is present

  store.brand = (_document$querySelect = document.querySelector("#component_".concat(type, " .brand"))) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.value;
}

function displayValidationErrors() {
  store.selectedPayment.node.showValidation();
  return false;
}

var selectedMethods = {};

function doCustomValidation() {
  return store.selectedMethod in selectedMethods ? selectedMethods[store.selectedMethod]() : true;
}

function showValidation() {
  return store.selectedPaymentIsValid ? doCustomValidation() : displayValidationErrors();
}

module.exports = {
  assignPaymentMethodValue: assignPaymentMethodValue,
  paymentFromComponent: paymentFromComponent,
  resetPaymentMethod: resetPaymentMethod,
  displaySelectedMethod: displaySelectedMethod,
  showValidation: showValidation
};

/***/ }),

/***/ "./int_adyen_SFRA/cartridge/client/default/js/adyen_checkout/qrCodeMethods.js":
/*!************************************************************************************!*\
  !*** ./int_adyen_SFRA/cartridge/client/default/js/adyen_checkout/qrCodeMethods.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports.qrCodeMethods = ['swish', 'wechatpayQR', 'bcmc_mobile', 'pix'];

/***/ }),

/***/ "./int_adyen_SFRA/cartridge/client/default/js/adyen_checkout/renderGenericComponent.js":
/*!*********************************************************************************************!*\
  !*** ./int_adyen_SFRA/cartridge/client/default/js/adyen_checkout/renderGenericComponent.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

var store = __webpack_require__(/*! ../../../../store */ "./int_adyen_SFRA/cartridge/store/index.js");

var _require = __webpack_require__(/*! ./renderPaymentMethod */ "./int_adyen_SFRA/cartridge/client/default/js/adyen_checkout/renderPaymentMethod.js"),
    renderPaymentMethod = _require.renderPaymentMethod;

var helpers = __webpack_require__(/*! ./helpers */ "./int_adyen_SFRA/cartridge/client/default/js/adyen_checkout/helpers.js");

function addPosTerminals(terminals) {
  var ddTerminals = document.createElement('select');
  ddTerminals.id = 'terminalList';
  Object.keys(terminals).forEach(function (t) {
    var option = document.createElement('option');
    option.value = terminals[t];
    option.text = terminals[t];
    ddTerminals.appendChild(option);
  });
  document.querySelector('#adyenPosTerminals').append(ddTerminals);
}
/**
 * Makes an ajax call to the controller function GetPaymentMethods
 */


function getPaymentMethods(paymentMethods) {
  $.ajax({
    url: window.getPaymentMethodsURL,
    type: 'get',
    success: function success(data) {
      paymentMethods(data);
    }
  });
}

function resolveUnmount(key, val) {
  try {
    return Promise.resolve(val.node.unmount("component_".concat(key)));
  } catch (e) {
    // try/catch block for val.unmount
    return Promise.resolve(false);
  }
}
/**
 * To avoid re-rendering components twice, unmounts existing components from payment methods list
 */


function unmountComponents() {
  var promises = Object.entries(store.componentsObj).map(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        key = _ref2[0],
        val = _ref2[1];

    delete store.componentsObj[key];
    return resolveUnmount(key, val);
  });
  return Promise.all(promises);
}

function renderStoredPaymentMethod(data) {
  return function (pm) {
    if (pm.supportedShopperInteractions.includes('Ecommerce')) {
      renderPaymentMethod(pm, true, data.ImagePath);
    }
  };
}

function renderStoredPaymentMethods(data) {
  if (data.AdyenPaymentMethods.storedPaymentMethods) {
    var storedPaymentMethods = store.checkout.paymentMethodsResponse.storedPaymentMethods;
    storedPaymentMethods.forEach(renderStoredPaymentMethod(data));
  }
}

function renderPaymentMethods(data) {
  data.AdyenPaymentMethods.paymentMethods.forEach(function (pm, i) {
    renderPaymentMethod(pm, false, data.ImagePath, data.AdyenDescriptions[i].description);
  });
}

function renderPosTerminals(data) {
  var _data$AdyenConnectedT, _data$AdyenConnectedT2;

  var removeChilds = function removeChilds() {
    var posTerminals = document.querySelector('#adyenPosTerminals');

    while (posTerminals.firstChild) {
      posTerminals.removeChild(posTerminals.firstChild);
    }
  };

  if ((_data$AdyenConnectedT = data.AdyenConnectedTerminals) !== null && _data$AdyenConnectedT !== void 0 && (_data$AdyenConnectedT2 = _data$AdyenConnectedT.uniqueTerminalIds) !== null && _data$AdyenConnectedT2 !== void 0 && _data$AdyenConnectedT2.length) {
    removeChilds();
    addPosTerminals(data.AdyenConnectedTerminals.uniqueTerminalIds);
  }
}

function setCheckoutConfiguration(data) {
  var setField = function setField(key, val) {
    return val && _defineProperty({}, key, val);
  };

  store.checkoutConfiguration = _objectSpread(_objectSpread(_objectSpread({}, store.checkoutConfiguration), setField('amount', data.amount)), setField('countryCode', data.countryCode));
}

function setAmazonPayConfig(adyenPaymentMethods) {
  var amazonpay = adyenPaymentMethods.paymentMethods.find(function (paymentMethod) {
    return paymentMethod.type === 'amazonpay';
  });

  if (amazonpay) {
    var _document$querySelect, _document$querySelect2, _document$querySelect3, _document$querySelect4, _document$querySelect5, _document$querySelect6, _document$querySelect7, _document$querySelect8;

    store.checkoutConfiguration.paymentMethodsConfiguration.amazonpay.configuration = amazonpay.configuration; // eslint-disable-line max-len

    store.checkoutConfiguration.paymentMethodsConfiguration.amazonpay.addressDetails = {
      name: "".concat((_document$querySelect = document.querySelector('#shippingFirstNamedefault')) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.value, " ").concat((_document$querySelect2 = document.querySelector('#shippingLastNamedefault')) === null || _document$querySelect2 === void 0 ? void 0 : _document$querySelect2.value),
      addressLine1: (_document$querySelect3 = document.querySelector('#shippingAddressOnedefault')) === null || _document$querySelect3 === void 0 ? void 0 : _document$querySelect3.value,
      city: (_document$querySelect4 = document.querySelector('#shippingAddressCitydefault')) === null || _document$querySelect4 === void 0 ? void 0 : _document$querySelect4.value,
      stateOrRegion: (_document$querySelect5 = document.querySelector('#shippingAddressCitydefault')) === null || _document$querySelect5 === void 0 ? void 0 : _document$querySelect5.value,
      postalCode: (_document$querySelect6 = document.querySelector('#shippingZipCodedefault')) === null || _document$querySelect6 === void 0 ? void 0 : _document$querySelect6.value,
      countryCode: (_document$querySelect7 = document.querySelector('#shippingCountrydefault')) === null || _document$querySelect7 === void 0 ? void 0 : _document$querySelect7.value,
      phoneNumber: (_document$querySelect8 = document.querySelector('#shippingPhoneNumberdefault')) === null || _document$querySelect8 === void 0 ? void 0 : _document$querySelect8.value
    };
  }
}
/**
 * Calls getPaymenMethods and then renders the retrieved payment methods (including card component)
 */


module.exports.renderGenericComponent = /*#__PURE__*/function () {
  var _renderGenericComponent = _asyncToGenerator( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(Object.keys(store.componentsObj).length !== 0)) {
              _context.next = 3;
              break;
            }

            _context.next = 3;
            return unmountComponents();

          case 3:
            getPaymentMethods(function (data) {
              store.checkoutConfiguration.paymentMethodsResponse = data.AdyenPaymentMethods;
              setCheckoutConfiguration(data);
              setAmazonPayConfig(data.AdyenPaymentMethods);
              store.checkout = new AdyenCheckout(store.checkoutConfiguration);
              document.querySelector('#paymentMethodsList').innerHTML = '';
              renderStoredPaymentMethods(data);
              renderPaymentMethods(data);
              renderPosTerminals(data);
              var firstPaymentMethod = document.querySelector('input[type=radio][name=brandCode]');
              firstPaymentMethod.checked = true;
              helpers.displaySelectedMethod(firstPaymentMethod.value);
            });

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  function renderGenericComponent() {
    return _renderGenericComponent.apply(this, arguments);
  }

  return renderGenericComponent;
}();

/***/ }),

/***/ "./int_adyen_SFRA/cartridge/client/default/js/adyen_checkout/renderPaymentMethod.js":
/*!******************************************************************************************!*\
  !*** ./int_adyen_SFRA/cartridge/client/default/js/adyen_checkout/renderPaymentMethod.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var store = __webpack_require__(/*! ../../../../store */ "./int_adyen_SFRA/cartridge/store/index.js");

var helpers = __webpack_require__(/*! ./helpers */ "./int_adyen_SFRA/cartridge/client/default/js/adyen_checkout/helpers.js");

var _require = __webpack_require__(/*! ./qrCodeMethods */ "./int_adyen_SFRA/cartridge/client/default/js/adyen_checkout/qrCodeMethods.js"),
    qrCodeMethods = _require.qrCodeMethods;

function getFallback(paymentMethod) {
  var fallback = {
    giftcard: "\n        <input type=\"hidden\" class=\"brand\" name=\"brand\" value=\"".concat(paymentMethod.brand, "\"/>\n        <input type=\"hidden\" class=\"type\" name=\"type\" value=\"").concat(paymentMethod.type, "\"/>")
  };

  if (fallback[paymentMethod.type]) {
    store.componentsObj[paymentMethod.type] = {};
  }

  return fallback[paymentMethod.type];
}

function getPersonalDetails() {
  var _document$querySelect, _document$querySelect2, _document$querySelect3, _document$querySelect4, _document$querySelect5, _document$querySelect6, _document$querySelect7, _document$querySelect8, _document$querySelect9, _document$querySelect10, _document$querySelect11, _document$querySelect12, _document$querySelect13, _document$querySelect14, _document$querySelect15, _document$querySelect16;

  return {
    firstName: (_document$querySelect = document.querySelector('#shippingFirstNamedefault')) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.value,
    lastName: (_document$querySelect2 = document.querySelector('#shippingLastNamedefault')) === null || _document$querySelect2 === void 0 ? void 0 : _document$querySelect2.value,
    telephoneNumber: (_document$querySelect3 = document.querySelector('#shippingPhoneNumberdefault')) === null || _document$querySelect3 === void 0 ? void 0 : _document$querySelect3.value,
    shopperEmail: (_document$querySelect4 = document.querySelector('.customer-summary-email')) === null || _document$querySelect4 === void 0 ? void 0 : _document$querySelect4.textContent,
    billingAddress: {
      city: (_document$querySelect5 = document.querySelector('#billingAddressCity')) === null || _document$querySelect5 === void 0 ? void 0 : _document$querySelect5.value,
      postalCode: (_document$querySelect6 = document.querySelector('#billingZipCode')) === null || _document$querySelect6 === void 0 ? void 0 : _document$querySelect6.value,
      country: (_document$querySelect7 = document.querySelector('#billingCountry')) === null || _document$querySelect7 === void 0 ? void 0 : _document$querySelect7.value,
      stateOrProvince: (_document$querySelect8 = document.querySelector('#billingState')) === null || _document$querySelect8 === void 0 ? void 0 : _document$querySelect8.value,
      street: (_document$querySelect9 = document.querySelector('#billingAddressOne')) === null || _document$querySelect9 === void 0 ? void 0 : _document$querySelect9.value,
      houseNumberOrName: (_document$querySelect10 = document.querySelector('#billingAddressTwo')) === null || _document$querySelect10 === void 0 ? void 0 : _document$querySelect10.value
    },
    deliveryAddress: {
      city: (_document$querySelect11 = document.querySelector('#shippingAddressCitydefault')) === null || _document$querySelect11 === void 0 ? void 0 : _document$querySelect11.value,
      postalCode: (_document$querySelect12 = document.querySelector('#shippingZipCodedefault')) === null || _document$querySelect12 === void 0 ? void 0 : _document$querySelect12.value,
      country: (_document$querySelect13 = document.querySelector('#shippingCountrydefault')) === null || _document$querySelect13 === void 0 ? void 0 : _document$querySelect13.value,
      stateOrProvince: (_document$querySelect14 = document.querySelector('#shippingStatedefault')) === null || _document$querySelect14 === void 0 ? void 0 : _document$querySelect14.value,
      street: (_document$querySelect15 = document.querySelector('#shippingAddressOnedefault')) === null || _document$querySelect15 === void 0 ? void 0 : _document$querySelect15.value,
      houseNumberOrName: (_document$querySelect16 = document.querySelector('#shippingAddressTwodefault')) === null || _document$querySelect16 === void 0 ? void 0 : _document$querySelect16.value
    }
  };
}

function setNode(paymentMethodID) {
  var createNode = function createNode() {
    if (!store.componentsObj[paymentMethodID]) {
      store.componentsObj[paymentMethodID] = {};
    }

    try {
      var _store$checkout;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      } // ALl nodes created for the checkout component are enriched with shopper personal details


      var node = (_store$checkout = store.checkout).create.apply(_store$checkout, args.concat([{
        data: _objectSpread(_objectSpread({}, getPersonalDetails()), {}, {
          personalDetails: getPersonalDetails()
        })
      }]));

      store.componentsObj[paymentMethodID].node = node;
    } catch (e) {
      /* No component for payment method */
    }
  };

  return createNode;
}

function getPaymentMethodID(isStored, paymentMethod) {
  if (isStored) {
    return "storedCard".concat(paymentMethod.id);
  }

  if (paymentMethod.brand) {
    // gift cards all share the same type. Brand is used to differentiate between them
    return "".concat(paymentMethod.type, "_").concat(paymentMethod.brand);
  }

  return paymentMethod.type;
}

function getImage(isStored, paymentMethod) {
  return isStored ? paymentMethod.brand : paymentMethod.type;
}

function getLabel(isStored, paymentMethod) {
  var label = isStored ? " ".concat(store.MASKED_CC_PREFIX).concat(paymentMethod.lastFour) : '';
  return "".concat(paymentMethod.name).concat(label);
}

function handleFallbackPayment(_ref) {
  var paymentMethod = _ref.paymentMethod,
      container = _ref.container,
      paymentMethodID = _ref.paymentMethodID;
  var fallback = getFallback(paymentMethod);

  var createTemplate = function createTemplate() {
    var template = document.createElement('template');
    template.innerHTML = fallback;
    container.append(template.content);
  };

  return fallback ? createTemplate() : setNode(paymentMethod.type)(paymentMethodID);
}

function handlePayment(options) {
  return options.isStored ? setNode(options.paymentMethodID)('card', options.paymentMethod) : handleFallbackPayment(options);
}

function getListContents(_ref2) {
  var imagePath = _ref2.imagePath,
      isStored = _ref2.isStored,
      paymentMethod = _ref2.paymentMethod,
      description = _ref2.description;
  var paymentMethodID = getPaymentMethodID(isStored, paymentMethod);
  var label = getLabel(isStored, paymentMethod);
  var liContents = "\n    <input type=\"hidden\" name=\"brandCode\" id=\"rb_" + paymentMethodID + "\" value=\"" + paymentMethodID + "\"> <button name=\"brandCode\" value=\"".concat(paymentMethodID, "\" id=\"rb_").concat(paymentMethodID, "\">\n    <img class=\"paymentMethod_img\" src=\"").concat(imagePath, "\" ></img>\n    <label id=\"lb_").concat(paymentMethodID, "\" for=\"rb_").concat(paymentMethodID, "\">").concat(label, "</label>\n  ");
  return description ? "".concat(liContents, "<p>").concat(description, "</p>") : liContents;
}

function getImagePath(_ref3) {
  var isStored = _ref3.isStored,
      paymentMethod = _ref3.paymentMethod,
      path = _ref3.path,
      isSchemeNotStored = _ref3.isSchemeNotStored;
  var paymentMethodImage = "".concat(path).concat(getImage(isStored, paymentMethod), ".png");
  var cardImage = "".concat(path, "card.png");
  return isSchemeNotStored ? cardImage : paymentMethodImage;
}

function hasNoChildNodes(_ref4) {
  var paymentMethodID = _ref4.paymentMethodID,
      container = _ref4.container;
  return store.componentsObj[paymentMethodID] && !container.childNodes[0];
}

function setValid(_ref5) {
  var paymentMethodID = _ref5.paymentMethodID,
      container = _ref5.container;

  if (hasNoChildNodes({
    paymentMethodID: paymentMethodID,
    container: container
  }) && ['bcmc', 'scheme'].indexOf(paymentMethodID) === -1) {
    store.componentsObj[paymentMethodID].isValid = true;
  }
}

function configureContainer(_ref6) {
  var paymentMethodID = _ref6.paymentMethodID,
      container = _ref6.container;
  container.classList.add('additionalFields');
  container.setAttribute('id', "component_".concat(paymentMethodID));
  container.setAttribute('style', 'display:none');
}

function handleInput(_ref7) {
  var paymentMethodID = _ref7.paymentMethodID;
  var button = document.querySelector("button#rb_".concat(paymentMethodID));

  button.onclick = /*#__PURE__*/function () {
    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regenerator["default"].mark(function _callee(event) {
      var _store$componentsObj$, compName, qrComponent, node;

      var selectedPaymentMethod = document.querySelector('button[name=brandCode].selected');
      selectedPaymentMethod.classList.remove('selected');
      button.classList.add('selected');
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(document.querySelector('.adyen-checkout__qr-loader') && qrCodeMethods.indexOf(store.selectedMethod) > -1)) {
                _context.next = 10;
                break;
              }

              compName = store.selectedMethod;
              qrComponent = store.componentsObj[compName];
              _context.next = 5;
              return Promise.resolve(qrComponent.node.unmount("component_".concat(compName)));

            case 5:
              delete store.componentsObj[compName];
              setNode(compName)(compName);
              node = (_store$componentsObj$ = store.componentsObj[compName]) === null || _store$componentsObj$ === void 0 ? void 0 : _store$componentsObj$.node;

              if (node) {
                node.mount(document.querySelector("#component_".concat(compName)));
              }

              helpers.paymentFromComponent({
                cancelTransaction: true,
                merchantReference: document.querySelector('#merchantReference').value
              });

            case 10:
              helpers.displaySelectedMethod(event.target.value);

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref8.apply(this, arguments);
    };
  }();
}

function insertAfter(newNode, existingNode) {
  existingNode.parentNode.insertBefore(newNode, existingNode.nextSibling);
}

module.exports.renderPaymentMethod = function renderPaymentMethod(paymentMethod, isStored, path) {
  var _store$componentsObj$2;

  var description = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  var paymentMethodsUI = document.querySelector('#paymentMethodsList');
  var li = document.createElement('li');
  var paymentDetailsDiv = document.createElement('div');
  var paymentMethodID = getPaymentMethodID(isStored, paymentMethod);
  var isSchemeNotStored = paymentMethod.type === 'scheme' && !isStored;
  var container = document.createElement('div');
  var options = {
    container: container,
    paymentMethod: paymentMethod,
    isStored: isStored,
    path: path,
    description: description,
    paymentMethodID: paymentMethodID,
    isSchemeNotStored: isSchemeNotStored
  };
  var imagePath = getImagePath(options);
  var liContents = getListContents(_objectSpread(_objectSpread({}, options), {}, {
    imagePath: imagePath
  }));
  li.innerHTML = liContents;
  paymentMethodsUI.classList.add('paymentMethodsList');
  li.classList.add('paymentMethod');
  paymentDetailsDiv.classList.add('paymentBlockContainer');
  handlePayment(options);
  configureContainer(options);
  paymentDetailsDiv.append(container);
  paymentMethodsUI.append(li);
  insertAfter(paymentDetailsDiv, paymentMethodsUI);
  var node = (_store$componentsObj$2 = store.componentsObj[paymentMethodID]) === null || _store$componentsObj$2 === void 0 ? void 0 : _store$componentsObj$2.node;

  if (node) {
    node.mount(container);
  }

  if (paymentMethodID === 'giropay') {
    container.innerHTML = '';
  }

  handleInput(options);
  setValid(options);
};

/***/ }),

/***/ "./int_adyen_SFRA/cartridge/client/default/js/adyen_checkout/validateComponents.js":
/*!*****************************************************************************************!*\
  !*** ./int_adyen_SFRA/cartridge/client/default/js/adyen_checkout/validateComponents.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var store = __webpack_require__(/*! ../../../../store */ "./int_adyen_SFRA/cartridge/store/index.js");

module.exports.validateComponents = function validateComponents() {
  var customMethods = {};

  if (store.selectedMethod in customMethods) {
    customMethods[store.selectedMethod]();
  }

  if (store.stateData && store.stateData.paymentMethod && store.stateData.paymentMethod.holderName === '') {
    store.stateData.paymentMethod.holderName = $('.adyen-checkout__card__holderName__input').val();
  }

  document.querySelector('#adyenStateData').value = JSON.stringify(store.stateData);
};

/***/ }),

/***/ "./int_adyen_SFRA/cartridge/client/default/js/commons/index.js":
/*!*********************************************************************!*\
  !*** ./int_adyen_SFRA/cartridge/client/default/js/commons/index.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var store = __webpack_require__(/*! ../../../../store */ "./int_adyen_SFRA/cartridge/store/index.js");

module.exports.onFieldValid = function onFieldValid(data) {
  if (data.endDigits) {
    store.endDigits = data.endDigits;
    document.querySelector('#cardNumber').value = store.maskedCardNumber;
  }
};

module.exports.onBrand = function onBrand(brandObject) {
  document.querySelector('#cardType').value = brandObject.brand;
};

/***/ }),

/***/ "./int_adyen_SFRA/cartridge/store/index.js":
/*!*************************************************!*\
  !*** ./int_adyen_SFRA/cartridge/store/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _temp;

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _initializerDefineProperty(target, property, descriptor, context) {
  if (!descriptor) return;
  Object.defineProperty(target, property, {
    enumerable: descriptor.enumerable,
    configurable: descriptor.configurable,
    writable: descriptor.writable,
    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
  });
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object.keys(descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object.defineProperty(target, property, desc);
    desc = null;
  }

  return desc;
}

function _initializerWarningHelper(descriptor, context) {
  throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.');
}

var _require = __webpack_require__(/*! mobx */ "./node_modules/mobx/dist/mobx.esm.js"),
    observable = _require.observable,
    computed = _require.computed;

var Store = (_class = (_temp = /*#__PURE__*/function () {
  function Store() {
    _classCallCheck(this, Store);

    _defineProperty(this, "MASKED_CC_PREFIX", '************');

    _initializerDefineProperty(this, "checkout", _descriptor, this);

    _initializerDefineProperty(this, "endDigits", _descriptor2, this);

    _initializerDefineProperty(this, "selectedMethod", _descriptor3, this);

    _initializerDefineProperty(this, "componentsObj", _descriptor4, this);

    _initializerDefineProperty(this, "checkoutConfiguration", _descriptor5, this);

    _initializerDefineProperty(this, "formErrorsExist", _descriptor6, this);

    _initializerDefineProperty(this, "isValid", _descriptor7, this);

    _initializerDefineProperty(this, "paypalTerminatedEarly", _descriptor8, this);

    _initializerDefineProperty(this, "componentState", _descriptor9, this);

    _initializerDefineProperty(this, "brand", _descriptor10, this);
  }

  _createClass(Store, [{
    key: "updateSelectedPayment",
    value: function updateSelectedPayment(method, key, val) {
      this.componentsObj[method][key] = val;
    }
  }, {
    key: "maskedCardNumber",
    get: function get() {
      return "".concat(this.MASKED_CC_PREFIX).concat(this.endDigits);
    }
  }, {
    key: "selectedPayment",
    get: function get() {
      return this.componentsObj[this.selectedMethod];
    }
  }, {
    key: "selectedPaymentIsValid",
    get: function get() {
      var _this$selectedPayment;

      return !!((_this$selectedPayment = this.selectedPayment) !== null && _this$selectedPayment !== void 0 && _this$selectedPayment.isValid);
    }
  }, {
    key: "stateData",
    get: function get() {
      var _this$selectedPayment2;

      return ((_this$selectedPayment2 = this.selectedPayment) === null || _this$selectedPayment2 === void 0 ? void 0 : _this$selectedPayment2.stateData) || {
        paymentMethod: _objectSpread({
          type: this.selectedMethod
        }, this.brand ? {
          brand: this.brand
        } : undefined)
      };
    }
  }]);

  return Store;
}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "checkout", [observable], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "endDigits", [observable], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "selectedMethod", [observable], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "componentsObj", [observable], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return {};
  }
}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "checkoutConfiguration", [observable], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return window.Configuration || {};
  }
}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "formErrorsExist", [observable], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "isValid", [observable], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "paypalTerminatedEarly", [observable], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "componentState", [observable], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return {};
  }
}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, "brand", [observable], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _applyDecoratedDescriptor(_class.prototype, "maskedCardNumber", [computed], Object.getOwnPropertyDescriptor(_class.prototype, "maskedCardNumber"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "selectedPayment", [computed], Object.getOwnPropertyDescriptor(_class.prototype, "selectedPayment"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "selectedPaymentIsValid", [computed], Object.getOwnPropertyDescriptor(_class.prototype, "selectedPaymentIsValid"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "stateData", [computed], Object.getOwnPropertyDescriptor(_class.prototype, "stateData"), _class.prototype)), _class);
module.exports = new Store();

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/interopRequireDefault.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

module.exports = _interopRequireDefault;
module.exports["default"] = module.exports, module.exports.__esModule = true;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/typeof.js":
/*!*******************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/typeof.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return typeof obj;
    };

    module.exports["default"] = module.exports, module.exports.__esModule = true;
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };

    module.exports["default"] = module.exports, module.exports.__esModule = true;
  }

  return _typeof(obj);
}

module.exports = _typeof;
module.exports["default"] = module.exports, module.exports.__esModule = true;

/***/ }),

/***/ "./node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   true ? module.exports : undefined
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}


/***/ }),

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! regenerator-runtime */ "./node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js");


/***/ }),

/***/ "./node_modules/cleave.js/dist/cleave-esm.js":
/*!***************************************************!*\
  !*** ./node_modules/cleave.js/dist/cleave-esm.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

var NumeralFormatter = function (numeralDecimalMark,
                                 numeralIntegerScale,
                                 numeralDecimalScale,
                                 numeralThousandsGroupStyle,
                                 numeralPositiveOnly,
                                 stripLeadingZeroes,
                                 prefix,
                                 signBeforePrefix,
                                 tailPrefix,
                                 delimiter) {
    var owner = this;

    owner.numeralDecimalMark = numeralDecimalMark || '.';
    owner.numeralIntegerScale = numeralIntegerScale > 0 ? numeralIntegerScale : 0;
    owner.numeralDecimalScale = numeralDecimalScale >= 0 ? numeralDecimalScale : 2;
    owner.numeralThousandsGroupStyle = numeralThousandsGroupStyle || NumeralFormatter.groupStyle.thousand;
    owner.numeralPositiveOnly = !!numeralPositiveOnly;
    owner.stripLeadingZeroes = stripLeadingZeroes !== false;
    owner.prefix = (prefix || prefix === '') ? prefix : '';
    owner.signBeforePrefix = !!signBeforePrefix;
    owner.tailPrefix = !!tailPrefix;
    owner.delimiter = (delimiter || delimiter === '') ? delimiter : ',';
    owner.delimiterRE = delimiter ? new RegExp('\\' + delimiter, 'g') : '';
};

NumeralFormatter.groupStyle = {
    thousand: 'thousand',
    lakh:     'lakh',
    wan:      'wan',
    none:     'none'    
};

NumeralFormatter.prototype = {
    getRawValue: function (value) {
        return value.replace(this.delimiterRE, '').replace(this.numeralDecimalMark, '.');
    },

    format: function (value) {
        var owner = this, parts, partSign, partSignAndPrefix, partInteger, partDecimal = '';

        // strip alphabet letters
        value = value.replace(/[A-Za-z]/g, '')
            // replace the first decimal mark with reserved placeholder
            .replace(owner.numeralDecimalMark, 'M')

            // strip non numeric letters except minus and "M"
            // this is to ensure prefix has been stripped
            .replace(/[^\dM-]/g, '')

            // replace the leading minus with reserved placeholder
            .replace(/^\-/, 'N')

            // strip the other minus sign (if present)
            .replace(/\-/g, '')

            // replace the minus sign (if present)
            .replace('N', owner.numeralPositiveOnly ? '' : '-')

            // replace decimal mark
            .replace('M', owner.numeralDecimalMark);

        // strip any leading zeros
        if (owner.stripLeadingZeroes) {
            value = value.replace(/^(-)?0+(?=\d)/, '$1');
        }

        partSign = value.slice(0, 1) === '-' ? '-' : '';
        if (typeof owner.prefix != 'undefined') {
            if (owner.signBeforePrefix) {
                partSignAndPrefix = partSign + owner.prefix;
            } else {
                partSignAndPrefix = owner.prefix + partSign;
            }
        } else {
            partSignAndPrefix = partSign;
        }
        
        partInteger = value;

        if (value.indexOf(owner.numeralDecimalMark) >= 0) {
            parts = value.split(owner.numeralDecimalMark);
            partInteger = parts[0];
            partDecimal = owner.numeralDecimalMark + parts[1].slice(0, owner.numeralDecimalScale);
        }

        if(partSign === '-') {
            partInteger = partInteger.slice(1);
        }

        if (owner.numeralIntegerScale > 0) {
          partInteger = partInteger.slice(0, owner.numeralIntegerScale);
        }

        switch (owner.numeralThousandsGroupStyle) {
        case NumeralFormatter.groupStyle.lakh:
            partInteger = partInteger.replace(/(\d)(?=(\d\d)+\d$)/g, '$1' + owner.delimiter);

            break;

        case NumeralFormatter.groupStyle.wan:
            partInteger = partInteger.replace(/(\d)(?=(\d{4})+$)/g, '$1' + owner.delimiter);

            break;

        case NumeralFormatter.groupStyle.thousand:
            partInteger = partInteger.replace(/(\d)(?=(\d{3})+$)/g, '$1' + owner.delimiter);

            break;
        }

        if (owner.tailPrefix) {
            return partSign + partInteger.toString() + (owner.numeralDecimalScale > 0 ? partDecimal.toString() : '') + owner.prefix;
        }

        return partSignAndPrefix + partInteger.toString() + (owner.numeralDecimalScale > 0 ? partDecimal.toString() : '');
    }
};

var NumeralFormatter_1 = NumeralFormatter;

var DateFormatter = function (datePattern, dateMin, dateMax) {
    var owner = this;

    owner.date = [];
    owner.blocks = [];
    owner.datePattern = datePattern;
    owner.dateMin = dateMin
      .split('-')
      .reverse()
      .map(function(x) {
        return parseInt(x, 10);
      });
    if (owner.dateMin.length === 2) owner.dateMin.unshift(0);

    owner.dateMax = dateMax
      .split('-')
      .reverse()
      .map(function(x) {
        return parseInt(x, 10);
      });
    if (owner.dateMax.length === 2) owner.dateMax.unshift(0);
    
    owner.initBlocks();
};

DateFormatter.prototype = {
    initBlocks: function () {
        var owner = this;
        owner.datePattern.forEach(function (value) {
            if (value === 'Y') {
                owner.blocks.push(4);
            } else {
                owner.blocks.push(2);
            }
        });
    },

    getISOFormatDate: function () {
        var owner = this,
            date = owner.date;

        return date[2] ? (
            date[2] + '-' + owner.addLeadingZero(date[1]) + '-' + owner.addLeadingZero(date[0])
        ) : '';
    },

    getBlocks: function () {
        return this.blocks;
    },

    getValidatedDate: function (value) {
        var owner = this, result = '';

        value = value.replace(/[^\d]/g, '');

        owner.blocks.forEach(function (length, index) {
            if (value.length > 0) {
                var sub = value.slice(0, length),
                    sub0 = sub.slice(0, 1),
                    rest = value.slice(length);

                switch (owner.datePattern[index]) {
                case 'd':
                    if (sub === '00') {
                        sub = '01';
                    } else if (parseInt(sub0, 10) > 3) {
                        sub = '0' + sub0;
                    } else if (parseInt(sub, 10) > 31) {
                        sub = '31';
                    }

                    break;

                case 'm':
                    if (sub === '00') {
                        sub = '01';
                    } else if (parseInt(sub0, 10) > 1) {
                        sub = '0' + sub0;
                    } else if (parseInt(sub, 10) > 12) {
                        sub = '12';
                    }

                    break;
                }

                result += sub;

                // update remaining string
                value = rest;
            }
        });

        return this.getFixedDateString(result);
    },

    getFixedDateString: function (value) {
        var owner = this, datePattern = owner.datePattern, date = [],
            dayIndex = 0, monthIndex = 0, yearIndex = 0,
            dayStartIndex = 0, monthStartIndex = 0, yearStartIndex = 0,
            day, month, year, fullYearDone = false;

        // mm-dd || dd-mm
        if (value.length === 4 && datePattern[0].toLowerCase() !== 'y' && datePattern[1].toLowerCase() !== 'y') {
            dayStartIndex = datePattern[0] === 'd' ? 0 : 2;
            monthStartIndex = 2 - dayStartIndex;
            day = parseInt(value.slice(dayStartIndex, dayStartIndex + 2), 10);
            month = parseInt(value.slice(monthStartIndex, monthStartIndex + 2), 10);

            date = this.getFixedDate(day, month, 0);
        }

        // yyyy-mm-dd || yyyy-dd-mm || mm-dd-yyyy || dd-mm-yyyy || dd-yyyy-mm || mm-yyyy-dd
        if (value.length === 8) {
            datePattern.forEach(function (type, index) {
                switch (type) {
                case 'd':
                    dayIndex = index;
                    break;
                case 'm':
                    monthIndex = index;
                    break;
                default:
                    yearIndex = index;
                    break;
                }
            });

            yearStartIndex = yearIndex * 2;
            dayStartIndex = (dayIndex <= yearIndex) ? dayIndex * 2 : (dayIndex * 2 + 2);
            monthStartIndex = (monthIndex <= yearIndex) ? monthIndex * 2 : (monthIndex * 2 + 2);

            day = parseInt(value.slice(dayStartIndex, dayStartIndex + 2), 10);
            month = parseInt(value.slice(monthStartIndex, monthStartIndex + 2), 10);
            year = parseInt(value.slice(yearStartIndex, yearStartIndex + 4), 10);

            fullYearDone = value.slice(yearStartIndex, yearStartIndex + 4).length === 4;

            date = this.getFixedDate(day, month, year);
        }

        // mm-yy || yy-mm
        if (value.length === 4 && (datePattern[0] === 'y' || datePattern[1] === 'y')) {
            monthStartIndex = datePattern[0] === 'm' ? 0 : 2;
            yearStartIndex = 2 - monthStartIndex;
            month = parseInt(value.slice(monthStartIndex, monthStartIndex + 2), 10);
            year = parseInt(value.slice(yearStartIndex, yearStartIndex + 2), 10);

            fullYearDone = value.slice(yearStartIndex, yearStartIndex + 2).length === 2;

            date = [0, month, year];
        }

        // mm-yyyy || yyyy-mm
        if (value.length === 6 && (datePattern[0] === 'Y' || datePattern[1] === 'Y')) {
            monthStartIndex = datePattern[0] === 'm' ? 0 : 4;
            yearStartIndex = 2 - 0.5 * monthStartIndex;
            month = parseInt(value.slice(monthStartIndex, monthStartIndex + 2), 10);
            year = parseInt(value.slice(yearStartIndex, yearStartIndex + 4), 10);

            fullYearDone = value.slice(yearStartIndex, yearStartIndex + 4).length === 4;

            date = [0, month, year];
        }

        date = owner.getRangeFixedDate(date);
        owner.date = date;

        var result = date.length === 0 ? value : datePattern.reduce(function (previous, current) {
            switch (current) {
            case 'd':
                return previous + (date[0] === 0 ? '' : owner.addLeadingZero(date[0]));
            case 'm':
                return previous + (date[1] === 0 ? '' : owner.addLeadingZero(date[1]));
            case 'y':
                return previous + (fullYearDone ? owner.addLeadingZeroForYear(date[2], false) : '');
            case 'Y':
                return previous + (fullYearDone ? owner.addLeadingZeroForYear(date[2], true) : '');
            }
        }, '');

        return result;
    },

    getRangeFixedDate: function (date) {
        var owner = this,
            datePattern = owner.datePattern,
            dateMin = owner.dateMin || [],
            dateMax = owner.dateMax || [];

        if (!date.length || (dateMin.length < 3 && dateMax.length < 3)) return date;

        if (
          datePattern.find(function(x) {
            return x.toLowerCase() === 'y';
          }) &&
          date[2] === 0
        ) return date;

        if (dateMax.length && (dateMax[2] < date[2] || (
          dateMax[2] === date[2] && (dateMax[1] < date[1] || (
            dateMax[1] === date[1] && dateMax[0] < date[0]
          ))
        ))) return dateMax;

        if (dateMin.length && (dateMin[2] > date[2] || (
          dateMin[2] === date[2] && (dateMin[1] > date[1] || (
            dateMin[1] === date[1] && dateMin[0] > date[0]
          ))
        ))) return dateMin;

        return date;
    },

    getFixedDate: function (day, month, year) {
        day = Math.min(day, 31);
        month = Math.min(month, 12);
        year = parseInt((year || 0), 10);

        if ((month < 7 && month % 2 === 0) || (month > 8 && month % 2 === 1)) {
            day = Math.min(day, month === 2 ? (this.isLeapYear(year) ? 29 : 28) : 30);
        }

        return [day, month, year];
    },

    isLeapYear: function (year) {
        return ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0);
    },

    addLeadingZero: function (number) {
        return (number < 10 ? '0' : '') + number;
    },

    addLeadingZeroForYear: function (number, fullYearMode) {
        if (fullYearMode) {
            return (number < 10 ? '000' : (number < 100 ? '00' : (number < 1000 ? '0' : ''))) + number;
        }

        return (number < 10 ? '0' : '') + number;
    }
};

var DateFormatter_1 = DateFormatter;

var TimeFormatter = function (timePattern, timeFormat) {
    var owner = this;

    owner.time = [];
    owner.blocks = [];
    owner.timePattern = timePattern;
    owner.timeFormat = timeFormat;
    owner.initBlocks();
};

TimeFormatter.prototype = {
    initBlocks: function () {
        var owner = this;
        owner.timePattern.forEach(function () {
            owner.blocks.push(2);
        });
    },

    getISOFormatTime: function () {
        var owner = this,
            time = owner.time;

        return time[2] ? (
            owner.addLeadingZero(time[0]) + ':' + owner.addLeadingZero(time[1]) + ':' + owner.addLeadingZero(time[2])
        ) : '';
    },

    getBlocks: function () {
        return this.blocks;
    },

    getTimeFormatOptions: function () {
        var owner = this;
        if (String(owner.timeFormat) === '12') {
            return {
                maxHourFirstDigit: 1,
                maxHours: 12,
                maxMinutesFirstDigit: 5,
                maxMinutes: 60
            };
        }

        return {
            maxHourFirstDigit: 2,
            maxHours: 23,
            maxMinutesFirstDigit: 5,
            maxMinutes: 60
        };
    },

    getValidatedTime: function (value) {
        var owner = this, result = '';

        value = value.replace(/[^\d]/g, '');

        var timeFormatOptions = owner.getTimeFormatOptions();

        owner.blocks.forEach(function (length, index) {
            if (value.length > 0) {
                var sub = value.slice(0, length),
                    sub0 = sub.slice(0, 1),
                    rest = value.slice(length);

                switch (owner.timePattern[index]) {

                case 'h':
                    if (parseInt(sub0, 10) > timeFormatOptions.maxHourFirstDigit) {
                        sub = '0' + sub0;
                    } else if (parseInt(sub, 10) > timeFormatOptions.maxHours) {
                        sub = timeFormatOptions.maxHours + '';
                    }

                    break;

                case 'm':
                case 's':
                    if (parseInt(sub0, 10) > timeFormatOptions.maxMinutesFirstDigit) {
                        sub = '0' + sub0;
                    } else if (parseInt(sub, 10) > timeFormatOptions.maxMinutes) {
                        sub = timeFormatOptions.maxMinutes + '';
                    }
                    break;
                }

                result += sub;

                // update remaining string
                value = rest;
            }
        });

        return this.getFixedTimeString(result);
    },

    getFixedTimeString: function (value) {
        var owner = this, timePattern = owner.timePattern, time = [],
            secondIndex = 0, minuteIndex = 0, hourIndex = 0,
            secondStartIndex = 0, minuteStartIndex = 0, hourStartIndex = 0,
            second, minute, hour;

        if (value.length === 6) {
            timePattern.forEach(function (type, index) {
                switch (type) {
                case 's':
                    secondIndex = index * 2;
                    break;
                case 'm':
                    minuteIndex = index * 2;
                    break;
                case 'h':
                    hourIndex = index * 2;
                    break;
                }
            });

            hourStartIndex = hourIndex;
            minuteStartIndex = minuteIndex;
            secondStartIndex = secondIndex;

            second = parseInt(value.slice(secondStartIndex, secondStartIndex + 2), 10);
            minute = parseInt(value.slice(minuteStartIndex, minuteStartIndex + 2), 10);
            hour = parseInt(value.slice(hourStartIndex, hourStartIndex + 2), 10);

            time = this.getFixedTime(hour, minute, second);
        }

        if (value.length === 4 && owner.timePattern.indexOf('s') < 0) {
            timePattern.forEach(function (type, index) {
                switch (type) {
                case 'm':
                    minuteIndex = index * 2;
                    break;
                case 'h':
                    hourIndex = index * 2;
                    break;
                }
            });

            hourStartIndex = hourIndex;
            minuteStartIndex = minuteIndex;

            second = 0;
            minute = parseInt(value.slice(minuteStartIndex, minuteStartIndex + 2), 10);
            hour = parseInt(value.slice(hourStartIndex, hourStartIndex + 2), 10);

            time = this.getFixedTime(hour, minute, second);
        }

        owner.time = time;

        return time.length === 0 ? value : timePattern.reduce(function (previous, current) {
            switch (current) {
            case 's':
                return previous + owner.addLeadingZero(time[2]);
            case 'm':
                return previous + owner.addLeadingZero(time[1]);
            case 'h':
                return previous + owner.addLeadingZero(time[0]);
            }
        }, '');
    },

    getFixedTime: function (hour, minute, second) {
        second = Math.min(parseInt(second || 0, 10), 60);
        minute = Math.min(minute, 60);
        hour = Math.min(hour, 60);

        return [hour, minute, second];
    },

    addLeadingZero: function (number) {
        return (number < 10 ? '0' : '') + number;
    }
};

var TimeFormatter_1 = TimeFormatter;

var PhoneFormatter = function (formatter, delimiter) {
    var owner = this;

    owner.delimiter = (delimiter || delimiter === '') ? delimiter : ' ';
    owner.delimiterRE = delimiter ? new RegExp('\\' + delimiter, 'g') : '';

    owner.formatter = formatter;
};

PhoneFormatter.prototype = {
    setFormatter: function (formatter) {
        this.formatter = formatter;
    },

    format: function (phoneNumber) {
        var owner = this;

        owner.formatter.clear();

        // only keep number and +
        phoneNumber = phoneNumber.replace(/[^\d+]/g, '');

        // strip non-leading +
        phoneNumber = phoneNumber.replace(/^\+/, 'B').replace(/\+/g, '').replace('B', '+');

        // strip delimiter
        phoneNumber = phoneNumber.replace(owner.delimiterRE, '');

        var result = '', current, validated = false;

        for (var i = 0, iMax = phoneNumber.length; i < iMax; i++) {
            current = owner.formatter.inputDigit(phoneNumber.charAt(i));

            // has ()- or space inside
            if (/[\s()-]/g.test(current)) {
                result = current;

                validated = true;
            } else {
                if (!validated) {
                    result = current;
                }
                // else: over length input
                // it turns to invalid number again
            }
        }

        // strip ()
        // e.g. US: 7161234567 returns (716) 123-4567
        result = result.replace(/[()]/g, '');
        // replace library delimiter with user customized delimiter
        result = result.replace(/[\s-]/g, owner.delimiter);

        return result;
    }
};

var PhoneFormatter_1 = PhoneFormatter;

var CreditCardDetector = {
    blocks: {
        uatp:          [4, 5, 6],
        amex:          [4, 6, 5],
        diners:        [4, 6, 4],
        discover:      [4, 4, 4, 4],
        mastercard:    [4, 4, 4, 4],
        dankort:       [4, 4, 4, 4],
        instapayment:  [4, 4, 4, 4],
        jcb15:         [4, 6, 5],
        jcb:           [4, 4, 4, 4],
        maestro:       [4, 4, 4, 4],
        visa:          [4, 4, 4, 4],
        mir:           [4, 4, 4, 4],
        unionPay:      [4, 4, 4, 4],
        general:       [4, 4, 4, 4]
    },

    re: {
        // starts with 1; 15 digits, not starts with 1800 (jcb card)
        uatp: /^(?!1800)1\d{0,14}/,

        // starts with 34/37; 15 digits
        amex: /^3[47]\d{0,13}/,

        // starts with 6011/65/644-649; 16 digits
        discover: /^(?:6011|65\d{0,2}|64[4-9]\d?)\d{0,12}/,

        // starts with 300-305/309 or 36/38/39; 14 digits
        diners: /^3(?:0([0-5]|9)|[689]\d?)\d{0,11}/,

        // starts with 51-55/2221–2720; 16 digits
        mastercard: /^(5[1-5]\d{0,2}|22[2-9]\d{0,1}|2[3-7]\d{0,2})\d{0,12}/,

        // starts with 5019/4175/4571; 16 digits
        dankort: /^(5019|4175|4571)\d{0,12}/,

        // starts with 637-639; 16 digits
        instapayment: /^63[7-9]\d{0,13}/,

        // starts with 2131/1800; 15 digits
        jcb15: /^(?:2131|1800)\d{0,11}/,

        // starts with 2131/1800/35; 16 digits
        jcb: /^(?:35\d{0,2})\d{0,12}/,

        // starts with 50/56-58/6304/67; 16 digits
        maestro: /^(?:5[0678]\d{0,2}|6304|67\d{0,2})\d{0,12}/,

        // starts with 22; 16 digits
        mir: /^220[0-4]\d{0,12}/,

        // starts with 4; 16 digits
        visa: /^4\d{0,15}/,

        // starts with 62/81; 16 digits
        unionPay: /^(62|81)\d{0,14}/
    },

    getStrictBlocks: function (block) {
      var total = block.reduce(function (prev, current) {
        return prev + current;
      }, 0);

      return block.concat(19 - total);
    },

    getInfo: function (value, strictMode) {
        var blocks = CreditCardDetector.blocks,
            re = CreditCardDetector.re;

        // Some credit card can have up to 19 digits number.
        // Set strictMode to true will remove the 16 max-length restrain,
        // however, I never found any website validate card number like
        // this, hence probably you don't want to enable this option.
        strictMode = !!strictMode;

        for (var key in re) {
            if (re[key].test(value)) {
                var matchedBlocks = blocks[key];
                return {
                    type: key,
                    blocks: strictMode ? this.getStrictBlocks(matchedBlocks) : matchedBlocks
                };
            }
        }

        return {
            type: 'unknown',
            blocks: strictMode ? this.getStrictBlocks(blocks.general) : blocks.general
        };
    }
};

var CreditCardDetector_1 = CreditCardDetector;

var Util = {
    noop: function () {
    },

    strip: function (value, re) {
        return value.replace(re, '');
    },

    getPostDelimiter: function (value, delimiter, delimiters) {
        // single delimiter
        if (delimiters.length === 0) {
            return value.slice(-delimiter.length) === delimiter ? delimiter : '';
        }

        // multiple delimiters
        var matchedDelimiter = '';
        delimiters.forEach(function (current) {
            if (value.slice(-current.length) === current) {
                matchedDelimiter = current;
            }
        });

        return matchedDelimiter;
    },

    getDelimiterREByDelimiter: function (delimiter) {
        return new RegExp(delimiter.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1'), 'g');
    },

    getNextCursorPosition: function (prevPos, oldValue, newValue, delimiter, delimiters) {
      // If cursor was at the end of value, just place it back.
      // Because new value could contain additional chars.
      if (oldValue.length === prevPos) {
          return newValue.length;
      }

      return prevPos + this.getPositionOffset(prevPos, oldValue, newValue, delimiter ,delimiters);
    },

    getPositionOffset: function (prevPos, oldValue, newValue, delimiter, delimiters) {
        var oldRawValue, newRawValue, lengthOffset;

        oldRawValue = this.stripDelimiters(oldValue.slice(0, prevPos), delimiter, delimiters);
        newRawValue = this.stripDelimiters(newValue.slice(0, prevPos), delimiter, delimiters);
        lengthOffset = oldRawValue.length - newRawValue.length;

        return (lengthOffset !== 0) ? (lengthOffset / Math.abs(lengthOffset)) : 0;
    },

    stripDelimiters: function (value, delimiter, delimiters) {
        var owner = this;

        // single delimiter
        if (delimiters.length === 0) {
            var delimiterRE = delimiter ? owner.getDelimiterREByDelimiter(delimiter) : '';

            return value.replace(delimiterRE, '');
        }

        // multiple delimiters
        delimiters.forEach(function (current) {
            current.split('').forEach(function (letter) {
                value = value.replace(owner.getDelimiterREByDelimiter(letter), '');
            });
        });

        return value;
    },

    headStr: function (str, length) {
        return str.slice(0, length);
    },

    getMaxLength: function (blocks) {
        return blocks.reduce(function (previous, current) {
            return previous + current;
        }, 0);
    },

    // strip prefix
    // Before type  |   After type    |     Return value
    // PEFIX-...    |   PEFIX-...     |     ''
    // PREFIX-123   |   PEFIX-123     |     123
    // PREFIX-123   |   PREFIX-23     |     23
    // PREFIX-123   |   PREFIX-1234   |     1234
    getPrefixStrippedValue: function (value, prefix, prefixLength, prevResult, delimiter, delimiters, noImmediatePrefix, tailPrefix, signBeforePrefix) {
        // No prefix
        if (prefixLength === 0) {
          return value;
        }

        // Value is prefix
        if (value === prefix && value !== '') {
          return '';
        }

        if (signBeforePrefix && (value.slice(0, 1) == '-')) {
            var prev = (prevResult.slice(0, 1) == '-') ? prevResult.slice(1) : prevResult;
            return '-' + this.getPrefixStrippedValue(value.slice(1), prefix, prefixLength, prev, delimiter, delimiters, noImmediatePrefix, tailPrefix, signBeforePrefix);
        }

        // Pre result prefix string does not match pre-defined prefix
        if (prevResult.slice(0, prefixLength) !== prefix && !tailPrefix) {
            // Check if the first time user entered something
            if (noImmediatePrefix && !prevResult && value) return value;
            return '';
        } else if (prevResult.slice(-prefixLength) !== prefix && tailPrefix) {
            // Check if the first time user entered something
            if (noImmediatePrefix && !prevResult && value) return value;
            return '';
        }

        var prevValue = this.stripDelimiters(prevResult, delimiter, delimiters);

        // New value has issue, someone typed in between prefix letters
        // Revert to pre value
        if (value.slice(0, prefixLength) !== prefix && !tailPrefix) {
            return prevValue.slice(prefixLength);
        } else if (value.slice(-prefixLength) !== prefix && tailPrefix) {
            return prevValue.slice(0, -prefixLength - 1);
        }

        // No issue, strip prefix for new value
        return tailPrefix ? value.slice(0, -prefixLength) : value.slice(prefixLength);
    },

    getFirstDiffIndex: function (prev, current) {
        var index = 0;

        while (prev.charAt(index) === current.charAt(index)) {
            if (prev.charAt(index++) === '') {
                return -1;
            }
        }

        return index;
    },

    getFormattedValue: function (value, blocks, blocksLength, delimiter, delimiters, delimiterLazyShow) {
        var result = '',
            multipleDelimiters = delimiters.length > 0,
            currentDelimiter = '';

        // no options, normal input
        if (blocksLength === 0) {
            return value;
        }

        blocks.forEach(function (length, index) {
            if (value.length > 0) {
                var sub = value.slice(0, length),
                    rest = value.slice(length);

                if (multipleDelimiters) {
                    currentDelimiter = delimiters[delimiterLazyShow ? (index - 1) : index] || currentDelimiter;
                } else {
                    currentDelimiter = delimiter;
                }

                if (delimiterLazyShow) {
                    if (index > 0) {
                        result += currentDelimiter;
                    }

                    result += sub;
                } else {
                    result += sub;

                    if (sub.length === length && index < blocksLength - 1) {
                        result += currentDelimiter;
                    }
                }

                // update remaining string
                value = rest;
            }
        });

        return result;
    },

    // move cursor to the end
    // the first time user focuses on an input with prefix
    fixPrefixCursor: function (el, prefix, delimiter, delimiters) {
        if (!el) {
            return;
        }

        var val = el.value,
            appendix = delimiter || (delimiters[0] || ' ');

        if (!el.setSelectionRange || !prefix || (prefix.length + appendix.length) <= val.length) {
            return;
        }

        var len = val.length * 2;

        // set timeout to avoid blink
        setTimeout(function () {
            el.setSelectionRange(len, len);
        }, 1);
    },

    // Check if input field is fully selected
    checkFullSelection: function(value) {
      try {
        var selection = window.getSelection() || document.getSelection() || {};
        return selection.toString().length === value.length;
      } catch (ex) {
        // Ignore
      }

      return false;
    },

    setSelection: function (element, position, doc) {
        if (element !== this.getActiveElement(doc)) {
            return;
        }

        // cursor is already in the end
        if (element && element.value.length <= position) {
          return;
        }

        if (element.createTextRange) {
            var range = element.createTextRange();

            range.move('character', position);
            range.select();
        } else {
            try {
                element.setSelectionRange(position, position);
            } catch (e) {
                // eslint-disable-next-line
                console.warn('The input element type does not support selection');
            }
        }
    },

    getActiveElement: function(parent) {
        var activeElement = parent.activeElement;
        if (activeElement && activeElement.shadowRoot) {
            return this.getActiveElement(activeElement.shadowRoot);
        }
        return activeElement;
    },

    isAndroid: function () {
        return navigator && /android/i.test(navigator.userAgent);
    },

    // On Android chrome, the keyup and keydown events
    // always return key code 229 as a composition that
    // buffers the user’s keystrokes
    // see https://github.com/nosir/cleave.js/issues/147
    isAndroidBackspaceKeydown: function (lastInputValue, currentInputValue) {
        if (!this.isAndroid() || !lastInputValue || !currentInputValue) {
            return false;
        }

        return currentInputValue === lastInputValue.slice(0, -1);
    }
};

var Util_1 = Util;

/**
 * Props Assignment
 *
 * Separate this, so react module can share the usage
 */
var DefaultProperties = {
    // Maybe change to object-assign
    // for now just keep it as simple
    assign: function (target, opts) {
        target = target || {};
        opts = opts || {};

        // credit card
        target.creditCard = !!opts.creditCard;
        target.creditCardStrictMode = !!opts.creditCardStrictMode;
        target.creditCardType = '';
        target.onCreditCardTypeChanged = opts.onCreditCardTypeChanged || (function () {});

        // phone
        target.phone = !!opts.phone;
        target.phoneRegionCode = opts.phoneRegionCode || 'AU';
        target.phoneFormatter = {};

        // time
        target.time = !!opts.time;
        target.timePattern = opts.timePattern || ['h', 'm', 's'];
        target.timeFormat = opts.timeFormat || '24';
        target.timeFormatter = {};

        // date
        target.date = !!opts.date;
        target.datePattern = opts.datePattern || ['d', 'm', 'Y'];
        target.dateMin = opts.dateMin || '';
        target.dateMax = opts.dateMax || '';
        target.dateFormatter = {};

        // numeral
        target.numeral = !!opts.numeral;
        target.numeralIntegerScale = opts.numeralIntegerScale > 0 ? opts.numeralIntegerScale : 0;
        target.numeralDecimalScale = opts.numeralDecimalScale >= 0 ? opts.numeralDecimalScale : 2;
        target.numeralDecimalMark = opts.numeralDecimalMark || '.';
        target.numeralThousandsGroupStyle = opts.numeralThousandsGroupStyle || 'thousand';
        target.numeralPositiveOnly = !!opts.numeralPositiveOnly;
        target.stripLeadingZeroes = opts.stripLeadingZeroes !== false;
        target.signBeforePrefix = !!opts.signBeforePrefix;
        target.tailPrefix = !!opts.tailPrefix;

        // others
        target.swapHiddenInput = !!opts.swapHiddenInput;
        
        target.numericOnly = target.creditCard || target.date || !!opts.numericOnly;

        target.uppercase = !!opts.uppercase;
        target.lowercase = !!opts.lowercase;

        target.prefix = (target.creditCard || target.date) ? '' : (opts.prefix || '');
        target.noImmediatePrefix = !!opts.noImmediatePrefix;
        target.prefixLength = target.prefix.length;
        target.rawValueTrimPrefix = !!opts.rawValueTrimPrefix;
        target.copyDelimiter = !!opts.copyDelimiter;

        target.initValue = (opts.initValue !== undefined && opts.initValue !== null) ? opts.initValue.toString() : '';

        target.delimiter =
            (opts.delimiter || opts.delimiter === '') ? opts.delimiter :
                (opts.date ? '/' :
                    (opts.time ? ':' :
                        (opts.numeral ? ',' :
                            (opts.phone ? ' ' :
                                ' '))));
        target.delimiterLength = target.delimiter.length;
        target.delimiterLazyShow = !!opts.delimiterLazyShow;
        target.delimiters = opts.delimiters || [];

        target.blocks = opts.blocks || [];
        target.blocksLength = target.blocks.length;

        target.root = (typeof commonjsGlobal === 'object' && commonjsGlobal) ? commonjsGlobal : window;
        target.document = opts.document || target.root.document;

        target.maxLength = 0;

        target.backspace = false;
        target.result = '';

        target.onValueChanged = opts.onValueChanged || (function () {});

        return target;
    }
};

var DefaultProperties_1 = DefaultProperties;

/**
 * Construct a new Cleave instance by passing the configuration object
 *
 * @param {String | HTMLElement} element
 * @param {Object} opts
 */
var Cleave = function (element, opts) {
    var owner = this;
    var hasMultipleElements = false;

    if (typeof element === 'string') {
        owner.element = document.querySelector(element);
        hasMultipleElements = document.querySelectorAll(element).length > 1;
    } else {
      if (typeof element.length !== 'undefined' && element.length > 0) {
        owner.element = element[0];
        hasMultipleElements = element.length > 1;
      } else {
        owner.element = element;
      }
    }

    if (!owner.element) {
        throw new Error('[cleave.js] Please check the element');
    }

    if (hasMultipleElements) {
      try {
        // eslint-disable-next-line
        console.warn('[cleave.js] Multiple input fields matched, cleave.js will only take the first one.');
      } catch (e) {
        // Old IE
      }
    }

    opts.initValue = owner.element.value;

    owner.properties = Cleave.DefaultProperties.assign({}, opts);

    owner.init();
};

Cleave.prototype = {
    init: function () {
        var owner = this, pps = owner.properties;

        // no need to use this lib
        if (!pps.numeral && !pps.phone && !pps.creditCard && !pps.time && !pps.date && (pps.blocksLength === 0 && !pps.prefix)) {
            owner.onInput(pps.initValue);

            return;
        }

        pps.maxLength = Cleave.Util.getMaxLength(pps.blocks);

        owner.isAndroid = Cleave.Util.isAndroid();
        owner.lastInputValue = '';
        owner.isBackward = '';

        owner.onChangeListener = owner.onChange.bind(owner);
        owner.onKeyDownListener = owner.onKeyDown.bind(owner);
        owner.onFocusListener = owner.onFocus.bind(owner);
        owner.onCutListener = owner.onCut.bind(owner);
        owner.onCopyListener = owner.onCopy.bind(owner);

        owner.initSwapHiddenInput();

        owner.element.addEventListener('input', owner.onChangeListener);
        owner.element.addEventListener('keydown', owner.onKeyDownListener);
        owner.element.addEventListener('focus', owner.onFocusListener);
        owner.element.addEventListener('cut', owner.onCutListener);
        owner.element.addEventListener('copy', owner.onCopyListener);


        owner.initPhoneFormatter();
        owner.initDateFormatter();
        owner.initTimeFormatter();
        owner.initNumeralFormatter();

        // avoid touch input field if value is null
        // otherwise Firefox will add red box-shadow for <input required />
        if (pps.initValue || (pps.prefix && !pps.noImmediatePrefix)) {
            owner.onInput(pps.initValue);
        }
    },

    initSwapHiddenInput: function () {
        var owner = this, pps = owner.properties;
        if (!pps.swapHiddenInput) return;

        var inputFormatter = owner.element.cloneNode(true);
        owner.element.parentNode.insertBefore(inputFormatter, owner.element);

        owner.elementSwapHidden = owner.element;
        owner.elementSwapHidden.type = 'hidden';

        owner.element = inputFormatter;
        owner.element.id = '';
    },

    initNumeralFormatter: function () {
        var owner = this, pps = owner.properties;

        if (!pps.numeral) {
            return;
        }

        pps.numeralFormatter = new Cleave.NumeralFormatter(
            pps.numeralDecimalMark,
            pps.numeralIntegerScale,
            pps.numeralDecimalScale,
            pps.numeralThousandsGroupStyle,
            pps.numeralPositiveOnly,
            pps.stripLeadingZeroes,
            pps.prefix,
            pps.signBeforePrefix,
            pps.tailPrefix,
            pps.delimiter
        );
    },

    initTimeFormatter: function() {
        var owner = this, pps = owner.properties;

        if (!pps.time) {
            return;
        }

        pps.timeFormatter = new Cleave.TimeFormatter(pps.timePattern, pps.timeFormat);
        pps.blocks = pps.timeFormatter.getBlocks();
        pps.blocksLength = pps.blocks.length;
        pps.maxLength = Cleave.Util.getMaxLength(pps.blocks);
    },

    initDateFormatter: function () {
        var owner = this, pps = owner.properties;

        if (!pps.date) {
            return;
        }

        pps.dateFormatter = new Cleave.DateFormatter(pps.datePattern, pps.dateMin, pps.dateMax);
        pps.blocks = pps.dateFormatter.getBlocks();
        pps.blocksLength = pps.blocks.length;
        pps.maxLength = Cleave.Util.getMaxLength(pps.blocks);
    },

    initPhoneFormatter: function () {
        var owner = this, pps = owner.properties;

        if (!pps.phone) {
            return;
        }

        // Cleave.AsYouTypeFormatter should be provided by
        // external google closure lib
        try {
            pps.phoneFormatter = new Cleave.PhoneFormatter(
                new pps.root.Cleave.AsYouTypeFormatter(pps.phoneRegionCode),
                pps.delimiter
            );
        } catch (ex) {
            throw new Error('[cleave.js] Please include phone-type-formatter.{country}.js lib');
        }
    },

    onKeyDown: function (event) {
        var owner = this,
            charCode = event.which || event.keyCode;

        owner.lastInputValue = owner.element.value;
        owner.isBackward = charCode === 8;
    },

    onChange: function (event) {
        var owner = this, pps = owner.properties,
            Util = Cleave.Util;

        owner.isBackward = owner.isBackward || event.inputType === 'deleteContentBackward';

        var postDelimiter = Util.getPostDelimiter(owner.lastInputValue, pps.delimiter, pps.delimiters);

        if (owner.isBackward && postDelimiter) {
            pps.postDelimiterBackspace = postDelimiter;
        } else {
            pps.postDelimiterBackspace = false;
        }

        this.onInput(this.element.value);
    },

    onFocus: function () {
        var owner = this,
            pps = owner.properties;
        owner.lastInputValue = owner.element.value;

        if (pps.prefix && pps.noImmediatePrefix && !owner.element.value) {
            this.onInput(pps.prefix);
        }

        Cleave.Util.fixPrefixCursor(owner.element, pps.prefix, pps.delimiter, pps.delimiters);
    },

    onCut: function (e) {
        if (!Cleave.Util.checkFullSelection(this.element.value)) return;
        this.copyClipboardData(e);
        this.onInput('');
    },

    onCopy: function (e) {
        if (!Cleave.Util.checkFullSelection(this.element.value)) return;
        this.copyClipboardData(e);
    },

    copyClipboardData: function (e) {
        var owner = this,
            pps = owner.properties,
            Util = Cleave.Util,
            inputValue = owner.element.value,
            textToCopy = '';

        if (!pps.copyDelimiter) {
            textToCopy = Util.stripDelimiters(inputValue, pps.delimiter, pps.delimiters);
        } else {
            textToCopy = inputValue;
        }

        try {
            if (e.clipboardData) {
                e.clipboardData.setData('Text', textToCopy);
            } else {
                window.clipboardData.setData('Text', textToCopy);
            }

            e.preventDefault();
        } catch (ex) {
            //  empty
        }
    },

    onInput: function (value) {
        var owner = this, pps = owner.properties,
            Util = Cleave.Util;

        // case 1: delete one more character "4"
        // 1234*| -> hit backspace -> 123|
        // case 2: last character is not delimiter which is:
        // 12|34* -> hit backspace -> 1|34*
        // note: no need to apply this for numeral mode
        var postDelimiterAfter = Util.getPostDelimiter(value, pps.delimiter, pps.delimiters);
        if (!pps.numeral && pps.postDelimiterBackspace && !postDelimiterAfter) {
            value = Util.headStr(value, value.length - pps.postDelimiterBackspace.length);
        }

        // phone formatter
        if (pps.phone) {
            if (pps.prefix && (!pps.noImmediatePrefix || value.length)) {
                pps.result = pps.prefix + pps.phoneFormatter.format(value).slice(pps.prefix.length);
            } else {
                pps.result = pps.phoneFormatter.format(value);
            }
            owner.updateValueState();

            return;
        }

        // numeral formatter
        if (pps.numeral) {
            // Do not show prefix when noImmediatePrefix is specified
            // This mostly because we need to show user the native input placeholder
            if (pps.prefix && pps.noImmediatePrefix && value.length === 0) {
                pps.result = '';
            } else {
                pps.result = pps.numeralFormatter.format(value);
            }
            owner.updateValueState();

            return;
        }

        // date
        if (pps.date) {
            value = pps.dateFormatter.getValidatedDate(value);
        }

        // time
        if (pps.time) {
            value = pps.timeFormatter.getValidatedTime(value);
        }

        // strip delimiters
        value = Util.stripDelimiters(value, pps.delimiter, pps.delimiters);

        // strip prefix
        value = Util.getPrefixStrippedValue(value, pps.prefix, pps.prefixLength, pps.result, pps.delimiter, pps.delimiters, pps.noImmediatePrefix, pps.tailPrefix, pps.signBeforePrefix);

        // strip non-numeric characters
        value = pps.numericOnly ? Util.strip(value, /[^\d]/g) : value;

        // convert case
        value = pps.uppercase ? value.toUpperCase() : value;
        value = pps.lowercase ? value.toLowerCase() : value;

        // prevent from showing prefix when no immediate option enabled with empty input value
        if (pps.prefix) {
            if (pps.tailPrefix) {
                value = value + pps.prefix;
            } else {
                value = pps.prefix + value;
            }


            // no blocks specified, no need to do formatting
            if (pps.blocksLength === 0) {
                pps.result = value;
                owner.updateValueState();

                return;
            }
        }

        // update credit card props
        if (pps.creditCard) {
            owner.updateCreditCardPropsByValue(value);
        }

        // strip over length characters
        value = Util.headStr(value, pps.maxLength);

        // apply blocks
        pps.result = Util.getFormattedValue(
            value,
            pps.blocks, pps.blocksLength,
            pps.delimiter, pps.delimiters, pps.delimiterLazyShow
        );

        owner.updateValueState();
    },

    updateCreditCardPropsByValue: function (value) {
        var owner = this, pps = owner.properties,
            Util = Cleave.Util,
            creditCardInfo;

        // At least one of the first 4 characters has changed
        if (Util.headStr(pps.result, 4) === Util.headStr(value, 4)) {
            return;
        }

        creditCardInfo = Cleave.CreditCardDetector.getInfo(value, pps.creditCardStrictMode);

        pps.blocks = creditCardInfo.blocks;
        pps.blocksLength = pps.blocks.length;
        pps.maxLength = Util.getMaxLength(pps.blocks);

        // credit card type changed
        if (pps.creditCardType !== creditCardInfo.type) {
            pps.creditCardType = creditCardInfo.type;

            pps.onCreditCardTypeChanged.call(owner, pps.creditCardType);
        }
    },

    updateValueState: function () {
        var owner = this,
            Util = Cleave.Util,
            pps = owner.properties;

        if (!owner.element) {
            return;
        }

        var endPos = owner.element.selectionEnd;
        var oldValue = owner.element.value;
        var newValue = pps.result;

        endPos = Util.getNextCursorPosition(endPos, oldValue, newValue, pps.delimiter, pps.delimiters);

        // fix Android browser type="text" input field
        // cursor not jumping issue
        if (owner.isAndroid) {
            window.setTimeout(function () {
                owner.element.value = newValue;
                Util.setSelection(owner.element, endPos, pps.document, false);
                owner.callOnValueChanged();
            }, 1);

            return;
        }

        owner.element.value = newValue;
        if (pps.swapHiddenInput) owner.elementSwapHidden.value = owner.getRawValue();

        Util.setSelection(owner.element, endPos, pps.document, false);
        owner.callOnValueChanged();
    },

    callOnValueChanged: function () {
        var owner = this,
            pps = owner.properties;

        pps.onValueChanged.call(owner, {
            target: {
                name: owner.element.name,
                value: pps.result,
                rawValue: owner.getRawValue()
            }
        });
    },

    setPhoneRegionCode: function (phoneRegionCode) {
        var owner = this, pps = owner.properties;

        pps.phoneRegionCode = phoneRegionCode;
        owner.initPhoneFormatter();
        owner.onChange();
    },

    setRawValue: function (value) {
        var owner = this, pps = owner.properties;

        value = value !== undefined && value !== null ? value.toString() : '';

        if (pps.numeral) {
            value = value.replace('.', pps.numeralDecimalMark);
        }

        pps.postDelimiterBackspace = false;

        owner.element.value = value;
        owner.onInput(value);
    },

    getRawValue: function () {
        var owner = this,
            pps = owner.properties,
            Util = Cleave.Util,
            rawValue = owner.element.value;

        if (pps.rawValueTrimPrefix) {
            rawValue = Util.getPrefixStrippedValue(rawValue, pps.prefix, pps.prefixLength, pps.result, pps.delimiter, pps.delimiters, pps.noImmediatePrefix, pps.tailPrefix, pps.signBeforePrefix);
        }

        if (pps.numeral) {
            rawValue = pps.numeralFormatter.getRawValue(rawValue);
        } else {
            rawValue = Util.stripDelimiters(rawValue, pps.delimiter, pps.delimiters);
        }

        return rawValue;
    },

    getISOFormatDate: function () {
        var owner = this,
            pps = owner.properties;

        return pps.date ? pps.dateFormatter.getISOFormatDate() : '';
    },

    getISOFormatTime: function () {
        var owner = this,
            pps = owner.properties;

        return pps.time ? pps.timeFormatter.getISOFormatTime() : '';
    },

    getFormattedValue: function () {
        return this.element.value;
    },

    destroy: function () {
        var owner = this;

        owner.element.removeEventListener('input', owner.onChangeListener);
        owner.element.removeEventListener('keydown', owner.onKeyDownListener);
        owner.element.removeEventListener('focus', owner.onFocusListener);
        owner.element.removeEventListener('cut', owner.onCutListener);
        owner.element.removeEventListener('copy', owner.onCopyListener);
    },

    toString: function () {
        return '[Cleave Object]';
    }
};

Cleave.NumeralFormatter = NumeralFormatter_1;
Cleave.DateFormatter = DateFormatter_1;
Cleave.TimeFormatter = TimeFormatter_1;
Cleave.PhoneFormatter = PhoneFormatter_1;
Cleave.CreditCardDetector = CreditCardDetector_1;
Cleave.Util = Util_1;
Cleave.DefaultProperties = DefaultProperties_1;

// for angular directive
((typeof commonjsGlobal === 'object' && commonjsGlobal) ? commonjsGlobal : window)['Cleave'] = Cleave;

// CommonJS
var Cleave_1 = Cleave;

/* harmony default export */ __webpack_exports__["default"] = (Cleave_1);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/dom7/dom7.esm.js":
/*!***************************************!*\
  !*** ./node_modules/dom7/dom7.esm.js ***!
  \***************************************/
/*! exports provided: default, $, add, addClass, animate, animationEnd, append, appendTo, attr, blur, change, children, click, closest, css, data, dataset, detach, each, empty, eq, filter, find, focus, focusin, focusout, hasClass, height, hide, html, index, insertAfter, insertBefore, is, keydown, keypress, keyup, mousedown, mouseenter, mouseleave, mousemove, mouseout, mouseover, mouseup, next, nextAll, off, offset, on, once, outerHeight, outerWidth, parent, parents, prepend, prependTo, prev, prevAll, prop, remove, removeAttr, removeClass, removeData, resize, scroll, scrollLeft, scrollTo, scrollTop, show, siblings, stop, styles, submit, text, toggleClass, touchend, touchmove, touchstart, transform, transition, transitionEnd, trigger, val, value, width */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "$", function() { return $; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addClass", function() { return addClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "animate", function() { return animate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "animationEnd", function() { return animationEnd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "append", function() { return append; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "appendTo", function() { return appendTo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "attr", function() { return attr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "blur", function() { return blur; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "change", function() { return change; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "children", function() { return children; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "click", function() { return click; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "closest", function() { return closest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "css", function() { return css; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "data", function() { return data; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dataset", function() { return dataset; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "detach", function() { return detach; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "each", function() { return each; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "empty", function() { return empty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eq", function() { return eq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filter", function() { return filter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "find", function() { return find; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "focus", function() { return focus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "focusin", function() { return focusin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "focusout", function() { return focusout; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasClass", function() { return hasClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "height", function() { return height; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hide", function() { return hide; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "html", function() { return html; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "index", function() { return index; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "insertAfter", function() { return insertAfter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "insertBefore", function() { return insertBefore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "is", function() { return is; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keydown", function() { return keydown; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keypress", function() { return keypress; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keyup", function() { return keyup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mousedown", function() { return mousedown; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mouseenter", function() { return mouseenter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mouseleave", function() { return mouseleave; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mousemove", function() { return mousemove; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mouseout", function() { return mouseout; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mouseover", function() { return mouseover; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mouseup", function() { return mouseup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "next", function() { return next; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nextAll", function() { return nextAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "off", function() { return off; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "offset", function() { return offset; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "on", function() { return on; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "once", function() { return once; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "outerHeight", function() { return outerHeight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "outerWidth", function() { return outerWidth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parent", function() { return parent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parents", function() { return parents; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prepend", function() { return prepend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prependTo", function() { return prependTo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prev", function() { return prev; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prevAll", function() { return prevAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prop", function() { return prop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "remove", function() { return remove; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeAttr", function() { return removeAttr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeClass", function() { return removeClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeData", function() { return removeData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resize", function() { return resize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scroll", function() { return scroll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scrollLeft", function() { return scrollLeft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scrollTo", function() { return scrollTo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scrollTop", function() { return scrollTop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "show", function() { return show; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "siblings", function() { return siblings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stop", function() { return stop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "styles", function() { return styles; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "submit", function() { return submit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "text", function() { return text; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toggleClass", function() { return toggleClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "touchend", function() { return touchend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "touchmove", function() { return touchmove; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "touchstart", function() { return touchstart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transform", function() { return transform; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transition", function() { return transition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transitionEnd", function() { return transitionEnd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "trigger", function() { return trigger; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "val", function() { return val; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "value", function() { return value; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "width", function() { return width; });
/* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");
/**
 * Dom7 3.0.0
 * Minimalistic JavaScript library for DOM manipulation, with a jQuery-compatible API
 * https://framework7.io/docs/dom7.html
 *
 * Copyright 2020, Vladimir Kharlampidi
 *
 * Licensed under MIT
 *
 * Released on: November 9, 2020
 */


function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

/* eslint-disable no-proto */
function makeReactive(obj) {
  var proto = obj.__proto__;
  Object.defineProperty(obj, '__proto__', {
    get: function get() {
      return proto;
    },
    set: function set(value) {
      proto.__proto__ = value;
    }
  });
}

var Dom7 = /*#__PURE__*/function (_Array) {
  _inheritsLoose(Dom7, _Array);

  function Dom7(items) {
    var _this;

    _this = _Array.call.apply(_Array, [this].concat(items)) || this;
    makeReactive(_assertThisInitialized(_this));
    return _this;
  }

  return Dom7;
}( /*#__PURE__*/_wrapNativeSuper(Array));

function arrayFlat(arr) {
  if (arr === void 0) {
    arr = [];
  }

  var res = [];
  arr.forEach(function (el) {
    if (Array.isArray(el)) {
      res.push.apply(res, arrayFlat(el));
    } else {
      res.push(el);
    }
  });
  return res;
}
function arrayFilter(arr, callback) {
  return Array.prototype.filter.call(arr, callback);
}
function arrayUnique(arr) {
  var uniqueArray = [];

  for (var i = 0; i < arr.length; i += 1) {
    if (uniqueArray.indexOf(arr[i]) === -1) uniqueArray.push(arr[i]);
  }

  return uniqueArray;
}
function toCamelCase(string) {
  return string.toLowerCase().replace(/-(.)/g, function (match, group) {
    return group.toUpperCase();
  });
}

function qsa(selector, context) {
  if (typeof selector !== 'string') {
    return [selector];
  }

  var a = [];
  var res = context.querySelectorAll(selector);

  for (var i = 0; i < res.length; i += 1) {
    a.push(res[i]);
  }

  return a;
}

function $(selector, context) {
  var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();
  var document = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getDocument"])();
  var arr = [];

  if (!context && selector instanceof Dom7) {
    return selector;
  }

  if (!selector) {
    return new Dom7(arr);
  }

  if (typeof selector === 'string') {
    var html = selector.trim();

    if (html.indexOf('<') >= 0 && html.indexOf('>') >= 0) {
      var toCreate = 'div';
      if (html.indexOf('<li') === 0) toCreate = 'ul';
      if (html.indexOf('<tr') === 0) toCreate = 'tbody';
      if (html.indexOf('<td') === 0 || html.indexOf('<th') === 0) toCreate = 'tr';
      if (html.indexOf('<tbody') === 0) toCreate = 'table';
      if (html.indexOf('<option') === 0) toCreate = 'select';
      var tempParent = document.createElement(toCreate);
      tempParent.innerHTML = html;

      for (var i = 0; i < tempParent.childNodes.length; i += 1) {
        arr.push(tempParent.childNodes[i]);
      }
    } else {
      arr = qsa(selector.trim(), context || document);
    } // arr = qsa(selector, document);

  } else if (selector.nodeType || selector === window || selector === document) {
    arr.push(selector);
  } else if (Array.isArray(selector)) {
    if (selector instanceof Dom7) return selector;
    arr = selector;
  }

  return new Dom7(arrayUnique(arr));
}

$.fn = Dom7.prototype;

function addClass() {
  for (var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++) {
    classes[_key] = arguments[_key];
  }

  var classNames = arrayFlat(classes.map(function (c) {
    return c.split(' ');
  }));
  this.forEach(function (el) {
    var _el$classList;

    (_el$classList = el.classList).add.apply(_el$classList, classNames);
  });
  return this;
}

function removeClass() {
  for (var _len2 = arguments.length, classes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    classes[_key2] = arguments[_key2];
  }

  var classNames = arrayFlat(classes.map(function (c) {
    return c.split(' ');
  }));
  this.forEach(function (el) {
    var _el$classList2;

    (_el$classList2 = el.classList).remove.apply(_el$classList2, classNames);
  });
  return this;
}

function toggleClass() {
  for (var _len3 = arguments.length, classes = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    classes[_key3] = arguments[_key3];
  }

  var classNames = arrayFlat(classes.map(function (c) {
    return c.split(' ');
  }));
  this.forEach(function (el) {
    classNames.forEach(function (className) {
      el.classList.toggle(className);
    });
  });
}

function hasClass() {
  for (var _len4 = arguments.length, classes = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    classes[_key4] = arguments[_key4];
  }

  var classNames = arrayFlat(classes.map(function (c) {
    return c.split(' ');
  }));
  return arrayFilter(this, function (el) {
    return classNames.filter(function (className) {
      return el.classList.contains(className);
    }).length > 0;
  }).length > 0;
}

function attr(attrs, value) {
  if (arguments.length === 1 && typeof attrs === 'string') {
    // Get attr
    if (this[0]) return this[0].getAttribute(attrs);
    return undefined;
  } // Set attrs


  for (var i = 0; i < this.length; i += 1) {
    if (arguments.length === 2) {
      // String
      this[i].setAttribute(attrs, value);
    } else {
      // Object
      for (var attrName in attrs) {
        this[i][attrName] = attrs[attrName];
        this[i].setAttribute(attrName, attrs[attrName]);
      }
    }
  }

  return this;
}

function removeAttr(attr) {
  for (var i = 0; i < this.length; i += 1) {
    this[i].removeAttribute(attr);
  }

  return this;
}

function prop(props, value) {
  if (arguments.length === 1 && typeof props === 'string') {
    // Get prop
    if (this[0]) return this[0][props];
  } else {
    // Set props
    for (var i = 0; i < this.length; i += 1) {
      if (arguments.length === 2) {
        // String
        this[i][props] = value;
      } else {
        // Object
        for (var propName in props) {
          this[i][propName] = props[propName];
        }
      }
    }

    return this;
  }

  return this;
}

function data(key, value) {
  var el;

  if (typeof value === 'undefined') {
    el = this[0];
    if (!el) return undefined; // Get value

    if (el.dom7ElementDataStorage && key in el.dom7ElementDataStorage) {
      return el.dom7ElementDataStorage[key];
    }

    var dataKey = el.getAttribute("data-" + key);

    if (dataKey) {
      return dataKey;
    }

    return undefined;
  } // Set value


  for (var i = 0; i < this.length; i += 1) {
    el = this[i];
    if (!el.dom7ElementDataStorage) el.dom7ElementDataStorage = {};
    el.dom7ElementDataStorage[key] = value;
  }

  return this;
}

function removeData(key) {
  for (var i = 0; i < this.length; i += 1) {
    var el = this[i];

    if (el.dom7ElementDataStorage && el.dom7ElementDataStorage[key]) {
      el.dom7ElementDataStorage[key] = null;
      delete el.dom7ElementDataStorage[key];
    }
  }
}

function dataset() {
  var el = this[0];
  if (!el) return undefined;
  var dataset = {}; // eslint-disable-line

  if (el.dataset) {
    for (var dataKey in el.dataset) {
      dataset[dataKey] = el.dataset[dataKey];
    }
  } else {
    for (var i = 0; i < el.attributes.length; i += 1) {
      var _attr = el.attributes[i];

      if (_attr.name.indexOf('data-') >= 0) {
        dataset[toCamelCase(_attr.name.split('data-')[1])] = _attr.value;
      }
    }
  }

  for (var key in dataset) {
    if (dataset[key] === 'false') dataset[key] = false;else if (dataset[key] === 'true') dataset[key] = true;else if (parseFloat(dataset[key]) === dataset[key] * 1) dataset[key] *= 1;
  }

  return dataset;
}

function val(value) {
  if (typeof value === 'undefined') {
    // get value
    var el = this[0];
    if (!el) return undefined;

    if (el.multiple && el.nodeName.toLowerCase() === 'select') {
      var values = [];

      for (var i = 0; i < el.selectedOptions.length; i += 1) {
        values.push(el.selectedOptions[i].value);
      }

      return values;
    }

    return el.value;
  } // set value


  for (var _i = 0; _i < this.length; _i += 1) {
    var _el = this[_i];

    if (Array.isArray(value) && _el.multiple && _el.nodeName.toLowerCase() === 'select') {
      for (var j = 0; j < _el.options.length; j += 1) {
        _el.options[j].selected = value.indexOf(_el.options[j].value) >= 0;
      }
    } else {
      _el.value = value;
    }
  }

  return this;
}

function value(value) {
  return this.val(value);
}

function transform(transform) {
  for (var i = 0; i < this.length; i += 1) {
    this[i].style.transform = transform;
  }

  return this;
}

function transition(duration) {
  for (var i = 0; i < this.length; i += 1) {
    this[i].style.transitionDuration = typeof duration !== 'string' ? duration + "ms" : duration;
  }

  return this;
}

function on() {
  for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
    args[_key5] = arguments[_key5];
  }

  var eventType = args[0],
      targetSelector = args[1],
      listener = args[2],
      capture = args[3];

  if (typeof args[1] === 'function') {
    eventType = args[0];
    listener = args[1];
    capture = args[2];
    targetSelector = undefined;
  }

  if (!capture) capture = false;

  function handleLiveEvent(e) {
    var target = e.target;
    if (!target) return;
    var eventData = e.target.dom7EventData || [];

    if (eventData.indexOf(e) < 0) {
      eventData.unshift(e);
    }

    if ($(target).is(targetSelector)) listener.apply(target, eventData);else {
      var _parents = $(target).parents(); // eslint-disable-line


      for (var k = 0; k < _parents.length; k += 1) {
        if ($(_parents[k]).is(targetSelector)) listener.apply(_parents[k], eventData);
      }
    }
  }

  function handleEvent(e) {
    var eventData = e && e.target ? e.target.dom7EventData || [] : [];

    if (eventData.indexOf(e) < 0) {
      eventData.unshift(e);
    }

    listener.apply(this, eventData);
  }

  var events = eventType.split(' ');
  var j;

  for (var i = 0; i < this.length; i += 1) {
    var el = this[i];

    if (!targetSelector) {
      for (j = 0; j < events.length; j += 1) {
        var event = events[j];
        if (!el.dom7Listeners) el.dom7Listeners = {};
        if (!el.dom7Listeners[event]) el.dom7Listeners[event] = [];
        el.dom7Listeners[event].push({
          listener: listener,
          proxyListener: handleEvent
        });
        el.addEventListener(event, handleEvent, capture);
      }
    } else {
      // Live events
      for (j = 0; j < events.length; j += 1) {
        var _event = events[j];
        if (!el.dom7LiveListeners) el.dom7LiveListeners = {};
        if (!el.dom7LiveListeners[_event]) el.dom7LiveListeners[_event] = [];

        el.dom7LiveListeners[_event].push({
          listener: listener,
          proxyListener: handleLiveEvent
        });

        el.addEventListener(_event, handleLiveEvent, capture);
      }
    }
  }

  return this;
}

function off() {
  for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
    args[_key6] = arguments[_key6];
  }

  var eventType = args[0],
      targetSelector = args[1],
      listener = args[2],
      capture = args[3];

  if (typeof args[1] === 'function') {
    eventType = args[0];
    listener = args[1];
    capture = args[2];
    targetSelector = undefined;
  }

  if (!capture) capture = false;
  var events = eventType.split(' ');

  for (var i = 0; i < events.length; i += 1) {
    var event = events[i];

    for (var j = 0; j < this.length; j += 1) {
      var el = this[j];
      var handlers = void 0;

      if (!targetSelector && el.dom7Listeners) {
        handlers = el.dom7Listeners[event];
      } else if (targetSelector && el.dom7LiveListeners) {
        handlers = el.dom7LiveListeners[event];
      }

      if (handlers && handlers.length) {
        for (var k = handlers.length - 1; k >= 0; k -= 1) {
          var handler = handlers[k];

          if (listener && handler.listener === listener) {
            el.removeEventListener(event, handler.proxyListener, capture);
            handlers.splice(k, 1);
          } else if (listener && handler.listener && handler.listener.dom7proxy && handler.listener.dom7proxy === listener) {
            el.removeEventListener(event, handler.proxyListener, capture);
            handlers.splice(k, 1);
          } else if (!listener) {
            el.removeEventListener(event, handler.proxyListener, capture);
            handlers.splice(k, 1);
          }
        }
      }
    }
  }

  return this;
}

function once() {
  var dom = this;

  for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
    args[_key7] = arguments[_key7];
  }

  var eventName = args[0],
      targetSelector = args[1],
      listener = args[2],
      capture = args[3];

  if (typeof args[1] === 'function') {
    eventName = args[0];
    listener = args[1];
    capture = args[2];
    targetSelector = undefined;
  }

  function onceHandler() {
    for (var _len8 = arguments.length, eventArgs = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
      eventArgs[_key8] = arguments[_key8];
    }

    listener.apply(this, eventArgs);
    dom.off(eventName, targetSelector, onceHandler, capture);

    if (onceHandler.dom7proxy) {
      delete onceHandler.dom7proxy;
    }
  }

  onceHandler.dom7proxy = listener;
  return dom.on(eventName, targetSelector, onceHandler, capture);
}

function trigger() {
  var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();

  for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
    args[_key9] = arguments[_key9];
  }

  var events = args[0].split(' ');
  var eventData = args[1];

  for (var i = 0; i < events.length; i += 1) {
    var event = events[i];

    for (var j = 0; j < this.length; j += 1) {
      var el = this[j];

      if (window.CustomEvent) {
        var evt = new window.CustomEvent(event, {
          detail: eventData,
          bubbles: true,
          cancelable: true
        });
        el.dom7EventData = args.filter(function (data, dataIndex) {
          return dataIndex > 0;
        });
        el.dispatchEvent(evt);
        el.dom7EventData = [];
        delete el.dom7EventData;
      }
    }
  }

  return this;
}

function transitionEnd(callback) {
  var dom = this;

  function fireCallBack(e) {
    if (e.target !== this) return;
    callback.call(this, e);
    dom.off('transitionend', fireCallBack);
  }

  if (callback) {
    dom.on('transitionend', fireCallBack);
  }

  return this;
}

function animationEnd(callback) {
  var dom = this;

  function fireCallBack(e) {
    if (e.target !== this) return;
    callback.call(this, e);
    dom.off('animationend', fireCallBack);
  }

  if (callback) {
    dom.on('animationend', fireCallBack);
  }

  return this;
}

function width() {
  var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();

  if (this[0] === window) {
    return window.innerWidth;
  }

  if (this.length > 0) {
    return parseFloat(this.css('width'));
  }

  return null;
}

function outerWidth(includeMargins) {
  if (this.length > 0) {
    if (includeMargins) {
      var _styles = this.styles();

      return this[0].offsetWidth + parseFloat(_styles.getPropertyValue('margin-right')) + parseFloat(_styles.getPropertyValue('margin-left'));
    }

    return this[0].offsetWidth;
  }

  return null;
}

function height() {
  var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();

  if (this[0] === window) {
    return window.innerHeight;
  }

  if (this.length > 0) {
    return parseFloat(this.css('height'));
  }

  return null;
}

function outerHeight(includeMargins) {
  if (this.length > 0) {
    if (includeMargins) {
      var _styles2 = this.styles();

      return this[0].offsetHeight + parseFloat(_styles2.getPropertyValue('margin-top')) + parseFloat(_styles2.getPropertyValue('margin-bottom'));
    }

    return this[0].offsetHeight;
  }

  return null;
}

function offset() {
  if (this.length > 0) {
    var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();
    var document = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getDocument"])();
    var el = this[0];
    var box = el.getBoundingClientRect();
    var body = document.body;
    var clientTop = el.clientTop || body.clientTop || 0;
    var clientLeft = el.clientLeft || body.clientLeft || 0;
    var scrollTop = el === window ? window.scrollY : el.scrollTop;
    var scrollLeft = el === window ? window.scrollX : el.scrollLeft;
    return {
      top: box.top + scrollTop - clientTop,
      left: box.left + scrollLeft - clientLeft
    };
  }

  return null;
}

function hide() {
  for (var i = 0; i < this.length; i += 1) {
    this[i].style.display = 'none';
  }

  return this;
}

function show() {
  var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();

  for (var i = 0; i < this.length; i += 1) {
    var el = this[i];

    if (el.style.display === 'none') {
      el.style.display = '';
    }

    if (window.getComputedStyle(el, null).getPropertyValue('display') === 'none') {
      // Still not visible
      el.style.display = 'block';
    }
  }

  return this;
}

function styles() {
  var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();
  if (this[0]) return window.getComputedStyle(this[0], null);
  return {};
}

function css(props, value) {
  var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();
  var i;

  if (arguments.length === 1) {
    if (typeof props === 'string') {
      // .css('width')
      if (this[0]) return window.getComputedStyle(this[0], null).getPropertyValue(props);
    } else {
      // .css({ width: '100px' })
      for (i = 0; i < this.length; i += 1) {
        for (var _prop in props) {
          this[i].style[_prop] = props[_prop];
        }
      }

      return this;
    }
  }

  if (arguments.length === 2 && typeof props === 'string') {
    // .css('width', '100px')
    for (i = 0; i < this.length; i += 1) {
      this[i].style[props] = value;
    }

    return this;
  }

  return this;
}

function each(callback) {
  if (!callback) return this;
  this.forEach(function (el, index) {
    callback.apply(el, [el, index]);
  });
  return this;
}

function filter(callback) {
  var result = arrayFilter(this, callback);
  return $(result);
}

function html(html) {
  if (typeof html === 'undefined') {
    return this[0] ? this[0].innerHTML : null;
  }

  for (var i = 0; i < this.length; i += 1) {
    this[i].innerHTML = html;
  }

  return this;
}

function text(text) {
  if (typeof text === 'undefined') {
    return this[0] ? this[0].textContent.trim() : null;
  }

  for (var i = 0; i < this.length; i += 1) {
    this[i].textContent = text;
  }

  return this;
}

function is(selector) {
  var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();
  var document = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getDocument"])();
  var el = this[0];
  var compareWith;
  var i;
  if (!el || typeof selector === 'undefined') return false;

  if (typeof selector === 'string') {
    if (el.matches) return el.matches(selector);
    if (el.webkitMatchesSelector) return el.webkitMatchesSelector(selector);
    if (el.msMatchesSelector) return el.msMatchesSelector(selector);
    compareWith = $(selector);

    for (i = 0; i < compareWith.length; i += 1) {
      if (compareWith[i] === el) return true;
    }

    return false;
  }

  if (selector === document) {
    return el === document;
  }

  if (selector === window) {
    return el === window;
  }

  if (selector.nodeType || selector instanceof Dom7) {
    compareWith = selector.nodeType ? [selector] : selector;

    for (i = 0; i < compareWith.length; i += 1) {
      if (compareWith[i] === el) return true;
    }

    return false;
  }

  return false;
}

function index() {
  var child = this[0];
  var i;

  if (child) {
    i = 0; // eslint-disable-next-line

    while ((child = child.previousSibling) !== null) {
      if (child.nodeType === 1) i += 1;
    }

    return i;
  }

  return undefined;
}

function eq(index) {
  if (typeof index === 'undefined') return this;
  var length = this.length;

  if (index > length - 1) {
    return $([]);
  }

  if (index < 0) {
    var returnIndex = length + index;
    if (returnIndex < 0) return $([]);
    return $([this[returnIndex]]);
  }

  return $([this[index]]);
}

function append() {
  var newChild;
  var document = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getDocument"])();

  for (var k = 0; k < arguments.length; k += 1) {
    newChild = k < 0 || arguments.length <= k ? undefined : arguments[k];

    for (var i = 0; i < this.length; i += 1) {
      if (typeof newChild === 'string') {
        var tempDiv = document.createElement('div');
        tempDiv.innerHTML = newChild;

        while (tempDiv.firstChild) {
          this[i].appendChild(tempDiv.firstChild);
        }
      } else if (newChild instanceof Dom7) {
        for (var j = 0; j < newChild.length; j += 1) {
          this[i].appendChild(newChild[j]);
        }
      } else {
        this[i].appendChild(newChild);
      }
    }
  }

  return this;
}

function appendTo(parent) {
  $(parent).append(this);
  return this;
}

function prepend(newChild) {
  var document = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getDocument"])();
  var i;
  var j;

  for (i = 0; i < this.length; i += 1) {
    if (typeof newChild === 'string') {
      var tempDiv = document.createElement('div');
      tempDiv.innerHTML = newChild;

      for (j = tempDiv.childNodes.length - 1; j >= 0; j -= 1) {
        this[i].insertBefore(tempDiv.childNodes[j], this[i].childNodes[0]);
      }
    } else if (newChild instanceof Dom7) {
      for (j = 0; j < newChild.length; j += 1) {
        this[i].insertBefore(newChild[j], this[i].childNodes[0]);
      }
    } else {
      this[i].insertBefore(newChild, this[i].childNodes[0]);
    }
  }

  return this;
}

function prependTo(parent) {
  $(parent).prepend(this);
  return this;
}

function insertBefore(selector) {
  var before = $(selector);

  for (var i = 0; i < this.length; i += 1) {
    if (before.length === 1) {
      before[0].parentNode.insertBefore(this[i], before[0]);
    } else if (before.length > 1) {
      for (var j = 0; j < before.length; j += 1) {
        before[j].parentNode.insertBefore(this[i].cloneNode(true), before[j]);
      }
    }
  }
}

function insertAfter(selector) {
  var after = $(selector);

  for (var i = 0; i < this.length; i += 1) {
    if (after.length === 1) {
      after[0].parentNode.insertBefore(this[i], after[0].nextSibling);
    } else if (after.length > 1) {
      for (var j = 0; j < after.length; j += 1) {
        after[j].parentNode.insertBefore(this[i].cloneNode(true), after[j].nextSibling);
      }
    }
  }
}

function next(selector) {
  if (this.length > 0) {
    if (selector) {
      if (this[0].nextElementSibling && $(this[0].nextElementSibling).is(selector)) {
        return $([this[0].nextElementSibling]);
      }

      return $([]);
    }

    if (this[0].nextElementSibling) return $([this[0].nextElementSibling]);
    return $([]);
  }

  return $([]);
}

function nextAll(selector) {
  var nextEls = [];
  var el = this[0];
  if (!el) return $([]);

  while (el.nextElementSibling) {
    var _next = el.nextElementSibling; // eslint-disable-line

    if (selector) {
      if ($(_next).is(selector)) nextEls.push(_next);
    } else nextEls.push(_next);

    el = _next;
  }

  return $(nextEls);
}

function prev(selector) {
  if (this.length > 0) {
    var el = this[0];

    if (selector) {
      if (el.previousElementSibling && $(el.previousElementSibling).is(selector)) {
        return $([el.previousElementSibling]);
      }

      return $([]);
    }

    if (el.previousElementSibling) return $([el.previousElementSibling]);
    return $([]);
  }

  return $([]);
}

function prevAll(selector) {
  var prevEls = [];
  var el = this[0];
  if (!el) return $([]);

  while (el.previousElementSibling) {
    var _prev = el.previousElementSibling; // eslint-disable-line

    if (selector) {
      if ($(_prev).is(selector)) prevEls.push(_prev);
    } else prevEls.push(_prev);

    el = _prev;
  }

  return $(prevEls);
}

function siblings(selector) {
  return this.nextAll(selector).add(this.prevAll(selector));
}

function parent(selector) {
  var parents = []; // eslint-disable-line

  for (var i = 0; i < this.length; i += 1) {
    if (this[i].parentNode !== null) {
      if (selector) {
        if ($(this[i].parentNode).is(selector)) parents.push(this[i].parentNode);
      } else {
        parents.push(this[i].parentNode);
      }
    }
  }

  return $(parents);
}

function parents(selector) {
  var parents = []; // eslint-disable-line

  for (var i = 0; i < this.length; i += 1) {
    var _parent = this[i].parentNode; // eslint-disable-line

    while (_parent) {
      if (selector) {
        if ($(_parent).is(selector)) parents.push(_parent);
      } else {
        parents.push(_parent);
      }

      _parent = _parent.parentNode;
    }
  }

  return $(parents);
}

function closest(selector) {
  var closest = this; // eslint-disable-line

  if (typeof selector === 'undefined') {
    return $([]);
  }

  if (!closest.is(selector)) {
    closest = closest.parents(selector).eq(0);
  }

  return closest;
}

function find(selector) {
  var foundElements = [];

  for (var i = 0; i < this.length; i += 1) {
    var found = this[i].querySelectorAll(selector);

    for (var j = 0; j < found.length; j += 1) {
      foundElements.push(found[j]);
    }
  }

  return $(foundElements);
}

function children(selector) {
  var children = []; // eslint-disable-line

  for (var i = 0; i < this.length; i += 1) {
    var childNodes = this[i].children;

    for (var j = 0; j < childNodes.length; j += 1) {
      if (!selector || $(childNodes[j]).is(selector)) {
        children.push(childNodes[j]);
      }
    }
  }

  return $(children);
}

function remove() {
  for (var i = 0; i < this.length; i += 1) {
    if (this[i].parentNode) this[i].parentNode.removeChild(this[i]);
  }

  return this;
}

function detach() {
  return this.remove();
}

function add() {
  var dom = this;
  var i;
  var j;

  for (var _len10 = arguments.length, els = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
    els[_key10] = arguments[_key10];
  }

  for (i = 0; i < els.length; i += 1) {
    var toAdd = $(els[i]);

    for (j = 0; j < toAdd.length; j += 1) {
      dom.push(toAdd[j]);
    }
  }

  return dom;
}

function empty() {
  for (var i = 0; i < this.length; i += 1) {
    var el = this[i];

    if (el.nodeType === 1) {
      for (var j = 0; j < el.childNodes.length; j += 1) {
        if (el.childNodes[j].parentNode) {
          el.childNodes[j].parentNode.removeChild(el.childNodes[j]);
        }
      }

      el.textContent = '';
    }
  }

  return this;
}

function scrollTo() {
  var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();

  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var left = args[0],
      top = args[1],
      duration = args[2],
      easing = args[3],
      callback = args[4];

  if (args.length === 4 && typeof easing === 'function') {
    callback = easing;
    left = args[0];
    top = args[1];
    duration = args[2];
    callback = args[3];
    easing = args[4];
  }

  if (typeof easing === 'undefined') easing = 'swing';
  return this.each(function animate() {
    var el = this;
    var currentTop;
    var currentLeft;
    var maxTop;
    var maxLeft;
    var newTop;
    var newLeft;
    var scrollTop; // eslint-disable-line

    var scrollLeft; // eslint-disable-line

    var animateTop = top > 0 || top === 0;
    var animateLeft = left > 0 || left === 0;

    if (typeof easing === 'undefined') {
      easing = 'swing';
    }

    if (animateTop) {
      currentTop = el.scrollTop;

      if (!duration) {
        el.scrollTop = top;
      }
    }

    if (animateLeft) {
      currentLeft = el.scrollLeft;

      if (!duration) {
        el.scrollLeft = left;
      }
    }

    if (!duration) return;

    if (animateTop) {
      maxTop = el.scrollHeight - el.offsetHeight;
      newTop = Math.max(Math.min(top, maxTop), 0);
    }

    if (animateLeft) {
      maxLeft = el.scrollWidth - el.offsetWidth;
      newLeft = Math.max(Math.min(left, maxLeft), 0);
    }

    var startTime = null;
    if (animateTop && newTop === currentTop) animateTop = false;
    if (animateLeft && newLeft === currentLeft) animateLeft = false;

    function render(time) {
      if (time === void 0) {
        time = new Date().getTime();
      }

      if (startTime === null) {
        startTime = time;
      }

      var progress = Math.max(Math.min((time - startTime) / duration, 1), 0);
      var easeProgress = easing === 'linear' ? progress : 0.5 - Math.cos(progress * Math.PI) / 2;
      var done;
      if (animateTop) scrollTop = currentTop + easeProgress * (newTop - currentTop);
      if (animateLeft) scrollLeft = currentLeft + easeProgress * (newLeft - currentLeft);

      if (animateTop && newTop > currentTop && scrollTop >= newTop) {
        el.scrollTop = newTop;
        done = true;
      }

      if (animateTop && newTop < currentTop && scrollTop <= newTop) {
        el.scrollTop = newTop;
        done = true;
      }

      if (animateLeft && newLeft > currentLeft && scrollLeft >= newLeft) {
        el.scrollLeft = newLeft;
        done = true;
      }

      if (animateLeft && newLeft < currentLeft && scrollLeft <= newLeft) {
        el.scrollLeft = newLeft;
        done = true;
      }

      if (done) {
        if (callback) callback();
        return;
      }

      if (animateTop) el.scrollTop = scrollTop;
      if (animateLeft) el.scrollLeft = scrollLeft;
      window.requestAnimationFrame(render);
    }

    window.requestAnimationFrame(render);
  });
} // scrollTop(top, duration, easing, callback) {


function scrollTop() {
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  var top = args[0],
      duration = args[1],
      easing = args[2],
      callback = args[3];

  if (args.length === 3 && typeof easing === 'function') {
    top = args[0];
    duration = args[1];
    callback = args[2];
    easing = args[3];
  }

  var dom = this;

  if (typeof top === 'undefined') {
    if (dom.length > 0) return dom[0].scrollTop;
    return null;
  }

  return dom.scrollTo(undefined, top, duration, easing, callback);
}

function scrollLeft() {
  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    args[_key3] = arguments[_key3];
  }

  var left = args[0],
      duration = args[1],
      easing = args[2],
      callback = args[3];

  if (args.length === 3 && typeof easing === 'function') {
    left = args[0];
    duration = args[1];
    callback = args[2];
    easing = args[3];
  }

  var dom = this;

  if (typeof left === 'undefined') {
    if (dom.length > 0) return dom[0].scrollLeft;
    return null;
  }

  return dom.scrollTo(left, undefined, duration, easing, callback);
}

function animate(initialProps, initialParams) {
  var window = Object(ssr_window__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();
  var els = this;
  var a = {
    props: Object.assign({}, initialProps),
    params: Object.assign({
      duration: 300,
      easing: 'swing' // or 'linear'

      /* Callbacks
      begin(elements)
      complete(elements)
      progress(elements, complete, remaining, start, tweenValue)
      */

    }, initialParams),
    elements: els,
    animating: false,
    que: [],
    easingProgress: function easingProgress(easing, progress) {
      if (easing === 'swing') {
        return 0.5 - Math.cos(progress * Math.PI) / 2;
      }

      if (typeof easing === 'function') {
        return easing(progress);
      }

      return progress;
    },
    stop: function stop() {
      if (a.frameId) {
        window.cancelAnimationFrame(a.frameId);
      }

      a.animating = false;
      a.elements.each(function (el) {
        var element = el;
        delete element.dom7AnimateInstance;
      });
      a.que = [];
    },
    done: function done(complete) {
      a.animating = false;
      a.elements.each(function (el) {
        var element = el;
        delete element.dom7AnimateInstance;
      });
      if (complete) complete(els);

      if (a.que.length > 0) {
        var que = a.que.shift();
        a.animate(que[0], que[1]);
      }
    },
    animate: function animate(props, params) {
      if (a.animating) {
        a.que.push([props, params]);
        return a;
      }

      var elements = []; // Define & Cache Initials & Units

      a.elements.each(function (el, index) {
        var initialFullValue;
        var initialValue;
        var unit;
        var finalValue;
        var finalFullValue;
        if (!el.dom7AnimateInstance) a.elements[index].dom7AnimateInstance = a;
        elements[index] = {
          container: el
        };
        Object.keys(props).forEach(function (prop) {
          initialFullValue = window.getComputedStyle(el, null).getPropertyValue(prop).replace(',', '.');
          initialValue = parseFloat(initialFullValue);
          unit = initialFullValue.replace(initialValue, '');
          finalValue = parseFloat(props[prop]);
          finalFullValue = props[prop] + unit;
          elements[index][prop] = {
            initialFullValue: initialFullValue,
            initialValue: initialValue,
            unit: unit,
            finalValue: finalValue,
            finalFullValue: finalFullValue,
            currentValue: initialValue
          };
        });
      });
      var startTime = null;
      var time;
      var elementsDone = 0;
      var propsDone = 0;
      var done;
      var began = false;
      a.animating = true;

      function render() {
        time = new Date().getTime();
        var progress;
        var easeProgress; // let el;

        if (!began) {
          began = true;
          if (params.begin) params.begin(els);
        }

        if (startTime === null) {
          startTime = time;
        }

        if (params.progress) {
          // eslint-disable-next-line
          params.progress(els, Math.max(Math.min((time - startTime) / params.duration, 1), 0), startTime + params.duration - time < 0 ? 0 : startTime + params.duration - time, startTime);
        }

        elements.forEach(function (element) {
          var el = element;
          if (done || el.done) return;
          Object.keys(props).forEach(function (prop) {
            if (done || el.done) return;
            progress = Math.max(Math.min((time - startTime) / params.duration, 1), 0);
            easeProgress = a.easingProgress(params.easing, progress);
            var _el$prop = el[prop],
                initialValue = _el$prop.initialValue,
                finalValue = _el$prop.finalValue,
                unit = _el$prop.unit;
            el[prop].currentValue = initialValue + easeProgress * (finalValue - initialValue);
            var currentValue = el[prop].currentValue;

            if (finalValue > initialValue && currentValue >= finalValue || finalValue < initialValue && currentValue <= finalValue) {
              el.container.style[prop] = finalValue + unit;
              propsDone += 1;

              if (propsDone === Object.keys(props).length) {
                el.done = true;
                elementsDone += 1;
              }

              if (elementsDone === elements.length) {
                done = true;
              }
            }

            if (done) {
              a.done(params.complete);
              return;
            }

            el.container.style[prop] = currentValue + unit;
          });
        });
        if (done) return; // Then call

        a.frameId = window.requestAnimationFrame(render);
      }

      a.frameId = window.requestAnimationFrame(render);
      return a;
    }
  };

  if (a.elements.length === 0) {
    return els;
  }

  var animateInstance;

  for (var i = 0; i < a.elements.length; i += 1) {
    if (a.elements[i].dom7AnimateInstance) {
      animateInstance = a.elements[i].dom7AnimateInstance;
    } else a.elements[i].dom7AnimateInstance = a;
  }

  if (!animateInstance) {
    animateInstance = a;
  }

  if (initialProps === 'stop') {
    animateInstance.stop();
  } else {
    animateInstance.animate(a.props, a.params);
  }

  return els;
}

function stop() {
  var els = this;

  for (var i = 0; i < els.length; i += 1) {
    if (els[i].dom7AnimateInstance) {
      els[i].dom7AnimateInstance.stop();
    }
  }
}

var noTrigger = 'resize scroll'.split(' ');

function shortcut(name) {
  function eventHandler() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (typeof args[0] === 'undefined') {
      for (var i = 0; i < this.length; i += 1) {
        if (noTrigger.indexOf(name) < 0) {
          if (name in this[i]) this[i][name]();else {
            $(this[i]).trigger(name);
          }
        }
      }

      return this;
    }

    return this.on.apply(this, [name].concat(args));
  }

  return eventHandler;
}

var click = shortcut('click');
var blur = shortcut('blur');
var focus = shortcut('focus');
var focusin = shortcut('focusin');
var focusout = shortcut('focusout');
var keyup = shortcut('keyup');
var keydown = shortcut('keydown');
var keypress = shortcut('keypress');
var submit = shortcut('submit');
var change = shortcut('change');
var mousedown = shortcut('mousedown');
var mousemove = shortcut('mousemove');
var mouseup = shortcut('mouseup');
var mouseenter = shortcut('mouseenter');
var mouseleave = shortcut('mouseleave');
var mouseout = shortcut('mouseout');
var mouseover = shortcut('mouseover');
var touchstart = shortcut('touchstart');
var touchend = shortcut('touchend');
var touchmove = shortcut('touchmove');
var resize = shortcut('resize');
var scroll = shortcut('scroll');

/* harmony default export */ __webpack_exports__["default"] = ($);



/***/ }),

/***/ "./node_modules/lodash/lodash.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/lodash.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.21';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function',
      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading whitespace. */
  var reTrimStart = /^\s+/;

  /** Used to match a single whitespace character. */
  var reWhitespace = /\s/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /**
   * Used to validate the `validate` option in `_.template` variable.
   *
   * Forbids characters which could potentially change the meaning of the function argument definition:
   * - "()," (modification of function parameters)
   * - "=" (default value)
   * - "[]{}" (destructuring of function parameters)
   * - "/" (beginning of a comment)
   * - whitespace
   */
  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports =  true && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */
  function baseTrim(string) {
    return string
      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
      : string;
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedEndIndex(string) {
    var index = string.length;

    while (index-- && reWhitespace.test(string.charAt(index))) {}
    return index;
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      if (iteratees.length) {
        iteratees = arrayMap(iteratees, function(iteratee) {
          if (isArray(iteratee)) {
            return function(value) {
              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
            }
          }
          return iteratee;
        });
      } else {
        iteratees = [identity];
      }

      var index = -1;
      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
          return object;
        }

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      var low = 0,
          high = array == null ? 0 : array.length;
      if (high === 0) {
        return 0;
      }

      value = iteratee(value);
      var valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision && nativeIsFinite(number)) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Check that cyclic values are equal.
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Check that cyclic values are equal.
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key === 'constructor' && typeof object[key] === 'function') {
        return;
      }

      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      // The sourceURL gets injected into the source that's eval-ed, so be careful
      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
      // and escape the comment, thus injecting code that gets evaled.
      var sourceURL = '//# sourceURL=' +
        (hasOwnProperty.call(options, 'sourceURL')
          ? (options.sourceURL + '').replace(/\s/g, ' ')
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Throw an error if a forbidden character was found in `variable`, to prevent
      // potential command injection attacks.
      else if (reForbiddenIdentifierChars.test(variable)) {
        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
      }

      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return baseTrim(string);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.slice(0, trimmedEndIndex(string) + 1);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     *
     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '';
        if (!hasOwnProperty.call(realNames, key)) {
          realNames[key] = [];
        }
        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (true) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return _;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else {}
}.call(this));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/mobx/dist/mobx.esm.js":
/*!********************************************!*\
  !*** ./node_modules/mobx/dist/mobx.esm.js ***!
  \********************************************/
/*! exports provided: $mobx, FlowCancellationError, ObservableMap, ObservableSet, Reaction, _allowStateChanges, _allowStateChangesInsideComputed, _allowStateReadsEnd, _allowStateReadsStart, _autoAction, _endAction, _getAdministration, _getGlobalState, _interceptReads, _isComputingDerivation, _resetGlobalState, _startAction, action, autorun, comparer, computed, configure, createAtom, defineProperty, entries, extendObservable, flow, flowResult, get, getAtom, getDebugName, getDependencyTree, getObserverTree, has, intercept, isAction, isBoxedObservable, isComputed, isComputedProp, isFlow, isFlowCancellationError, isObservable, isObservableArray, isObservableMap, isObservableObject, isObservableProp, isObservableSet, keys, makeAutoObservable, makeObservable, observable, observe, onBecomeObserved, onBecomeUnobserved, onReactionError, override, ownKeys, reaction, remove, runInAction, set, spy, toJS, trace, transaction, untracked, values, when */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "$mobx", function() { return $mobx; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlowCancellationError", function() { return FlowCancellationError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObservableMap", function() { return ObservableMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObservableSet", function() { return ObservableSet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Reaction", function() { return Reaction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_allowStateChanges", function() { return allowStateChanges; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_allowStateChangesInsideComputed", function() { return runInAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_allowStateReadsEnd", function() { return allowStateReadsEnd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_allowStateReadsStart", function() { return allowStateReadsStart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_autoAction", function() { return autoAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_endAction", function() { return _endAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_getAdministration", function() { return getAdministration; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_getGlobalState", function() { return getGlobalState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_interceptReads", function() { return interceptReads; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_isComputingDerivation", function() { return isComputingDerivation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_resetGlobalState", function() { return resetGlobalState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_startAction", function() { return _startAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "action", function() { return action; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "autorun", function() { return autorun; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "comparer", function() { return comparer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computed", function() { return computed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "configure", function() { return configure; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createAtom", function() { return createAtom; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defineProperty", function() { return apiDefineProperty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "entries", function() { return entries; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extendObservable", function() { return extendObservable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flow", function() { return flow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flowResult", function() { return flowResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "get", function() { return get; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getAtom", function() { return getAtom; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDebugName", function() { return getDebugName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDependencyTree", function() { return getDependencyTree; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getObserverTree", function() { return getObserverTree; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "has", function() { return has; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "intercept", function() { return intercept; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isAction", function() { return isAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isBoxedObservable", function() { return isObservableValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isComputed", function() { return isComputed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isComputedProp", function() { return isComputedProp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isFlow", function() { return isFlow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isFlowCancellationError", function() { return isFlowCancellationError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObservable", function() { return isObservable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObservableArray", function() { return isObservableArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObservableMap", function() { return isObservableMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObservableObject", function() { return isObservableObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObservableProp", function() { return isObservableProp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObservableSet", function() { return isObservableSet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keys", function() { return keys; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeAutoObservable", function() { return makeAutoObservable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeObservable", function() { return makeObservable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "observable", function() { return observable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "observe", function() { return observe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onBecomeObserved", function() { return onBecomeObserved; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onBecomeUnobserved", function() { return onBecomeUnobserved; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onReactionError", function() { return onReactionError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "override", function() { return override; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ownKeys", function() { return apiOwnKeys; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reaction", function() { return reaction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "remove", function() { return remove; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "runInAction", function() { return runInAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "set", function() { return set; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "spy", function() { return spy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toJS", function() { return toJS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "trace", function() { return trace; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transaction", function() { return transaction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "untracked", function() { return untracked; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "values", function() { return values; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "when", function() { return when; });
var niceErrors = {
  0: "Invalid value for configuration 'enforceActions', expected 'never', 'always' or 'observed'",
  1: function _(annotationType, key) {
    return "Cannot apply '" + annotationType + "' to '" + key.toString() + "': Field not found.";
  },
  /*
  2(prop) {
      return `invalid decorator for '${prop.toString()}'`
  },
  3(prop) {
      return `Cannot decorate '${prop.toString()}': action can only be used on properties with a function value.`
  },
  4(prop) {
      return `Cannot decorate '${prop.toString()}': computed can only be used on getter properties.`
  },
  */
  5: "'keys()' can only be used on observable objects, arrays, sets and maps",
  6: "'values()' can only be used on observable objects, arrays, sets and maps",
  7: "'entries()' can only be used on observable objects, arrays and maps",
  8: "'set()' can only be used on observable objects, arrays and maps",
  9: "'remove()' can only be used on observable objects, arrays and maps",
  10: "'has()' can only be used on observable objects, arrays and maps",
  11: "'get()' can only be used on observable objects, arrays and maps",
  12: "Invalid annotation",
  13: "Dynamic observable objects cannot be frozen. If you're passing observables to 3rd party component/function that calls Object.freeze, pass copy instead: toJS(observable)",
  14: "Intercept handlers should return nothing or a change object",
  15: "Observable arrays cannot be frozen. If you're passing observables to 3rd party component/function that calls Object.freeze, pass copy instead: toJS(observable)",
  16: "Modification exception: the internal structure of an observable array was changed.",
  17: function _(index, length) {
    return "[mobx.array] Index out of bounds, " + index + " is larger than " + length;
  },
  18: "mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js",
  19: function _(other) {
    return "Cannot initialize from classes that inherit from Map: " + other.constructor.name;
  },
  20: function _(other) {
    return "Cannot initialize map from " + other;
  },
  21: function _(dataStructure) {
    return "Cannot convert to map from '" + dataStructure + "'";
  },
  22: "mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js",
  23: "It is not possible to get index atoms from arrays",
  24: function _(thing) {
    return "Cannot obtain administration from " + thing;
  },
  25: function _(property, name) {
    return "the entry '" + property + "' does not exist in the observable map '" + name + "'";
  },
  26: "please specify a property",
  27: function _(property, name) {
    return "no observable property '" + property.toString() + "' found on the observable object '" + name + "'";
  },
  28: function _(thing) {
    return "Cannot obtain atom from " + thing;
  },
  29: "Expecting some object",
  30: "invalid action stack. did you forget to finish an action?",
  31: "missing option for computed: get",
  32: function _(name, derivation) {
    return "Cycle detected in computation " + name + ": " + derivation;
  },
  33: function _(name) {
    return "The setter of computed value '" + name + "' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?";
  },
  34: function _(name) {
    return "[ComputedValue '" + name + "'] It is not possible to assign a new value to a computed value.";
  },
  35: "There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`",
  36: "isolateGlobalState should be called before MobX is running any reactions",
  37: function _(method) {
    return "[mobx] `observableArray." + method + "()` mutates the array in-place, which is not allowed inside a derivation. Use `array.slice()." + method + "()` instead";
  },
  38: "'ownKeys()' can only be used on observable objects",
  39: "'defineProperty()' can only be used on observable objects"
};
var errors =  true ? niceErrors : undefined;
function die(error) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  if (true) {
    var e = typeof error === "string" ? error : errors[error];
    if (typeof e === "function") e = e.apply(null, args);
    throw new Error("[MobX] " + e);
  }
  throw new Error(typeof error === "number" ? "[MobX] minified error nr: " + error + (args.length ? " " + args.map(String).join(",") : "") + ". Find the full error at: https://github.com/mobxjs/mobx/blob/main/packages/mobx/src/errors.ts" : "[MobX] " + error);
}

var mockGlobal = {};
function getGlobal() {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  return mockGlobal;
}

// We shorten anything used > 5 times
var assign = Object.assign;
var getDescriptor = Object.getOwnPropertyDescriptor;
var defineProperty = Object.defineProperty;
var objectPrototype = Object.prototype;
var EMPTY_ARRAY = [];
Object.freeze(EMPTY_ARRAY);
var EMPTY_OBJECT = {};
Object.freeze(EMPTY_OBJECT);
var hasProxy = typeof Proxy !== "undefined";
var plainObjectString = /*#__PURE__*/Object.toString();
function assertProxies() {
  if (!hasProxy) {
    die( true ? "`Proxy` objects are not available in the current environment. Please configure MobX to enable a fallback implementation.`" : undefined);
  }
}
function warnAboutProxyRequirement(msg) {
  if ( true && globalState.verifyProxies) {
    die("MobX is currently configured to be able to run in ES5 mode, but in ES5 MobX won't be able to " + msg);
  }
}
function getNextId() {
  return ++globalState.mobxGuid;
}
/**
 * Makes sure that the provided function is invoked at most once.
 */
function once(func) {
  var invoked = false;
  return function () {
    if (invoked) {
      return;
    }
    invoked = true;
    return func.apply(this, arguments);
  };
}
var noop = function noop() {};
function isFunction(fn) {
  return typeof fn === "function";
}
function isStringish(value) {
  var t = typeof value;
  switch (t) {
    case "string":
    case "symbol":
    case "number":
      return true;
  }
  return false;
}
function isObject(value) {
  return value !== null && typeof value === "object";
}
function isPlainObject(value) {
  if (!isObject(value)) {
    return false;
  }
  var proto = Object.getPrototypeOf(value);
  if (proto == null) {
    return true;
  }
  var protoConstructor = Object.hasOwnProperty.call(proto, "constructor") && proto.constructor;
  return typeof protoConstructor === "function" && protoConstructor.toString() === plainObjectString;
}
// https://stackoverflow.com/a/37865170
function isGenerator(obj) {
  var constructor = obj == null ? void 0 : obj.constructor;
  if (!constructor) {
    return false;
  }
  if ("GeneratorFunction" === constructor.name || "GeneratorFunction" === constructor.displayName) {
    return true;
  }
  return false;
}
function addHiddenProp(object, propName, value) {
  defineProperty(object, propName, {
    enumerable: false,
    writable: true,
    configurable: true,
    value: value
  });
}
function addHiddenFinalProp(object, propName, value) {
  defineProperty(object, propName, {
    enumerable: false,
    writable: false,
    configurable: true,
    value: value
  });
}
function createInstanceofPredicate(name, theClass) {
  var propName = "isMobX" + name;
  theClass.prototype[propName] = true;
  return function (x) {
    return isObject(x) && x[propName] === true;
  };
}
function isES6Map(thing) {
  return thing instanceof Map;
}
function isES6Set(thing) {
  return thing instanceof Set;
}
var hasGetOwnPropertySymbols = typeof Object.getOwnPropertySymbols !== "undefined";
/**
 * Returns the following: own enumerable keys and symbols.
 */
function getPlainObjectKeys(object) {
  var keys = Object.keys(object);
  // Not supported in IE, so there are not going to be symbol props anyway...
  if (!hasGetOwnPropertySymbols) {
    return keys;
  }
  var symbols = Object.getOwnPropertySymbols(object);
  if (!symbols.length) {
    return keys;
  }
  return [].concat(keys, symbols.filter(function (s) {
    return objectPrototype.propertyIsEnumerable.call(object, s);
  }));
}
// From Immer utils
// Returns all own keys, including non-enumerable and symbolic
var ownKeys = typeof Reflect !== "undefined" && Reflect.ownKeys ? Reflect.ownKeys : hasGetOwnPropertySymbols ? function (obj) {
  return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));
} : /* istanbul ignore next */Object.getOwnPropertyNames;
function stringifyKey(key) {
  if (typeof key === "string") {
    return key;
  }
  if (typeof key === "symbol") {
    return key.toString();
  }
  return new String(key).toString();
}
function toPrimitive(value) {
  return value === null ? null : typeof value === "object" ? "" + value : value;
}
function hasProp(target, prop) {
  return objectPrototype.hasOwnProperty.call(target, prop);
}
// From Immer utils
var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(target) {
  // Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274
  var res = {};
  // Note: without polyfill for ownKeys, symbols won't be picked up
  ownKeys(target).forEach(function (key) {
    res[key] = getDescriptor(target, key);
  });
  return res;
};

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it) return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it) o = it;
    var i = 0;
    return function () {
      if (i >= o.length) return {
        done: true
      };
      return {
        done: false,
        value: o[i++]
      };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}

var storedAnnotationsSymbol = /*#__PURE__*/Symbol("mobx-stored-annotations");
/**
 * Creates a function that acts as
 * - decorator
 * - annotation object
 */
function createDecoratorAnnotation(annotation) {
  function decorator(target, property) {
    storeAnnotation(target, property, annotation);
  }
  return Object.assign(decorator, annotation);
}
/**
 * Stores annotation to prototype,
 * so it can be inspected later by `makeObservable` called from constructor
 */
function storeAnnotation(prototype, key, annotation) {
  if (!hasProp(prototype, storedAnnotationsSymbol)) {
    addHiddenProp(prototype, storedAnnotationsSymbol, _extends({}, prototype[storedAnnotationsSymbol]));
  }
  // @override must override something
  if ( true && isOverride(annotation) && !hasProp(prototype[storedAnnotationsSymbol], key)) {
    var fieldName = prototype.constructor.name + ".prototype." + key.toString();
    die("'" + fieldName + "' is decorated with 'override', " + "but no such decorated member was found on prototype.");
  }
  // Cannot re-decorate
  assertNotDecorated(prototype, annotation, key);
  // Ignore override
  if (!isOverride(annotation)) {
    prototype[storedAnnotationsSymbol][key] = annotation;
  }
}
function assertNotDecorated(prototype, annotation, key) {
  if ( true && !isOverride(annotation) && hasProp(prototype[storedAnnotationsSymbol], key)) {
    var fieldName = prototype.constructor.name + ".prototype." + key.toString();
    var currentAnnotationType = prototype[storedAnnotationsSymbol][key].annotationType_;
    var requestedAnnotationType = annotation.annotationType_;
    die("Cannot apply '@" + requestedAnnotationType + "' to '" + fieldName + "':" + ("\nThe field is already decorated with '@" + currentAnnotationType + "'.") + "\nRe-decorating fields is not allowed." + "\nUse '@override' decorator for methods overridden by subclass.");
  }
}
/**
 * Collects annotations from prototypes and stores them on target (instance)
 */
function collectStoredAnnotations(target) {
  if (!hasProp(target, storedAnnotationsSymbol)) {
    if ( true && !target[storedAnnotationsSymbol]) {
      die("No annotations were passed to makeObservable, but no decorated members have been found either");
    }
    // We need a copy as we will remove annotation from the list once it's applied.
    addHiddenProp(target, storedAnnotationsSymbol, _extends({}, target[storedAnnotationsSymbol]));
  }
  return target[storedAnnotationsSymbol];
}

var $mobx = /*#__PURE__*/Symbol("mobx administration");
var Atom = /*#__PURE__*/function () {
  // for effective unobserving. BaseAtom has true, for extra optimization, so its onBecomeUnobserved never gets called, because it's not needed

  /**
   * Create a new atom. For debugging purposes it is recommended to give it a name.
   * The onBecomeObserved and onBecomeUnobserved callbacks can be used for resource management.
   */
  function Atom(name_) {
    if (name_ === void 0) {
      name_ =  true ? "Atom@" + getNextId() : undefined;
    }
    this.name_ = void 0;
    this.isPendingUnobservation_ = false;
    this.isBeingObserved_ = false;
    this.observers_ = new Set();
    this.diffValue_ = 0;
    this.lastAccessedBy_ = 0;
    this.lowestObserverState_ = IDerivationState_.NOT_TRACKING_;
    this.onBOL = void 0;
    this.onBUOL = void 0;
    this.name_ = name_;
  }
  // onBecomeObservedListeners
  var _proto = Atom.prototype;
  _proto.onBO = function onBO() {
    if (this.onBOL) {
      this.onBOL.forEach(function (listener) {
        return listener();
      });
    }
  };
  _proto.onBUO = function onBUO() {
    if (this.onBUOL) {
      this.onBUOL.forEach(function (listener) {
        return listener();
      });
    }
  }
  /**
   * Invoke this method to notify mobx that your atom has been used somehow.
   * Returns true if there is currently a reactive context.
   */;
  _proto.reportObserved = function reportObserved$1() {
    return reportObserved(this);
  }
  /**
   * Invoke this method _after_ this method has changed to signal mobx that all its observers should invalidate.
   */;
  _proto.reportChanged = function reportChanged() {
    startBatch();
    propagateChanged(this);
    // We could update state version only at the end of batch,
    // but we would still have to switch some global flag here to signal a change.
    globalState.stateVersion = globalState.stateVersion < Number.MAX_SAFE_INTEGER ? globalState.stateVersion + 1 : Number.MIN_SAFE_INTEGER;
    endBatch();
  };
  _proto.toString = function toString() {
    return this.name_;
  };
  return Atom;
}();
var isAtom = /*#__PURE__*/createInstanceofPredicate("Atom", Atom);
function createAtom(name, onBecomeObservedHandler, onBecomeUnobservedHandler) {
  if (onBecomeObservedHandler === void 0) {
    onBecomeObservedHandler = noop;
  }
  if (onBecomeUnobservedHandler === void 0) {
    onBecomeUnobservedHandler = noop;
  }
  var atom = new Atom(name);
  // default `noop` listener will not initialize the hook Set
  if (onBecomeObservedHandler !== noop) {
    onBecomeObserved(atom, onBecomeObservedHandler);
  }
  if (onBecomeUnobservedHandler !== noop) {
    onBecomeUnobserved(atom, onBecomeUnobservedHandler);
  }
  return atom;
}

function identityComparer(a, b) {
  return a === b;
}
function structuralComparer(a, b) {
  return deepEqual(a, b);
}
function shallowComparer(a, b) {
  return deepEqual(a, b, 1);
}
function defaultComparer(a, b) {
  if (Object.is) {
    return Object.is(a, b);
  }
  return a === b ? a !== 0 || 1 / a === 1 / b : a !== a && b !== b;
}
var comparer = {
  identity: identityComparer,
  structural: structuralComparer,
  "default": defaultComparer,
  shallow: shallowComparer
};

function deepEnhancer(v, _, name) {
  // it is an observable already, done
  if (isObservable(v)) {
    return v;
  }
  // something that can be converted and mutated?
  if (Array.isArray(v)) {
    return observable.array(v, {
      name: name
    });
  }
  if (isPlainObject(v)) {
    return observable.object(v, undefined, {
      name: name
    });
  }
  if (isES6Map(v)) {
    return observable.map(v, {
      name: name
    });
  }
  if (isES6Set(v)) {
    return observable.set(v, {
      name: name
    });
  }
  if (typeof v === "function" && !isAction(v) && !isFlow(v)) {
    if (isGenerator(v)) {
      return flow(v);
    } else {
      return autoAction(name, v);
    }
  }
  return v;
}
function shallowEnhancer(v, _, name) {
  if (v === undefined || v === null) {
    return v;
  }
  if (isObservableObject(v) || isObservableArray(v) || isObservableMap(v) || isObservableSet(v)) {
    return v;
  }
  if (Array.isArray(v)) {
    return observable.array(v, {
      name: name,
      deep: false
    });
  }
  if (isPlainObject(v)) {
    return observable.object(v, undefined, {
      name: name,
      deep: false
    });
  }
  if (isES6Map(v)) {
    return observable.map(v, {
      name: name,
      deep: false
    });
  }
  if (isES6Set(v)) {
    return observable.set(v, {
      name: name,
      deep: false
    });
  }
  if (true) {
    die("The shallow modifier / decorator can only used in combination with arrays, objects, maps and sets");
  }
}
function referenceEnhancer(newValue) {
  // never turn into an observable
  return newValue;
}
function refStructEnhancer(v, oldValue) {
  if ( true && isObservable(v)) {
    die("observable.struct should not be used with observable values");
  }
  if (deepEqual(v, oldValue)) {
    return oldValue;
  }
  return v;
}

var OVERRIDE = "override";
var override = /*#__PURE__*/createDecoratorAnnotation({
  annotationType_: OVERRIDE,
  make_: make_,
  extend_: extend_
});
function isOverride(annotation) {
  return annotation.annotationType_ === OVERRIDE;
}
function make_(adm, key) {
  // Must not be plain object
  if ( true && adm.isPlainObject_) {
    die("Cannot apply '" + this.annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + this.annotationType_ + "' cannot be used on plain objects."));
  }
  // Must override something
  if ( true && !hasProp(adm.appliedAnnotations_, key)) {
    die("'" + adm.name_ + "." + key.toString() + "' is annotated with '" + this.annotationType_ + "', " + "but no such annotated member was found on prototype.");
  }
  return 0 /* Cancel */;
}

function extend_(adm, key, descriptor, proxyTrap) {
  die("'" + this.annotationType_ + "' can only be used with 'makeObservable'");
}

function createActionAnnotation(name, options) {
  return {
    annotationType_: name,
    options_: options,
    make_: make_$1,
    extend_: extend_$1
  };
}
function make_$1(adm, key, descriptor, source) {
  var _this$options_;
  // bound
  if ((_this$options_ = this.options_) != null && _this$options_.bound) {
    return this.extend_(adm, key, descriptor, false) === null ? 0 /* Cancel */ : 1 /* Break */;
  }
  // own
  if (source === adm.target_) {
    return this.extend_(adm, key, descriptor, false) === null ? 0 /* Cancel */ : 2 /* Continue */;
  }
  // prototype
  if (isAction(descriptor.value)) {
    // A prototype could have been annotated already by other constructor,
    // rest of the proto chain must be annotated already
    return 1 /* Break */;
  }

  var actionDescriptor = createActionDescriptor(adm, this, key, descriptor, false);
  defineProperty(source, key, actionDescriptor);
  return 2 /* Continue */;
}

function extend_$1(adm, key, descriptor, proxyTrap) {
  var actionDescriptor = createActionDescriptor(adm, this, key, descriptor);
  return adm.defineProperty_(key, actionDescriptor, proxyTrap);
}
function assertActionDescriptor(adm, _ref, key, _ref2) {
  var annotationType_ = _ref.annotationType_;
  var value = _ref2.value;
  if ( true && !isFunction(value)) {
    die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' can only be used on properties with a function value."));
  }
}
function createActionDescriptor(adm, annotation, key, descriptor,
// provides ability to disable safeDescriptors for prototypes
safeDescriptors) {
  var _annotation$options_, _annotation$options_$, _annotation$options_2, _annotation$options_$2, _annotation$options_3, _annotation$options_4, _adm$proxy_2;
  if (safeDescriptors === void 0) {
    safeDescriptors = globalState.safeDescriptors;
  }
  assertActionDescriptor(adm, annotation, key, descriptor);
  var value = descriptor.value;
  if ((_annotation$options_ = annotation.options_) != null && _annotation$options_.bound) {
    var _adm$proxy_;
    value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);
  }
  return {
    value: createAction((_annotation$options_$ = (_annotation$options_2 = annotation.options_) == null ? void 0 : _annotation$options_2.name) != null ? _annotation$options_$ : key.toString(), value, (_annotation$options_$2 = (_annotation$options_3 = annotation.options_) == null ? void 0 : _annotation$options_3.autoAction) != null ? _annotation$options_$2 : false,
    // https://github.com/mobxjs/mobx/discussions/3140
    (_annotation$options_4 = annotation.options_) != null && _annotation$options_4.bound ? (_adm$proxy_2 = adm.proxy_) != null ? _adm$proxy_2 : adm.target_ : undefined),
    // Non-configurable for classes
    // prevents accidental field redefinition in subclass
    configurable: safeDescriptors ? adm.isPlainObject_ : true,
    // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058
    enumerable: false,
    // Non-obsevable, therefore non-writable
    // Also prevents rewriting in subclass constructor
    writable: safeDescriptors ? false : true
  };
}

function createFlowAnnotation(name, options) {
  return {
    annotationType_: name,
    options_: options,
    make_: make_$2,
    extend_: extend_$2
  };
}
function make_$2(adm, key, descriptor, source) {
  var _this$options_;
  // own
  if (source === adm.target_) {
    return this.extend_(adm, key, descriptor, false) === null ? 0 /* Cancel */ : 2 /* Continue */;
  }
  // prototype
  // bound - must annotate protos to support super.flow()
  if ((_this$options_ = this.options_) != null && _this$options_.bound && (!hasProp(adm.target_, key) || !isFlow(adm.target_[key]))) {
    if (this.extend_(adm, key, descriptor, false) === null) {
      return 0 /* Cancel */;
    }
  }

  if (isFlow(descriptor.value)) {
    // A prototype could have been annotated already by other constructor,
    // rest of the proto chain must be annotated already
    return 1 /* Break */;
  }

  var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, false, false);
  defineProperty(source, key, flowDescriptor);
  return 2 /* Continue */;
}

function extend_$2(adm, key, descriptor, proxyTrap) {
  var _this$options_2;
  var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, (_this$options_2 = this.options_) == null ? void 0 : _this$options_2.bound);
  return adm.defineProperty_(key, flowDescriptor, proxyTrap);
}
function assertFlowDescriptor(adm, _ref, key, _ref2) {
  var annotationType_ = _ref.annotationType_;
  var value = _ref2.value;
  if ( true && !isFunction(value)) {
    die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' can only be used on properties with a generator function value."));
  }
}
function createFlowDescriptor(adm, annotation, key, descriptor, bound,
// provides ability to disable safeDescriptors for prototypes
safeDescriptors) {
  if (safeDescriptors === void 0) {
    safeDescriptors = globalState.safeDescriptors;
  }
  assertFlowDescriptor(adm, annotation, key, descriptor);
  var value = descriptor.value;
  // In case of flow.bound, the descriptor can be from already annotated prototype
  if (!isFlow(value)) {
    value = flow(value);
  }
  if (bound) {
    var _adm$proxy_;
    // We do not keep original function around, so we bind the existing flow
    value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);
    // This is normally set by `flow`, but `bind` returns new function...
    value.isMobXFlow = true;
  }
  return {
    value: value,
    // Non-configurable for classes
    // prevents accidental field redefinition in subclass
    configurable: safeDescriptors ? adm.isPlainObject_ : true,
    // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058
    enumerable: false,
    // Non-obsevable, therefore non-writable
    // Also prevents rewriting in subclass constructor
    writable: safeDescriptors ? false : true
  };
}

function createComputedAnnotation(name, options) {
  return {
    annotationType_: name,
    options_: options,
    make_: make_$3,
    extend_: extend_$3
  };
}
function make_$3(adm, key, descriptor) {
  return this.extend_(adm, key, descriptor, false) === null ? 0 /* Cancel */ : 1 /* Break */;
}

function extend_$3(adm, key, descriptor, proxyTrap) {
  assertComputedDescriptor(adm, this, key, descriptor);
  return adm.defineComputedProperty_(key, _extends({}, this.options_, {
    get: descriptor.get,
    set: descriptor.set
  }), proxyTrap);
}
function assertComputedDescriptor(adm, _ref, key, _ref2) {
  var annotationType_ = _ref.annotationType_;
  var get = _ref2.get;
  if ( true && !get) {
    die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' can only be used on getter(+setter) properties."));
  }
}

function createObservableAnnotation(name, options) {
  return {
    annotationType_: name,
    options_: options,
    make_: make_$4,
    extend_: extend_$4
  };
}
function make_$4(adm, key, descriptor) {
  return this.extend_(adm, key, descriptor, false) === null ? 0 /* Cancel */ : 1 /* Break */;
}

function extend_$4(adm, key, descriptor, proxyTrap) {
  var _this$options_$enhanc, _this$options_;
  assertObservableDescriptor(adm, this, key, descriptor);
  return adm.defineObservableProperty_(key, descriptor.value, (_this$options_$enhanc = (_this$options_ = this.options_) == null ? void 0 : _this$options_.enhancer) != null ? _this$options_$enhanc : deepEnhancer, proxyTrap);
}
function assertObservableDescriptor(adm, _ref, key, descriptor) {
  var annotationType_ = _ref.annotationType_;
  if ( true && !("value" in descriptor)) {
    die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' cannot be used on getter/setter properties"));
  }
}

var AUTO = "true";
var autoAnnotation = /*#__PURE__*/createAutoAnnotation();
function createAutoAnnotation(options) {
  return {
    annotationType_: AUTO,
    options_: options,
    make_: make_$5,
    extend_: extend_$5
  };
}
function make_$5(adm, key, descriptor, source) {
  var _this$options_3, _this$options_4;
  // getter -> computed
  if (descriptor.get) {
    return computed.make_(adm, key, descriptor, source);
  }
  // lone setter -> action setter
  if (descriptor.set) {
    // TODO make action applicable to setter and delegate to action.make_
    var set = createAction(key.toString(), descriptor.set);
    // own
    if (source === adm.target_) {
      return adm.defineProperty_(key, {
        configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,
        set: set
      }) === null ? 0 /* Cancel */ : 2 /* Continue */;
    }
    // proto
    defineProperty(source, key, {
      configurable: true,
      set: set
    });
    return 2 /* Continue */;
  }
  // function on proto -> autoAction/flow
  if (source !== adm.target_ && typeof descriptor.value === "function") {
    var _this$options_2;
    if (isGenerator(descriptor.value)) {
      var _this$options_;
      var flowAnnotation = (_this$options_ = this.options_) != null && _this$options_.autoBind ? flow.bound : flow;
      return flowAnnotation.make_(adm, key, descriptor, source);
    }
    var actionAnnotation = (_this$options_2 = this.options_) != null && _this$options_2.autoBind ? autoAction.bound : autoAction;
    return actionAnnotation.make_(adm, key, descriptor, source);
  }
  // other -> observable
  // Copy props from proto as well, see test:
  // "decorate should work with Object.create"
  var observableAnnotation = ((_this$options_3 = this.options_) == null ? void 0 : _this$options_3.deep) === false ? observable.ref : observable;
  // if function respect autoBind option
  if (typeof descriptor.value === "function" && (_this$options_4 = this.options_) != null && _this$options_4.autoBind) {
    var _adm$proxy_;
    descriptor.value = descriptor.value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);
  }
  return observableAnnotation.make_(adm, key, descriptor, source);
}
function extend_$5(adm, key, descriptor, proxyTrap) {
  var _this$options_5, _this$options_6;
  // getter -> computed
  if (descriptor.get) {
    return computed.extend_(adm, key, descriptor, proxyTrap);
  }
  // lone setter -> action setter
  if (descriptor.set) {
    // TODO make action applicable to setter and delegate to action.extend_
    return adm.defineProperty_(key, {
      configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,
      set: createAction(key.toString(), descriptor.set)
    }, proxyTrap);
  }
  // other -> observable
  // if function respect autoBind option
  if (typeof descriptor.value === "function" && (_this$options_5 = this.options_) != null && _this$options_5.autoBind) {
    var _adm$proxy_2;
    descriptor.value = descriptor.value.bind((_adm$proxy_2 = adm.proxy_) != null ? _adm$proxy_2 : adm.target_);
  }
  var observableAnnotation = ((_this$options_6 = this.options_) == null ? void 0 : _this$options_6.deep) === false ? observable.ref : observable;
  return observableAnnotation.extend_(adm, key, descriptor, proxyTrap);
}

var OBSERVABLE = "observable";
var OBSERVABLE_REF = "observable.ref";
var OBSERVABLE_SHALLOW = "observable.shallow";
var OBSERVABLE_STRUCT = "observable.struct";
// Predefined bags of create observable options, to avoid allocating temporarily option objects
// in the majority of cases
var defaultCreateObservableOptions = {
  deep: true,
  name: undefined,
  defaultDecorator: undefined,
  proxy: true
};
Object.freeze(defaultCreateObservableOptions);
function asCreateObservableOptions(thing) {
  return thing || defaultCreateObservableOptions;
}
var observableAnnotation = /*#__PURE__*/createObservableAnnotation(OBSERVABLE);
var observableRefAnnotation = /*#__PURE__*/createObservableAnnotation(OBSERVABLE_REF, {
  enhancer: referenceEnhancer
});
var observableShallowAnnotation = /*#__PURE__*/createObservableAnnotation(OBSERVABLE_SHALLOW, {
  enhancer: shallowEnhancer
});
var observableStructAnnotation = /*#__PURE__*/createObservableAnnotation(OBSERVABLE_STRUCT, {
  enhancer: refStructEnhancer
});
var observableDecoratorAnnotation = /*#__PURE__*/createDecoratorAnnotation(observableAnnotation);
function getEnhancerFromOptions(options) {
  return options.deep === true ? deepEnhancer : options.deep === false ? referenceEnhancer : getEnhancerFromAnnotation(options.defaultDecorator);
}
function getAnnotationFromOptions(options) {
  var _options$defaultDecor;
  return options ? (_options$defaultDecor = options.defaultDecorator) != null ? _options$defaultDecor : createAutoAnnotation(options) : undefined;
}
function getEnhancerFromAnnotation(annotation) {
  var _annotation$options_$, _annotation$options_;
  return !annotation ? deepEnhancer : (_annotation$options_$ = (_annotation$options_ = annotation.options_) == null ? void 0 : _annotation$options_.enhancer) != null ? _annotation$options_$ : deepEnhancer;
}
/**
 * Turns an object, array or function into a reactive structure.
 * @param v the value which should become observable.
 */
function createObservable(v, arg2, arg3) {
  // @observable someProp;
  if (isStringish(arg2)) {
    storeAnnotation(v, arg2, observableAnnotation);
    return;
  }
  // already observable - ignore
  if (isObservable(v)) {
    return v;
  }
  // plain object
  if (isPlainObject(v)) {
    return observable.object(v, arg2, arg3);
  }
  // Array
  if (Array.isArray(v)) {
    return observable.array(v, arg2);
  }
  // Map
  if (isES6Map(v)) {
    return observable.map(v, arg2);
  }
  // Set
  if (isES6Set(v)) {
    return observable.set(v, arg2);
  }
  // other object - ignore
  if (typeof v === "object" && v !== null) {
    return v;
  }
  // anything else
  return observable.box(v, arg2);
}
assign(createObservable, observableDecoratorAnnotation);
var observableFactories = {
  box: function box(value, options) {
    var o = asCreateObservableOptions(options);
    return new ObservableValue(value, getEnhancerFromOptions(o), o.name, true, o.equals);
  },
  array: function array(initialValues, options) {
    var o = asCreateObservableOptions(options);
    return (globalState.useProxies === false || o.proxy === false ? createLegacyArray : createObservableArray)(initialValues, getEnhancerFromOptions(o), o.name);
  },
  map: function map(initialValues, options) {
    var o = asCreateObservableOptions(options);
    return new ObservableMap(initialValues, getEnhancerFromOptions(o), o.name);
  },
  set: function set(initialValues, options) {
    var o = asCreateObservableOptions(options);
    return new ObservableSet(initialValues, getEnhancerFromOptions(o), o.name);
  },
  object: function object(props, decorators, options) {
    return extendObservable(globalState.useProxies === false || (options == null ? void 0 : options.proxy) === false ? asObservableObject({}, options) : asDynamicObservableObject({}, options), props, decorators);
  },
  ref: /*#__PURE__*/createDecoratorAnnotation(observableRefAnnotation),
  shallow: /*#__PURE__*/createDecoratorAnnotation(observableShallowAnnotation),
  deep: observableDecoratorAnnotation,
  struct: /*#__PURE__*/createDecoratorAnnotation(observableStructAnnotation)
};
// eslint-disable-next-line
var observable = /*#__PURE__*/assign(createObservable, observableFactories);

var COMPUTED = "computed";
var COMPUTED_STRUCT = "computed.struct";
var computedAnnotation = /*#__PURE__*/createComputedAnnotation(COMPUTED);
var computedStructAnnotation = /*#__PURE__*/createComputedAnnotation(COMPUTED_STRUCT, {
  equals: comparer.structural
});
/**
 * Decorator for class properties: @computed get value() { return expr; }.
 * For legacy purposes also invokable as ES5 observable created: `computed(() => expr)`;
 */
var computed = function computed(arg1, arg2) {
  if (isStringish(arg2)) {
    // @computed
    return storeAnnotation(arg1, arg2, computedAnnotation);
  }
  if (isPlainObject(arg1)) {
    // @computed({ options })
    return createDecoratorAnnotation(createComputedAnnotation(COMPUTED, arg1));
  }
  // computed(expr, options?)
  if (true) {
    if (!isFunction(arg1)) {
      die("First argument to `computed` should be an expression.");
    }
    if (isFunction(arg2)) {
      die("A setter as second argument is no longer supported, use `{ set: fn }` option instead");
    }
  }
  var opts = isPlainObject(arg2) ? arg2 : {};
  opts.get = arg1;
  opts.name || (opts.name = arg1.name || ""); /* for generated name */
  return new ComputedValue(opts);
};
Object.assign(computed, computedAnnotation);
computed.struct = /*#__PURE__*/createDecoratorAnnotation(computedStructAnnotation);

var _getDescriptor$config, _getDescriptor;
// we don't use globalState for these in order to avoid possible issues with multiple
// mobx versions
var currentActionId = 0;
var nextActionId = 1;
var isFunctionNameConfigurable = (_getDescriptor$config = (_getDescriptor = /*#__PURE__*/getDescriptor(function () {}, "name")) == null ? void 0 : _getDescriptor.configurable) != null ? _getDescriptor$config : false;
// we can safely recycle this object
var tmpNameDescriptor = {
  value: "action",
  configurable: true,
  writable: false,
  enumerable: false
};
function createAction(actionName, fn, autoAction, ref) {
  if (autoAction === void 0) {
    autoAction = false;
  }
  if (true) {
    if (!isFunction(fn)) {
      die("`action` can only be invoked on functions");
    }
    if (typeof actionName !== "string" || !actionName) {
      die("actions should have valid names, got: '" + actionName + "'");
    }
  }
  function res() {
    return executeAction(actionName, autoAction, fn, ref || this, arguments);
  }
  res.isMobxAction = true;
  if (isFunctionNameConfigurable) {
    tmpNameDescriptor.value = actionName;
    defineProperty(res, "name", tmpNameDescriptor);
  }
  return res;
}
function executeAction(actionName, canRunAsDerivation, fn, scope, args) {
  var runInfo = _startAction(actionName, canRunAsDerivation, scope, args);
  try {
    return fn.apply(scope, args);
  } catch (err) {
    runInfo.error_ = err;
    throw err;
  } finally {
    _endAction(runInfo);
  }
}
function _startAction(actionName, canRunAsDerivation,
// true for autoAction
scope, args) {
  var notifySpy_ =  true && isSpyEnabled() && !!actionName;
  var startTime_ = 0;
  if ( true && notifySpy_) {
    startTime_ = Date.now();
    var flattenedArgs = args ? Array.from(args) : EMPTY_ARRAY;
    spyReportStart({
      type: ACTION,
      name: actionName,
      object: scope,
      arguments: flattenedArgs
    });
  }
  var prevDerivation_ = globalState.trackingDerivation;
  var runAsAction = !canRunAsDerivation || !prevDerivation_;
  startBatch();
  var prevAllowStateChanges_ = globalState.allowStateChanges; // by default preserve previous allow
  if (runAsAction) {
    untrackedStart();
    prevAllowStateChanges_ = allowStateChangesStart(true);
  }
  var prevAllowStateReads_ = allowStateReadsStart(true);
  var runInfo = {
    runAsAction_: runAsAction,
    prevDerivation_: prevDerivation_,
    prevAllowStateChanges_: prevAllowStateChanges_,
    prevAllowStateReads_: prevAllowStateReads_,
    notifySpy_: notifySpy_,
    startTime_: startTime_,
    actionId_: nextActionId++,
    parentActionId_: currentActionId
  };
  currentActionId = runInfo.actionId_;
  return runInfo;
}
function _endAction(runInfo) {
  if (currentActionId !== runInfo.actionId_) {
    die(30);
  }
  currentActionId = runInfo.parentActionId_;
  if (runInfo.error_ !== undefined) {
    globalState.suppressReactionErrors = true;
  }
  allowStateChangesEnd(runInfo.prevAllowStateChanges_);
  allowStateReadsEnd(runInfo.prevAllowStateReads_);
  endBatch();
  if (runInfo.runAsAction_) {
    untrackedEnd(runInfo.prevDerivation_);
  }
  if ( true && runInfo.notifySpy_) {
    spyReportEnd({
      time: Date.now() - runInfo.startTime_
    });
  }
  globalState.suppressReactionErrors = false;
}
function allowStateChanges(allowStateChanges, func) {
  var prev = allowStateChangesStart(allowStateChanges);
  try {
    return func();
  } finally {
    allowStateChangesEnd(prev);
  }
}
function allowStateChangesStart(allowStateChanges) {
  var prev = globalState.allowStateChanges;
  globalState.allowStateChanges = allowStateChanges;
  return prev;
}
function allowStateChangesEnd(prev) {
  globalState.allowStateChanges = prev;
}

var _Symbol$toPrimitive;
var CREATE = "create";
_Symbol$toPrimitive = Symbol.toPrimitive;
var ObservableValue = /*#__PURE__*/function (_Atom) {
  _inheritsLoose(ObservableValue, _Atom);
  function ObservableValue(value, enhancer, name_, notifySpy, equals) {
    var _this;
    if (name_ === void 0) {
      name_ =  true ? "ObservableValue@" + getNextId() : undefined;
    }
    if (notifySpy === void 0) {
      notifySpy = true;
    }
    if (equals === void 0) {
      equals = comparer["default"];
    }
    _this = _Atom.call(this, name_) || this;
    _this.enhancer = void 0;
    _this.name_ = void 0;
    _this.equals = void 0;
    _this.hasUnreportedChange_ = false;
    _this.interceptors_ = void 0;
    _this.changeListeners_ = void 0;
    _this.value_ = void 0;
    _this.dehancer = void 0;
    _this.enhancer = enhancer;
    _this.name_ = name_;
    _this.equals = equals;
    _this.value_ = enhancer(value, undefined, name_);
    if ( true && notifySpy && isSpyEnabled()) {
      // only notify spy if this is a stand-alone observable
      spyReport({
        type: CREATE,
        object: _assertThisInitialized(_this),
        observableKind: "value",
        debugObjectName: _this.name_,
        newValue: "" + _this.value_
      });
    }
    return _this;
  }
  var _proto = ObservableValue.prototype;
  _proto.dehanceValue = function dehanceValue(value) {
    if (this.dehancer !== undefined) {
      return this.dehancer(value);
    }
    return value;
  };
  _proto.set = function set(newValue) {
    var oldValue = this.value_;
    newValue = this.prepareNewValue_(newValue);
    if (newValue !== globalState.UNCHANGED) {
      var notifySpy = isSpyEnabled();
      if ( true && notifySpy) {
        spyReportStart({
          type: UPDATE,
          object: this,
          observableKind: "value",
          debugObjectName: this.name_,
          newValue: newValue,
          oldValue: oldValue
        });
      }
      this.setNewValue_(newValue);
      if ( true && notifySpy) {
        spyReportEnd();
      }
    }
  };
  _proto.prepareNewValue_ = function prepareNewValue_(newValue) {
    checkIfStateModificationsAreAllowed(this);
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        object: this,
        type: UPDATE,
        newValue: newValue
      });
      if (!change) {
        return globalState.UNCHANGED;
      }
      newValue = change.newValue;
    }
    // apply modifier
    newValue = this.enhancer(newValue, this.value_, this.name_);
    return this.equals(this.value_, newValue) ? globalState.UNCHANGED : newValue;
  };
  _proto.setNewValue_ = function setNewValue_(newValue) {
    var oldValue = this.value_;
    this.value_ = newValue;
    this.reportChanged();
    if (hasListeners(this)) {
      notifyListeners(this, {
        type: UPDATE,
        object: this,
        newValue: newValue,
        oldValue: oldValue
      });
    }
  };
  _proto.get = function get() {
    this.reportObserved();
    return this.dehanceValue(this.value_);
  };
  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };
  _proto.observe_ = function observe_(listener, fireImmediately) {
    if (fireImmediately) {
      listener({
        observableKind: "value",
        debugObjectName: this.name_,
        object: this,
        type: UPDATE,
        newValue: this.value_,
        oldValue: undefined
      });
    }
    return registerListener(this, listener);
  };
  _proto.raw = function raw() {
    // used by MST ot get undehanced value
    return this.value_;
  };
  _proto.toJSON = function toJSON() {
    return this.get();
  };
  _proto.toString = function toString() {
    return this.name_ + "[" + this.value_ + "]";
  };
  _proto.valueOf = function valueOf() {
    return toPrimitive(this.get());
  };
  _proto[_Symbol$toPrimitive] = function () {
    return this.valueOf();
  };
  return ObservableValue;
}(Atom);
var isObservableValue = /*#__PURE__*/createInstanceofPredicate("ObservableValue", ObservableValue);

var _Symbol$toPrimitive$1;
/**
 * A node in the state dependency root that observes other nodes, and can be observed itself.
 *
 * ComputedValue will remember the result of the computation for the duration of the batch, or
 * while being observed.
 *
 * During this time it will recompute only when one of its direct dependencies changed,
 * but only when it is being accessed with `ComputedValue.get()`.
 *
 * Implementation description:
 * 1. First time it's being accessed it will compute and remember result
 *    give back remembered result until 2. happens
 * 2. First time any deep dependency change, propagate POSSIBLY_STALE to all observers, wait for 3.
 * 3. When it's being accessed, recompute if any shallow dependency changed.
 *    if result changed: propagate STALE to all observers, that were POSSIBLY_STALE from the last step.
 *    go to step 2. either way
 *
 * If at any point it's outside batch and it isn't observed: reset everything and go to 1.
 */
_Symbol$toPrimitive$1 = Symbol.toPrimitive;
var ComputedValue = /*#__PURE__*/function () {
  // nodes we are looking at. Our value depends on these nodes
  // during tracking it's an array with new observed observers

  // to check for cycles

  // N.B: unminified as it is used by MST

  /**
   * Create a new computed value based on a function expression.
   *
   * The `name` property is for debug purposes only.
   *
   * The `equals` property specifies the comparer function to use to determine if a newly produced
   * value differs from the previous value. Two comparers are provided in the library; `defaultComparer`
   * compares based on identity comparison (===), and `structuralComparer` deeply compares the structure.
   * Structural comparison can be convenient if you always produce a new aggregated object and
   * don't want to notify observers if it is structurally the same.
   * This is useful for working with vectors, mouse coordinates etc.
   */
  function ComputedValue(options) {
    this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
    this.observing_ = [];
    this.newObserving_ = null;
    this.isBeingObserved_ = false;
    this.isPendingUnobservation_ = false;
    this.observers_ = new Set();
    this.diffValue_ = 0;
    this.runId_ = 0;
    this.lastAccessedBy_ = 0;
    this.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
    this.unboundDepsCount_ = 0;
    this.value_ = new CaughtException(null);
    this.name_ = void 0;
    this.triggeredBy_ = void 0;
    this.isComputing_ = false;
    this.isRunningSetter_ = false;
    this.derivation = void 0;
    this.setter_ = void 0;
    this.isTracing_ = TraceMode.NONE;
    this.scope_ = void 0;
    this.equals_ = void 0;
    this.requiresReaction_ = void 0;
    this.keepAlive_ = void 0;
    this.onBOL = void 0;
    this.onBUOL = void 0;
    if (!options.get) {
      die(31);
    }
    this.derivation = options.get;
    this.name_ = options.name || ( true ? "ComputedValue@" + getNextId() : undefined);
    if (options.set) {
      this.setter_ = createAction( true ? this.name_ + "-setter" : undefined, options.set);
    }
    this.equals_ = options.equals || (options.compareStructural || options.struct ? comparer.structural : comparer["default"]);
    this.scope_ = options.context;
    this.requiresReaction_ = options.requiresReaction;
    this.keepAlive_ = !!options.keepAlive;
  }
  var _proto = ComputedValue.prototype;
  _proto.onBecomeStale_ = function onBecomeStale_() {
    propagateMaybeChanged(this);
  };
  _proto.onBO = function onBO() {
    if (this.onBOL) {
      this.onBOL.forEach(function (listener) {
        return listener();
      });
    }
  };
  _proto.onBUO = function onBUO() {
    if (this.onBUOL) {
      this.onBUOL.forEach(function (listener) {
        return listener();
      });
    }
  }
  /**
   * Returns the current value of this computed value.
   * Will evaluate its computation first if needed.
   */;
  _proto.get = function get() {
    if (this.isComputing_) {
      die(32, this.name_, this.derivation);
    }
    if (globalState.inBatch === 0 &&
    // !globalState.trackingDerivatpion &&
    this.observers_.size === 0 && !this.keepAlive_) {
      if (shouldCompute(this)) {
        this.warnAboutUntrackedRead_();
        startBatch(); // See perf test 'computed memoization'
        this.value_ = this.computeValue_(false);
        endBatch();
      }
    } else {
      reportObserved(this);
      if (shouldCompute(this)) {
        var prevTrackingContext = globalState.trackingContext;
        if (this.keepAlive_ && !prevTrackingContext) {
          globalState.trackingContext = this;
        }
        if (this.trackAndCompute()) {
          propagateChangeConfirmed(this);
        }
        globalState.trackingContext = prevTrackingContext;
      }
    }
    var result = this.value_;
    if (isCaughtException(result)) {
      throw result.cause;
    }
    return result;
  };
  _proto.set = function set(value) {
    if (this.setter_) {
      if (this.isRunningSetter_) {
        die(33, this.name_);
      }
      this.isRunningSetter_ = true;
      try {
        this.setter_.call(this.scope_, value);
      } finally {
        this.isRunningSetter_ = false;
      }
    } else {
      die(34, this.name_);
    }
  };
  _proto.trackAndCompute = function trackAndCompute() {
    // N.B: unminified as it is used by MST
    var oldValue = this.value_;
    var wasSuspended = /* see #1208 */this.dependenciesState_ === IDerivationState_.NOT_TRACKING_;
    var newValue = this.computeValue_(true);
    var changed = wasSuspended || isCaughtException(oldValue) || isCaughtException(newValue) || !this.equals_(oldValue, newValue);
    if (changed) {
      this.value_ = newValue;
      if ( true && isSpyEnabled()) {
        spyReport({
          observableKind: "computed",
          debugObjectName: this.name_,
          object: this.scope_,
          type: "update",
          oldValue: oldValue,
          newValue: newValue
        });
      }
    }
    return changed;
  };
  _proto.computeValue_ = function computeValue_(track) {
    this.isComputing_ = true;
    // don't allow state changes during computation
    var prev = allowStateChangesStart(false);
    var res;
    if (track) {
      res = trackDerivedFunction(this, this.derivation, this.scope_);
    } else {
      if (globalState.disableErrorBoundaries === true) {
        res = this.derivation.call(this.scope_);
      } else {
        try {
          res = this.derivation.call(this.scope_);
        } catch (e) {
          res = new CaughtException(e);
        }
      }
    }
    allowStateChangesEnd(prev);
    this.isComputing_ = false;
    return res;
  };
  _proto.suspend_ = function suspend_() {
    if (!this.keepAlive_) {
      clearObserving(this);
      this.value_ = undefined; // don't hold on to computed value!
      if ( true && this.isTracing_ !== TraceMode.NONE) {
        console.log("[mobx.trace] Computed value '" + this.name_ + "' was suspended and it will recompute on the next access.");
      }
    }
  };
  _proto.observe_ = function observe_(listener, fireImmediately) {
    var _this = this;
    var firstTime = true;
    var prevValue = undefined;
    return autorun(function () {
      // TODO: why is this in a different place than the spyReport() function? in all other observables it's called in the same place
      var newValue = _this.get();
      if (!firstTime || fireImmediately) {
        var prevU = untrackedStart();
        listener({
          observableKind: "computed",
          debugObjectName: _this.name_,
          type: UPDATE,
          object: _this,
          newValue: newValue,
          oldValue: prevValue
        });
        untrackedEnd(prevU);
      }
      firstTime = false;
      prevValue = newValue;
    });
  };
  _proto.warnAboutUntrackedRead_ = function warnAboutUntrackedRead_() {
    if (false) {}
    if (this.isTracing_ !== TraceMode.NONE) {
      console.log("[mobx.trace] Computed value '" + this.name_ + "' is being read outside a reactive context. Doing a full recompute.");
    }
    if (typeof this.requiresReaction_ === "boolean" ? this.requiresReaction_ : globalState.computedRequiresReaction) {
      console.warn("[mobx] Computed value '" + this.name_ + "' is being read outside a reactive context. Doing a full recompute.");
    }
  };
  _proto.toString = function toString() {
    return this.name_ + "[" + this.derivation.toString() + "]";
  };
  _proto.valueOf = function valueOf() {
    return toPrimitive(this.get());
  };
  _proto[_Symbol$toPrimitive$1] = function () {
    return this.valueOf();
  };
  return ComputedValue;
}();
var isComputedValue = /*#__PURE__*/createInstanceofPredicate("ComputedValue", ComputedValue);

var IDerivationState_;
(function (IDerivationState_) {
  // before being run or (outside batch and not being observed)
  // at this point derivation is not holding any data about dependency tree
  IDerivationState_[IDerivationState_["NOT_TRACKING_"] = -1] = "NOT_TRACKING_";
  // no shallow dependency changed since last computation
  // won't recalculate derivation
  // this is what makes mobx fast
  IDerivationState_[IDerivationState_["UP_TO_DATE_"] = 0] = "UP_TO_DATE_";
  // some deep dependency changed, but don't know if shallow dependency changed
  // will require to check first if UP_TO_DATE or POSSIBLY_STALE
  // currently only ComputedValue will propagate POSSIBLY_STALE
  //
  // having this state is second big optimization:
  // don't have to recompute on every dependency change, but only when it's needed
  IDerivationState_[IDerivationState_["POSSIBLY_STALE_"] = 1] = "POSSIBLY_STALE_";
  // A shallow dependency has changed since last computation and the derivation
  // will need to recompute when it's needed next.
  IDerivationState_[IDerivationState_["STALE_"] = 2] = "STALE_";
})(IDerivationState_ || (IDerivationState_ = {}));
var TraceMode;
(function (TraceMode) {
  TraceMode[TraceMode["NONE"] = 0] = "NONE";
  TraceMode[TraceMode["LOG"] = 1] = "LOG";
  TraceMode[TraceMode["BREAK"] = 2] = "BREAK";
})(TraceMode || (TraceMode = {}));
var CaughtException = function CaughtException(cause) {
  this.cause = void 0;
  this.cause = cause;
  // Empty
};

function isCaughtException(e) {
  return e instanceof CaughtException;
}
/**
 * Finds out whether any dependency of the derivation has actually changed.
 * If dependenciesState is 1 then it will recalculate dependencies,
 * if any dependency changed it will propagate it by changing dependenciesState to 2.
 *
 * By iterating over the dependencies in the same order that they were reported and
 * stopping on the first change, all the recalculations are only called for ComputedValues
 * that will be tracked by derivation. That is because we assume that if the first x
 * dependencies of the derivation doesn't change then the derivation should run the same way
 * up until accessing x-th dependency.
 */
function shouldCompute(derivation) {
  switch (derivation.dependenciesState_) {
    case IDerivationState_.UP_TO_DATE_:
      return false;
    case IDerivationState_.NOT_TRACKING_:
    case IDerivationState_.STALE_:
      return true;
    case IDerivationState_.POSSIBLY_STALE_:
      {
        // state propagation can occur outside of action/reactive context #2195
        var prevAllowStateReads = allowStateReadsStart(true);
        var prevUntracked = untrackedStart(); // no need for those computeds to be reported, they will be picked up in trackDerivedFunction.
        var obs = derivation.observing_,
          l = obs.length;
        for (var i = 0; i < l; i++) {
          var obj = obs[i];
          if (isComputedValue(obj)) {
            if (globalState.disableErrorBoundaries) {
              obj.get();
            } else {
              try {
                obj.get();
              } catch (e) {
                // we are not interested in the value *or* exception at this moment, but if there is one, notify all
                untrackedEnd(prevUntracked);
                allowStateReadsEnd(prevAllowStateReads);
                return true;
              }
            }
            // if ComputedValue `obj` actually changed it will be computed and propagated to its observers.
            // and `derivation` is an observer of `obj`
            // invariantShouldCompute(derivation)
            if (derivation.dependenciesState_ === IDerivationState_.STALE_) {
              untrackedEnd(prevUntracked);
              allowStateReadsEnd(prevAllowStateReads);
              return true;
            }
          }
        }
        changeDependenciesStateTo0(derivation);
        untrackedEnd(prevUntracked);
        allowStateReadsEnd(prevAllowStateReads);
        return false;
      }
  }
}
function isComputingDerivation() {
  return globalState.trackingDerivation !== null; // filter out actions inside computations
}

function checkIfStateModificationsAreAllowed(atom) {
  if (false) {}
  var hasObservers = atom.observers_.size > 0;
  // Should not be possible to change observed state outside strict mode, except during initialization, see #563
  if (!globalState.allowStateChanges && (hasObservers || globalState.enforceActions === "always")) {
    console.warn("[MobX] " + (globalState.enforceActions ? "Since strict-mode is enabled, changing (observed) observable values without using an action is not allowed. Tried to modify: " : "Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, a computed value or the render function of a React component? You can wrap side effects in 'runInAction' (or decorate functions with 'action') if needed. Tried to modify: ") + atom.name_);
  }
}
function checkIfStateReadsAreAllowed(observable) {
  if ( true && !globalState.allowStateReads && globalState.observableRequiresReaction) {
    console.warn("[mobx] Observable '" + observable.name_ + "' being read outside a reactive context.");
  }
}
/**
 * Executes the provided function `f` and tracks which observables are being accessed.
 * The tracking information is stored on the `derivation` object and the derivation is registered
 * as observer of any of the accessed observables.
 */
function trackDerivedFunction(derivation, f, context) {
  var prevAllowStateReads = allowStateReadsStart(true);
  // pre allocate array allocation + room for variation in deps
  // array will be trimmed by bindDependencies
  changeDependenciesStateTo0(derivation);
  derivation.newObserving_ = new Array(derivation.observing_.length + 100);
  derivation.unboundDepsCount_ = 0;
  derivation.runId_ = ++globalState.runId;
  var prevTracking = globalState.trackingDerivation;
  globalState.trackingDerivation = derivation;
  globalState.inBatch++;
  var result;
  if (globalState.disableErrorBoundaries === true) {
    result = f.call(context);
  } else {
    try {
      result = f.call(context);
    } catch (e) {
      result = new CaughtException(e);
    }
  }
  globalState.inBatch--;
  globalState.trackingDerivation = prevTracking;
  bindDependencies(derivation);
  warnAboutDerivationWithoutDependencies(derivation);
  allowStateReadsEnd(prevAllowStateReads);
  return result;
}
function warnAboutDerivationWithoutDependencies(derivation) {
  if (false) {}
  if (derivation.observing_.length !== 0) {
    return;
  }
  if (typeof derivation.requiresObservable_ === "boolean" ? derivation.requiresObservable_ : globalState.reactionRequiresObservable) {
    console.warn("[mobx] Derivation '" + derivation.name_ + "' is created/updated without reading any observable value.");
  }
}
/**
 * diffs newObserving with observing.
 * update observing to be newObserving with unique observables
 * notify observers that become observed/unobserved
 */
function bindDependencies(derivation) {
  // invariant(derivation.dependenciesState !== IDerivationState.NOT_TRACKING, "INTERNAL ERROR bindDependencies expects derivation.dependenciesState !== -1");
  var prevObserving = derivation.observing_;
  var observing = derivation.observing_ = derivation.newObserving_;
  var lowestNewObservingDerivationState = IDerivationState_.UP_TO_DATE_;
  // Go through all new observables and check diffValue: (this list can contain duplicates):
  //   0: first occurrence, change to 1 and keep it
  //   1: extra occurrence, drop it
  var i0 = 0,
    l = derivation.unboundDepsCount_;
  for (var i = 0; i < l; i++) {
    var dep = observing[i];
    if (dep.diffValue_ === 0) {
      dep.diffValue_ = 1;
      if (i0 !== i) {
        observing[i0] = dep;
      }
      i0++;
    }
    // Upcast is 'safe' here, because if dep is IObservable, `dependenciesState` will be undefined,
    // not hitting the condition
    if (dep.dependenciesState_ > lowestNewObservingDerivationState) {
      lowestNewObservingDerivationState = dep.dependenciesState_;
    }
  }
  observing.length = i0;
  derivation.newObserving_ = null; // newObserving shouldn't be needed outside tracking (statement moved down to work around FF bug, see #614)
  // Go through all old observables and check diffValue: (it is unique after last bindDependencies)
  //   0: it's not in new observables, unobserve it
  //   1: it keeps being observed, don't want to notify it. change to 0
  l = prevObserving.length;
  while (l--) {
    var _dep = prevObserving[l];
    if (_dep.diffValue_ === 0) {
      removeObserver(_dep, derivation);
    }
    _dep.diffValue_ = 0;
  }
  // Go through all new observables and check diffValue: (now it should be unique)
  //   0: it was set to 0 in last loop. don't need to do anything.
  //   1: it wasn't observed, let's observe it. set back to 0
  while (i0--) {
    var _dep2 = observing[i0];
    if (_dep2.diffValue_ === 1) {
      _dep2.diffValue_ = 0;
      addObserver(_dep2, derivation);
    }
  }
  // Some new observed derivations may become stale during this derivation computation
  // so they have had no chance to propagate staleness (#916)
  if (lowestNewObservingDerivationState !== IDerivationState_.UP_TO_DATE_) {
    derivation.dependenciesState_ = lowestNewObservingDerivationState;
    derivation.onBecomeStale_();
  }
}
function clearObserving(derivation) {
  // invariant(globalState.inBatch > 0, "INTERNAL ERROR clearObserving should be called only inside batch");
  var obs = derivation.observing_;
  derivation.observing_ = [];
  var i = obs.length;
  while (i--) {
    removeObserver(obs[i], derivation);
  }
  derivation.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
}
function untracked(action) {
  var prev = untrackedStart();
  try {
    return action();
  } finally {
    untrackedEnd(prev);
  }
}
function untrackedStart() {
  var prev = globalState.trackingDerivation;
  globalState.trackingDerivation = null;
  return prev;
}
function untrackedEnd(prev) {
  globalState.trackingDerivation = prev;
}
function allowStateReadsStart(allowStateReads) {
  var prev = globalState.allowStateReads;
  globalState.allowStateReads = allowStateReads;
  return prev;
}
function allowStateReadsEnd(prev) {
  globalState.allowStateReads = prev;
}
/**
 * needed to keep `lowestObserverState` correct. when changing from (2 or 1) to 0
 *
 */
function changeDependenciesStateTo0(derivation) {
  if (derivation.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
    return;
  }
  derivation.dependenciesState_ = IDerivationState_.UP_TO_DATE_;
  var obs = derivation.observing_;
  var i = obs.length;
  while (i--) {
    obs[i].lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
  }
}

/**
 * These values will persist if global state is reset
 */
var persistentKeys = ["mobxGuid", "spyListeners", "enforceActions", "computedRequiresReaction", "reactionRequiresObservable", "observableRequiresReaction", "allowStateReads", "disableErrorBoundaries", "runId", "UNCHANGED", "useProxies"];
var MobXGlobals = function MobXGlobals() {
  this.version = 6;
  this.UNCHANGED = {};
  this.trackingDerivation = null;
  this.trackingContext = null;
  this.runId = 0;
  this.mobxGuid = 0;
  this.inBatch = 0;
  this.pendingUnobservations = [];
  this.pendingReactions = [];
  this.isRunningReactions = false;
  this.allowStateChanges = false;
  this.allowStateReads = true;
  this.enforceActions = true;
  this.spyListeners = [];
  this.globalReactionErrorHandlers = [];
  this.computedRequiresReaction = false;
  this.reactionRequiresObservable = false;
  this.observableRequiresReaction = false;
  this.disableErrorBoundaries = false;
  this.suppressReactionErrors = false;
  this.useProxies = true;
  this.verifyProxies = false;
  this.safeDescriptors = true;
  this.stateVersion = Number.MIN_SAFE_INTEGER;
};
var canMergeGlobalState = true;
var isolateCalled = false;
var globalState = /*#__PURE__*/function () {
  var global = /*#__PURE__*/getGlobal();
  if (global.__mobxInstanceCount > 0 && !global.__mobxGlobals) {
    canMergeGlobalState = false;
  }
  if (global.__mobxGlobals && global.__mobxGlobals.version !== new MobXGlobals().version) {
    canMergeGlobalState = false;
  }
  if (!canMergeGlobalState) {
    // Because this is a IIFE we need to let isolateCalled a chance to change
    // so we run it after the event loop completed at least 1 iteration
    setTimeout(function () {
      if (!isolateCalled) {
        die(35);
      }
    }, 1);
    return new MobXGlobals();
  } else if (global.__mobxGlobals) {
    global.__mobxInstanceCount += 1;
    if (!global.__mobxGlobals.UNCHANGED) {
      global.__mobxGlobals.UNCHANGED = {};
    } // make merge backward compatible
    return global.__mobxGlobals;
  } else {
    global.__mobxInstanceCount = 1;
    return global.__mobxGlobals = /*#__PURE__*/new MobXGlobals();
  }
}();
function isolateGlobalState() {
  if (globalState.pendingReactions.length || globalState.inBatch || globalState.isRunningReactions) {
    die(36);
  }
  isolateCalled = true;
  if (canMergeGlobalState) {
    var global = getGlobal();
    if (--global.__mobxInstanceCount === 0) {
      global.__mobxGlobals = undefined;
    }
    globalState = new MobXGlobals();
  }
}
function getGlobalState() {
  return globalState;
}
/**
 * For testing purposes only; this will break the internal state of existing observables,
 * but can be used to get back at a stable state after throwing errors
 */
function resetGlobalState() {
  var defaultGlobals = new MobXGlobals();
  for (var key in defaultGlobals) {
    if (persistentKeys.indexOf(key) === -1) {
      globalState[key] = defaultGlobals[key];
    }
  }
  globalState.allowStateChanges = !globalState.enforceActions;
}

function hasObservers(observable) {
  return observable.observers_ && observable.observers_.size > 0;
}
function getObservers(observable) {
  return observable.observers_;
}
// function invariantObservers(observable: IObservable) {
//     const list = observable.observers
//     const map = observable.observersIndexes
//     const l = list.length
//     for (let i = 0; i < l; i++) {
//         const id = list[i].__mapid
//         if (i) {
//             invariant(map[id] === i, "INTERNAL ERROR maps derivation.__mapid to index in list") // for performance
//         } else {
//             invariant(!(id in map), "INTERNAL ERROR observer on index 0 shouldn't be held in map.") // for performance
//         }
//     }
//     invariant(
//         list.length === 0 || Object.keys(map).length === list.length - 1,
//         "INTERNAL ERROR there is no junk in map"
//     )
// }
function addObserver(observable, node) {
  // invariant(node.dependenciesState !== -1, "INTERNAL ERROR, can add only dependenciesState !== -1");
  // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR add already added node");
  // invariantObservers(observable);
  observable.observers_.add(node);
  if (observable.lowestObserverState_ > node.dependenciesState_) {
    observable.lowestObserverState_ = node.dependenciesState_;
  }
  // invariantObservers(observable);
  // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR didn't add node");
}

function removeObserver(observable, node) {
  // invariant(globalState.inBatch > 0, "INTERNAL ERROR, remove should be called only inside batch");
  // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR remove already removed node");
  // invariantObservers(observable);
  observable.observers_["delete"](node);
  if (observable.observers_.size === 0) {
    // deleting last observer
    queueForUnobservation(observable);
  }
  // invariantObservers(observable);
  // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR remove already removed node2");
}

function queueForUnobservation(observable) {
  if (observable.isPendingUnobservation_ === false) {
    // invariant(observable._observers.length === 0, "INTERNAL ERROR, should only queue for unobservation unobserved observables");
    observable.isPendingUnobservation_ = true;
    globalState.pendingUnobservations.push(observable);
  }
}
/**
 * Batch starts a transaction, at least for purposes of memoizing ComputedValues when nothing else does.
 * During a batch `onBecomeUnobserved` will be called at most once per observable.
 * Avoids unnecessary recalculations.
 */
function startBatch() {
  globalState.inBatch++;
}
function endBatch() {
  if (--globalState.inBatch === 0) {
    runReactions();
    // the batch is actually about to finish, all unobserving should happen here.
    var list = globalState.pendingUnobservations;
    for (var i = 0; i < list.length; i++) {
      var observable = list[i];
      observable.isPendingUnobservation_ = false;
      if (observable.observers_.size === 0) {
        if (observable.isBeingObserved_) {
          // if this observable had reactive observers, trigger the hooks
          observable.isBeingObserved_ = false;
          observable.onBUO();
        }
        if (observable instanceof ComputedValue) {
          // computed values are automatically teared down when the last observer leaves
          // this process happens recursively, this computed might be the last observabe of another, etc..
          observable.suspend_();
        }
      }
    }
    globalState.pendingUnobservations = [];
  }
}
function reportObserved(observable) {
  checkIfStateReadsAreAllowed(observable);
  var derivation = globalState.trackingDerivation;
  if (derivation !== null) {
    /**
     * Simple optimization, give each derivation run an unique id (runId)
     * Check if last time this observable was accessed the same runId is used
     * if this is the case, the relation is already known
     */
    if (derivation.runId_ !== observable.lastAccessedBy_) {
      observable.lastAccessedBy_ = derivation.runId_;
      // Tried storing newObserving, or observing, or both as Set, but performance didn't come close...
      derivation.newObserving_[derivation.unboundDepsCount_++] = observable;
      if (!observable.isBeingObserved_ && globalState.trackingContext) {
        observable.isBeingObserved_ = true;
        observable.onBO();
      }
    }
    return observable.isBeingObserved_;
  } else if (observable.observers_.size === 0 && globalState.inBatch > 0) {
    queueForUnobservation(observable);
  }
  return false;
}
// function invariantLOS(observable: IObservable, msg: string) {
//     // it's expensive so better not run it in produciton. but temporarily helpful for testing
//     const min = getObservers(observable).reduce((a, b) => Math.min(a, b.dependenciesState), 2)
//     if (min >= observable.lowestObserverState) return // <- the only assumption about `lowestObserverState`
//     throw new Error(
//         "lowestObserverState is wrong for " +
//             msg +
//             " because " +
//             min +
//             " < " +
//             observable.lowestObserverState
//     )
// }
/**
 * NOTE: current propagation mechanism will in case of self reruning autoruns behave unexpectedly
 * It will propagate changes to observers from previous run
 * It's hard or maybe impossible (with reasonable perf) to get it right with current approach
 * Hopefully self reruning autoruns aren't a feature people should depend on
 * Also most basic use cases should be ok
 */
// Called by Atom when its value changes
function propagateChanged(observable) {
  // invariantLOS(observable, "changed start");
  if (observable.lowestObserverState_ === IDerivationState_.STALE_) {
    return;
  }
  observable.lowestObserverState_ = IDerivationState_.STALE_;
  // Ideally we use for..of here, but the downcompiled version is really slow...
  observable.observers_.forEach(function (d) {
    if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
      if ( true && d.isTracing_ !== TraceMode.NONE) {
        logTraceInfo(d, observable);
      }
      d.onBecomeStale_();
    }
    d.dependenciesState_ = IDerivationState_.STALE_;
  });
  // invariantLOS(observable, "changed end");
}
// Called by ComputedValue when it recalculate and its value changed
function propagateChangeConfirmed(observable) {
  // invariantLOS(observable, "confirmed start");
  if (observable.lowestObserverState_ === IDerivationState_.STALE_) {
    return;
  }
  observable.lowestObserverState_ = IDerivationState_.STALE_;
  observable.observers_.forEach(function (d) {
    if (d.dependenciesState_ === IDerivationState_.POSSIBLY_STALE_) {
      d.dependenciesState_ = IDerivationState_.STALE_;
      if ( true && d.isTracing_ !== TraceMode.NONE) {
        logTraceInfo(d, observable);
      }
    } else if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_ // this happens during computing of `d`, just keep lowestObserverState up to date.
    ) {
      observable.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
    }
  });
  // invariantLOS(observable, "confirmed end");
}
// Used by computed when its dependency changed, but we don't wan't to immediately recompute.
function propagateMaybeChanged(observable) {
  // invariantLOS(observable, "maybe start");
  if (observable.lowestObserverState_ !== IDerivationState_.UP_TO_DATE_) {
    return;
  }
  observable.lowestObserverState_ = IDerivationState_.POSSIBLY_STALE_;
  observable.observers_.forEach(function (d) {
    if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
      d.dependenciesState_ = IDerivationState_.POSSIBLY_STALE_;
      d.onBecomeStale_();
    }
  });
  // invariantLOS(observable, "maybe end");
}

function logTraceInfo(derivation, observable) {
  console.log("[mobx.trace] '" + derivation.name_ + "' is invalidated due to a change in: '" + observable.name_ + "'");
  if (derivation.isTracing_ === TraceMode.BREAK) {
    var lines = [];
    printDepTree(getDependencyTree(derivation), lines, 1);
    // prettier-ignore
    new Function("debugger;\n/*\nTracing '" + derivation.name_ + "'\n\nYou are entering this break point because derivation '" + derivation.name_ + "' is being traced and '" + observable.name_ + "' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n" + (derivation instanceof ComputedValue ? derivation.derivation.toString().replace(/[*]\//g, "/") : "") + "\n\nThe dependencies for this derivation are:\n\n" + lines.join("\n") + "\n*/\n    ")();
  }
}
function printDepTree(tree, lines, depth) {
  if (lines.length >= 1000) {
    lines.push("(and many more)");
    return;
  }
  lines.push("" + "\t".repeat(depth - 1) + tree.name);
  if (tree.dependencies) {
    tree.dependencies.forEach(function (child) {
      return printDepTree(child, lines, depth + 1);
    });
  }
}

var Reaction = /*#__PURE__*/function () {
  // nodes we are looking at. Our value depends on these nodes

  function Reaction(name_, onInvalidate_, errorHandler_, requiresObservable_) {
    if (name_ === void 0) {
      name_ =  true ? "Reaction@" + getNextId() : undefined;
    }
    this.name_ = void 0;
    this.onInvalidate_ = void 0;
    this.errorHandler_ = void 0;
    this.requiresObservable_ = void 0;
    this.observing_ = [];
    this.newObserving_ = [];
    this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
    this.diffValue_ = 0;
    this.runId_ = 0;
    this.unboundDepsCount_ = 0;
    this.isDisposed_ = false;
    this.isScheduled_ = false;
    this.isTrackPending_ = false;
    this.isRunning_ = false;
    this.isTracing_ = TraceMode.NONE;
    this.name_ = name_;
    this.onInvalidate_ = onInvalidate_;
    this.errorHandler_ = errorHandler_;
    this.requiresObservable_ = requiresObservable_;
  }
  var _proto = Reaction.prototype;
  _proto.onBecomeStale_ = function onBecomeStale_() {
    this.schedule_();
  };
  _proto.schedule_ = function schedule_() {
    if (!this.isScheduled_) {
      this.isScheduled_ = true;
      globalState.pendingReactions.push(this);
      runReactions();
    }
  };
  _proto.isScheduled = function isScheduled() {
    return this.isScheduled_;
  }
  /**
   * internal, use schedule() if you intend to kick off a reaction
   */;
  _proto.runReaction_ = function runReaction_() {
    if (!this.isDisposed_) {
      startBatch();
      this.isScheduled_ = false;
      var prev = globalState.trackingContext;
      globalState.trackingContext = this;
      if (shouldCompute(this)) {
        this.isTrackPending_ = true;
        try {
          this.onInvalidate_();
          if ( true && this.isTrackPending_ && isSpyEnabled()) {
            // onInvalidate didn't trigger track right away..
            spyReport({
              name: this.name_,
              type: "scheduled-reaction"
            });
          }
        } catch (e) {
          this.reportExceptionInDerivation_(e);
        }
      }
      globalState.trackingContext = prev;
      endBatch();
    }
  };
  _proto.track = function track(fn) {
    if (this.isDisposed_) {
      return;
      // console.warn("Reaction already disposed") // Note: Not a warning / error in mobx 4 either
    }

    startBatch();
    var notify = isSpyEnabled();
    var startTime;
    if ( true && notify) {
      startTime = Date.now();
      spyReportStart({
        name: this.name_,
        type: "reaction"
      });
    }
    this.isRunning_ = true;
    var prevReaction = globalState.trackingContext; // reactions could create reactions...
    globalState.trackingContext = this;
    var result = trackDerivedFunction(this, fn, undefined);
    globalState.trackingContext = prevReaction;
    this.isRunning_ = false;
    this.isTrackPending_ = false;
    if (this.isDisposed_) {
      // disposed during last run. Clean up everything that was bound after the dispose call.
      clearObserving(this);
    }
    if (isCaughtException(result)) {
      this.reportExceptionInDerivation_(result.cause);
    }
    if ( true && notify) {
      spyReportEnd({
        time: Date.now() - startTime
      });
    }
    endBatch();
  };
  _proto.reportExceptionInDerivation_ = function reportExceptionInDerivation_(error) {
    var _this = this;
    if (this.errorHandler_) {
      this.errorHandler_(error, this);
      return;
    }
    if (globalState.disableErrorBoundaries) {
      throw error;
    }
    var message =  true ? "[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '" + this + "'" : undefined;
    if (!globalState.suppressReactionErrors) {
      console.error(message, error);
      /** If debugging brought you here, please, read the above message :-). Tnx! */
    } else if (true) {
      console.warn("[mobx] (error in reaction '" + this.name_ + "' suppressed, fix error of causing action below)");
    } // prettier-ignore
    if ( true && isSpyEnabled()) {
      spyReport({
        type: "error",
        name: this.name_,
        message: message,
        error: "" + error
      });
    }
    globalState.globalReactionErrorHandlers.forEach(function (f) {
      return f(error, _this);
    });
  };
  _proto.dispose = function dispose() {
    if (!this.isDisposed_) {
      this.isDisposed_ = true;
      if (!this.isRunning_) {
        // if disposed while running, clean up later. Maybe not optimal, but rare case
        startBatch();
        clearObserving(this);
        endBatch();
      }
    }
  };
  _proto.getDisposer_ = function getDisposer_() {
    var r = this.dispose.bind(this);
    r[$mobx] = this;
    return r;
  };
  _proto.toString = function toString() {
    return "Reaction[" + this.name_ + "]";
  };
  _proto.trace = function trace$1(enterBreakPoint) {
    if (enterBreakPoint === void 0) {
      enterBreakPoint = false;
    }
    trace(this, enterBreakPoint);
  };
  return Reaction;
}();
function onReactionError(handler) {
  globalState.globalReactionErrorHandlers.push(handler);
  return function () {
    var idx = globalState.globalReactionErrorHandlers.indexOf(handler);
    if (idx >= 0) {
      globalState.globalReactionErrorHandlers.splice(idx, 1);
    }
  };
}
/**
 * Magic number alert!
 * Defines within how many times a reaction is allowed to re-trigger itself
 * until it is assumed that this is gonna be a never ending loop...
 */
var MAX_REACTION_ITERATIONS = 100;
var reactionScheduler = function reactionScheduler(f) {
  return f();
};
function runReactions() {
  // Trampolining, if runReactions are already running, new reactions will be picked up
  if (globalState.inBatch > 0 || globalState.isRunningReactions) {
    return;
  }
  reactionScheduler(runReactionsHelper);
}
function runReactionsHelper() {
  globalState.isRunningReactions = true;
  var allReactions = globalState.pendingReactions;
  var iterations = 0;
  // While running reactions, new reactions might be triggered.
  // Hence we work with two variables and check whether
  // we converge to no remaining reactions after a while.
  while (allReactions.length > 0) {
    if (++iterations === MAX_REACTION_ITERATIONS) {
      console.error( true ? "Reaction doesn't converge to a stable state after " + MAX_REACTION_ITERATIONS + " iterations." + (" Probably there is a cycle in the reactive function: " + allReactions[0]) : undefined);
      allReactions.splice(0); // clear reactions
    }

    var remainingReactions = allReactions.splice(0);
    for (var i = 0, l = remainingReactions.length; i < l; i++) {
      remainingReactions[i].runReaction_();
    }
  }
  globalState.isRunningReactions = false;
}
var isReaction = /*#__PURE__*/createInstanceofPredicate("Reaction", Reaction);
function setReactionScheduler(fn) {
  var baseScheduler = reactionScheduler;
  reactionScheduler = function reactionScheduler(f) {
    return fn(function () {
      return baseScheduler(f);
    });
  };
}

function isSpyEnabled() {
  return  true && !!globalState.spyListeners.length;
}
function spyReport(event) {
  if (false) {} // dead code elimination can do the rest
  if (!globalState.spyListeners.length) {
    return;
  }
  var listeners = globalState.spyListeners;
  for (var i = 0, l = listeners.length; i < l; i++) {
    listeners[i](event);
  }
}
function spyReportStart(event) {
  if (false) {}
  var change = _extends({}, event, {
    spyReportStart: true
  });
  spyReport(change);
}
var END_EVENT = {
  type: "report-end",
  spyReportEnd: true
};
function spyReportEnd(change) {
  if (false) {}
  if (change) {
    spyReport(_extends({}, change, {
      type: "report-end",
      spyReportEnd: true
    }));
  } else {
    spyReport(END_EVENT);
  }
}
function spy(listener) {
  if (false) {} else {
    globalState.spyListeners.push(listener);
    return once(function () {
      globalState.spyListeners = globalState.spyListeners.filter(function (l) {
        return l !== listener;
      });
    });
  }
}

var ACTION = "action";
var ACTION_BOUND = "action.bound";
var AUTOACTION = "autoAction";
var AUTOACTION_BOUND = "autoAction.bound";
var DEFAULT_ACTION_NAME = "<unnamed action>";
var actionAnnotation = /*#__PURE__*/createActionAnnotation(ACTION);
var actionBoundAnnotation = /*#__PURE__*/createActionAnnotation(ACTION_BOUND, {
  bound: true
});
var autoActionAnnotation = /*#__PURE__*/createActionAnnotation(AUTOACTION, {
  autoAction: true
});
var autoActionBoundAnnotation = /*#__PURE__*/createActionAnnotation(AUTOACTION_BOUND, {
  autoAction: true,
  bound: true
});
function createActionFactory(autoAction) {
  var res = function action(arg1, arg2) {
    // action(fn() {})
    if (isFunction(arg1)) {
      return createAction(arg1.name || DEFAULT_ACTION_NAME, arg1, autoAction);
    }
    // action("name", fn() {})
    if (isFunction(arg2)) {
      return createAction(arg1, arg2, autoAction);
    }
    // @action
    if (isStringish(arg2)) {
      return storeAnnotation(arg1, arg2, autoAction ? autoActionAnnotation : actionAnnotation);
    }
    // action("name") & @action("name")
    if (isStringish(arg1)) {
      return createDecoratorAnnotation(createActionAnnotation(autoAction ? AUTOACTION : ACTION, {
        name: arg1,
        autoAction: autoAction
      }));
    }
    if (true) {
      die("Invalid arguments for `action`");
    }
  };
  return res;
}
var action = /*#__PURE__*/createActionFactory(false);
Object.assign(action, actionAnnotation);
var autoAction = /*#__PURE__*/createActionFactory(true);
Object.assign(autoAction, autoActionAnnotation);
action.bound = /*#__PURE__*/createDecoratorAnnotation(actionBoundAnnotation);
autoAction.bound = /*#__PURE__*/createDecoratorAnnotation(autoActionBoundAnnotation);
function runInAction(fn) {
  return executeAction(fn.name || DEFAULT_ACTION_NAME, false, fn, this, undefined);
}
function isAction(thing) {
  return isFunction(thing) && thing.isMobxAction === true;
}

/**
 * Creates a named reactive view and keeps it alive, so that the view is always
 * updated if one of the dependencies changes, even when the view is not further used by something else.
 * @param view The reactive view
 * @returns disposer function, which can be used to stop the view from being updated in the future.
 */
function autorun(view, opts) {
  var _opts$name, _opts;
  if (opts === void 0) {
    opts = EMPTY_OBJECT;
  }
  if (true) {
    if (!isFunction(view)) {
      die("Autorun expects a function as first argument");
    }
    if (isAction(view)) {
      die("Autorun does not accept actions since actions are untrackable");
    }
  }
  var name = (_opts$name = (_opts = opts) == null ? void 0 : _opts.name) != null ? _opts$name :  true ? view.name || "Autorun@" + getNextId() : undefined;
  var runSync = !opts.scheduler && !opts.delay;
  var reaction;
  if (runSync) {
    // normal autorun
    reaction = new Reaction(name, function () {
      this.track(reactionRunner);
    }, opts.onError, opts.requiresObservable);
  } else {
    var scheduler = createSchedulerFromOptions(opts);
    // debounced autorun
    var isScheduled = false;
    reaction = new Reaction(name, function () {
      if (!isScheduled) {
        isScheduled = true;
        scheduler(function () {
          isScheduled = false;
          if (!reaction.isDisposed_) {
            reaction.track(reactionRunner);
          }
        });
      }
    }, opts.onError, opts.requiresObservable);
  }
  function reactionRunner() {
    view(reaction);
  }
  reaction.schedule_();
  return reaction.getDisposer_();
}
var run = function run(f) {
  return f();
};
function createSchedulerFromOptions(opts) {
  return opts.scheduler ? opts.scheduler : opts.delay ? function (f) {
    return setTimeout(f, opts.delay);
  } : run;
}
function reaction(expression, effect, opts) {
  var _opts$name2;
  if (opts === void 0) {
    opts = EMPTY_OBJECT;
  }
  if (true) {
    if (!isFunction(expression) || !isFunction(effect)) {
      die("First and second argument to reaction should be functions");
    }
    if (!isPlainObject(opts)) {
      die("Third argument of reactions should be an object");
    }
  }
  var name = (_opts$name2 = opts.name) != null ? _opts$name2 :  true ? "Reaction@" + getNextId() : undefined;
  var effectAction = action(name, opts.onError ? wrapErrorHandler(opts.onError, effect) : effect);
  var runSync = !opts.scheduler && !opts.delay;
  var scheduler = createSchedulerFromOptions(opts);
  var firstTime = true;
  var isScheduled = false;
  var value;
  var oldValue;
  var equals = opts.compareStructural ? comparer.structural : opts.equals || comparer["default"];
  var r = new Reaction(name, function () {
    if (firstTime || runSync) {
      reactionRunner();
    } else if (!isScheduled) {
      isScheduled = true;
      scheduler(reactionRunner);
    }
  }, opts.onError, opts.requiresObservable);
  function reactionRunner() {
    isScheduled = false;
    if (r.isDisposed_) {
      return;
    }
    var changed = false;
    r.track(function () {
      var nextValue = allowStateChanges(false, function () {
        return expression(r);
      });
      changed = firstTime || !equals(value, nextValue);
      oldValue = value;
      value = nextValue;
    });
    if (firstTime && opts.fireImmediately) {
      effectAction(value, oldValue, r);
    } else if (!firstTime && changed) {
      effectAction(value, oldValue, r);
    }
    firstTime = false;
  }
  r.schedule_();
  return r.getDisposer_();
}
function wrapErrorHandler(errorHandler, baseFn) {
  return function () {
    try {
      return baseFn.apply(this, arguments);
    } catch (e) {
      errorHandler.call(this, e);
    }
  };
}

var ON_BECOME_OBSERVED = "onBO";
var ON_BECOME_UNOBSERVED = "onBUO";
function onBecomeObserved(thing, arg2, arg3) {
  return interceptHook(ON_BECOME_OBSERVED, thing, arg2, arg3);
}
function onBecomeUnobserved(thing, arg2, arg3) {
  return interceptHook(ON_BECOME_UNOBSERVED, thing, arg2, arg3);
}
function interceptHook(hook, thing, arg2, arg3) {
  var atom = typeof arg3 === "function" ? getAtom(thing, arg2) : getAtom(thing);
  var cb = isFunction(arg3) ? arg3 : arg2;
  var listenersKey = hook + "L";
  if (atom[listenersKey]) {
    atom[listenersKey].add(cb);
  } else {
    atom[listenersKey] = new Set([cb]);
  }
  return function () {
    var hookListeners = atom[listenersKey];
    if (hookListeners) {
      hookListeners["delete"](cb);
      if (hookListeners.size === 0) {
        delete atom[listenersKey];
      }
    }
  };
}

var NEVER = "never";
var ALWAYS = "always";
var OBSERVED = "observed";
// const IF_AVAILABLE = "ifavailable"
function configure(options) {
  if (options.isolateGlobalState === true) {
    isolateGlobalState();
  }
  var useProxies = options.useProxies,
    enforceActions = options.enforceActions;
  if (useProxies !== undefined) {
    globalState.useProxies = useProxies === ALWAYS ? true : useProxies === NEVER ? false : typeof Proxy !== "undefined";
  }
  if (useProxies === "ifavailable") {
    globalState.verifyProxies = true;
  }
  if (enforceActions !== undefined) {
    var ea = enforceActions === ALWAYS ? ALWAYS : enforceActions === OBSERVED;
    globalState.enforceActions = ea;
    globalState.allowStateChanges = ea === true || ea === ALWAYS ? false : true;
  }
  ["computedRequiresReaction", "reactionRequiresObservable", "observableRequiresReaction", "disableErrorBoundaries", "safeDescriptors"].forEach(function (key) {
    if (key in options) {
      globalState[key] = !!options[key];
    }
  });
  globalState.allowStateReads = !globalState.observableRequiresReaction;
  if ( true && globalState.disableErrorBoundaries === true) {
    console.warn("WARNING: Debug feature only. MobX will NOT recover from errors when `disableErrorBoundaries` is enabled.");
  }
  if (options.reactionScheduler) {
    setReactionScheduler(options.reactionScheduler);
  }
}

function extendObservable(target, properties, annotations, options) {
  if (true) {
    if (arguments.length > 4) {
      die("'extendObservable' expected 2-4 arguments");
    }
    if (typeof target !== "object") {
      die("'extendObservable' expects an object as first argument");
    }
    if (isObservableMap(target)) {
      die("'extendObservable' should not be used on maps, use map.merge instead");
    }
    if (!isPlainObject(properties)) {
      die("'extendObservable' only accepts plain objects as second argument");
    }
    if (isObservable(properties) || isObservable(annotations)) {
      die("Extending an object with another observable (object) is not supported");
    }
  }
  // Pull descriptors first, so we don't have to deal with props added by administration ($mobx)
  var descriptors = getOwnPropertyDescriptors(properties);
  var adm = asObservableObject(target, options)[$mobx];
  startBatch();
  try {
    ownKeys(descriptors).forEach(function (key) {
      adm.extend_(key, descriptors[key],
      // must pass "undefined" for { key: undefined }
      !annotations ? true : key in annotations ? annotations[key] : true);
    });
  } finally {
    endBatch();
  }
  return target;
}

function getDependencyTree(thing, property) {
  return nodeToDependencyTree(getAtom(thing, property));
}
function nodeToDependencyTree(node) {
  var result = {
    name: node.name_
  };
  if (node.observing_ && node.observing_.length > 0) {
    result.dependencies = unique(node.observing_).map(nodeToDependencyTree);
  }
  return result;
}
function getObserverTree(thing, property) {
  return nodeToObserverTree(getAtom(thing, property));
}
function nodeToObserverTree(node) {
  var result = {
    name: node.name_
  };
  if (hasObservers(node)) {
    result.observers = Array.from(getObservers(node)).map(nodeToObserverTree);
  }
  return result;
}
function unique(list) {
  return Array.from(new Set(list));
}

var generatorId = 0;
function FlowCancellationError() {
  this.message = "FLOW_CANCELLED";
}
FlowCancellationError.prototype = /*#__PURE__*/Object.create(Error.prototype);
function isFlowCancellationError(error) {
  return error instanceof FlowCancellationError;
}
var flowAnnotation = /*#__PURE__*/createFlowAnnotation("flow");
var flowBoundAnnotation = /*#__PURE__*/createFlowAnnotation("flow.bound", {
  bound: true
});
var flow = /*#__PURE__*/Object.assign(function flow(arg1, arg2) {
  // @flow
  if (isStringish(arg2)) {
    return storeAnnotation(arg1, arg2, flowAnnotation);
  }
  // flow(fn)
  if ( true && arguments.length !== 1) {
    die("Flow expects single argument with generator function");
  }
  var generator = arg1;
  var name = generator.name || "<unnamed flow>";
  // Implementation based on https://github.com/tj/co/blob/master/index.js
  var res = function res() {
    var ctx = this;
    var args = arguments;
    var runId = ++generatorId;
    var gen = action(name + " - runid: " + runId + " - init", generator).apply(ctx, args);
    var rejector;
    var pendingPromise = undefined;
    var promise = new Promise(function (resolve, reject) {
      var stepId = 0;
      rejector = reject;
      function onFulfilled(res) {
        pendingPromise = undefined;
        var ret;
        try {
          ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen.next).call(gen, res);
        } catch (e) {
          return reject(e);
        }
        next(ret);
      }
      function onRejected(err) {
        pendingPromise = undefined;
        var ret;
        try {
          ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen["throw"]).call(gen, err);
        } catch (e) {
          return reject(e);
        }
        next(ret);
      }
      function next(ret) {
        if (isFunction(ret == null ? void 0 : ret.then)) {
          // an async iterator
          ret.then(next, reject);
          return;
        }
        if (ret.done) {
          return resolve(ret.value);
        }
        pendingPromise = Promise.resolve(ret.value);
        return pendingPromise.then(onFulfilled, onRejected);
      }
      onFulfilled(undefined); // kick off the process
    });

    promise.cancel = action(name + " - runid: " + runId + " - cancel", function () {
      try {
        if (pendingPromise) {
          cancelPromise(pendingPromise);
        }
        // Finally block can return (or yield) stuff..
        var _res = gen["return"](undefined);
        // eat anything that promise would do, it's cancelled!
        var yieldedPromise = Promise.resolve(_res.value);
        yieldedPromise.then(noop, noop);
        cancelPromise(yieldedPromise); // maybe it can be cancelled :)
        // reject our original promise
        rejector(new FlowCancellationError());
      } catch (e) {
        rejector(e); // there could be a throwing finally block
      }
    });

    return promise;
  };
  res.isMobXFlow = true;
  return res;
}, flowAnnotation);
flow.bound = /*#__PURE__*/createDecoratorAnnotation(flowBoundAnnotation);
function cancelPromise(promise) {
  if (isFunction(promise.cancel)) {
    promise.cancel();
  }
}
function flowResult(result) {
  return result; // just tricking TypeScript :)
}

function isFlow(fn) {
  return (fn == null ? void 0 : fn.isMobXFlow) === true;
}

function interceptReads(thing, propOrHandler, handler) {
  var target;
  if (isObservableMap(thing) || isObservableArray(thing) || isObservableValue(thing)) {
    target = getAdministration(thing);
  } else if (isObservableObject(thing)) {
    if ( true && !isStringish(propOrHandler)) {
      return die("InterceptReads can only be used with a specific property, not with an object in general");
    }
    target = getAdministration(thing, propOrHandler);
  } else if (true) {
    return die("Expected observable map, object or array as first array");
  }
  if ( true && target.dehancer !== undefined) {
    return die("An intercept reader was already established");
  }
  target.dehancer = typeof propOrHandler === "function" ? propOrHandler : handler;
  return function () {
    target.dehancer = undefined;
  };
}

function intercept(thing, propOrHandler, handler) {
  if (isFunction(handler)) {
    return interceptProperty(thing, propOrHandler, handler);
  } else {
    return interceptInterceptable(thing, propOrHandler);
  }
}
function interceptInterceptable(thing, handler) {
  return getAdministration(thing).intercept_(handler);
}
function interceptProperty(thing, property, handler) {
  return getAdministration(thing, property).intercept_(handler);
}

function _isComputed(value, property) {
  if (property === undefined) {
    return isComputedValue(value);
  }
  if (isObservableObject(value) === false) {
    return false;
  }
  if (!value[$mobx].values_.has(property)) {
    return false;
  }
  var atom = getAtom(value, property);
  return isComputedValue(atom);
}
function isComputed(value) {
  if ( true && arguments.length > 1) {
    return die("isComputed expects only 1 argument. Use isComputedProp to inspect the observability of a property");
  }
  return _isComputed(value);
}
function isComputedProp(value, propName) {
  if ( true && !isStringish(propName)) {
    return die("isComputed expected a property name as second argument");
  }
  return _isComputed(value, propName);
}

function _isObservable(value, property) {
  if (!value) {
    return false;
  }
  if (property !== undefined) {
    if ( true && (isObservableMap(value) || isObservableArray(value))) {
      return die("isObservable(object, propertyName) is not supported for arrays and maps. Use map.has or array.length instead.");
    }
    if (isObservableObject(value)) {
      return value[$mobx].values_.has(property);
    }
    return false;
  }
  // For first check, see #701
  return isObservableObject(value) || !!value[$mobx] || isAtom(value) || isReaction(value) || isComputedValue(value);
}
function isObservable(value) {
  if ( true && arguments.length !== 1) {
    die("isObservable expects only 1 argument. Use isObservableProp to inspect the observability of a property");
  }
  return _isObservable(value);
}
function isObservableProp(value, propName) {
  if ( true && !isStringish(propName)) {
    return die("expected a property name as second argument");
  }
  return _isObservable(value, propName);
}

function keys(obj) {
  if (isObservableObject(obj)) {
    return obj[$mobx].keys_();
  }
  if (isObservableMap(obj) || isObservableSet(obj)) {
    return Array.from(obj.keys());
  }
  if (isObservableArray(obj)) {
    return obj.map(function (_, index) {
      return index;
    });
  }
  die(5);
}
function values(obj) {
  if (isObservableObject(obj)) {
    return keys(obj).map(function (key) {
      return obj[key];
    });
  }
  if (isObservableMap(obj)) {
    return keys(obj).map(function (key) {
      return obj.get(key);
    });
  }
  if (isObservableSet(obj)) {
    return Array.from(obj.values());
  }
  if (isObservableArray(obj)) {
    return obj.slice();
  }
  die(6);
}
function entries(obj) {
  if (isObservableObject(obj)) {
    return keys(obj).map(function (key) {
      return [key, obj[key]];
    });
  }
  if (isObservableMap(obj)) {
    return keys(obj).map(function (key) {
      return [key, obj.get(key)];
    });
  }
  if (isObservableSet(obj)) {
    return Array.from(obj.entries());
  }
  if (isObservableArray(obj)) {
    return obj.map(function (key, index) {
      return [index, key];
    });
  }
  die(7);
}
function set(obj, key, value) {
  if (arguments.length === 2 && !isObservableSet(obj)) {
    startBatch();
    var _values = key;
    try {
      for (var _key in _values) {
        set(obj, _key, _values[_key]);
      }
    } finally {
      endBatch();
    }
    return;
  }
  if (isObservableObject(obj)) {
    obj[$mobx].set_(key, value);
  } else if (isObservableMap(obj)) {
    obj.set(key, value);
  } else if (isObservableSet(obj)) {
    obj.add(key);
  } else if (isObservableArray(obj)) {
    if (typeof key !== "number") {
      key = parseInt(key, 10);
    }
    if (key < 0) {
      die("Invalid index: '" + key + "'");
    }
    startBatch();
    if (key >= obj.length) {
      obj.length = key + 1;
    }
    obj[key] = value;
    endBatch();
  } else {
    die(8);
  }
}
function remove(obj, key) {
  if (isObservableObject(obj)) {
    obj[$mobx].delete_(key);
  } else if (isObservableMap(obj)) {
    obj["delete"](key);
  } else if (isObservableSet(obj)) {
    obj["delete"](key);
  } else if (isObservableArray(obj)) {
    if (typeof key !== "number") {
      key = parseInt(key, 10);
    }
    obj.splice(key, 1);
  } else {
    die(9);
  }
}
function has(obj, key) {
  if (isObservableObject(obj)) {
    return obj[$mobx].has_(key);
  } else if (isObservableMap(obj)) {
    return obj.has(key);
  } else if (isObservableSet(obj)) {
    return obj.has(key);
  } else if (isObservableArray(obj)) {
    return key >= 0 && key < obj.length;
  }
  die(10);
}
function get(obj, key) {
  if (!has(obj, key)) {
    return undefined;
  }
  if (isObservableObject(obj)) {
    return obj[$mobx].get_(key);
  } else if (isObservableMap(obj)) {
    return obj.get(key);
  } else if (isObservableArray(obj)) {
    return obj[key];
  }
  die(11);
}
function apiDefineProperty(obj, key, descriptor) {
  if (isObservableObject(obj)) {
    return obj[$mobx].defineProperty_(key, descriptor);
  }
  die(39);
}
function apiOwnKeys(obj) {
  if (isObservableObject(obj)) {
    return obj[$mobx].ownKeys_();
  }
  die(38);
}

function observe(thing, propOrCb, cbOrFire, fireImmediately) {
  if (isFunction(cbOrFire)) {
    return observeObservableProperty(thing, propOrCb, cbOrFire, fireImmediately);
  } else {
    return observeObservable(thing, propOrCb, cbOrFire);
  }
}
function observeObservable(thing, listener, fireImmediately) {
  return getAdministration(thing).observe_(listener, fireImmediately);
}
function observeObservableProperty(thing, property, listener, fireImmediately) {
  return getAdministration(thing, property).observe_(listener, fireImmediately);
}

function cache(map, key, value) {
  map.set(key, value);
  return value;
}
function toJSHelper(source, __alreadySeen) {
  if (source == null || typeof source !== "object" || source instanceof Date || !isObservable(source)) {
    return source;
  }
  if (isObservableValue(source) || isComputedValue(source)) {
    return toJSHelper(source.get(), __alreadySeen);
  }
  if (__alreadySeen.has(source)) {
    return __alreadySeen.get(source);
  }
  if (isObservableArray(source)) {
    var res = cache(__alreadySeen, source, new Array(source.length));
    source.forEach(function (value, idx) {
      res[idx] = toJSHelper(value, __alreadySeen);
    });
    return res;
  }
  if (isObservableSet(source)) {
    var _res = cache(__alreadySeen, source, new Set());
    source.forEach(function (value) {
      _res.add(toJSHelper(value, __alreadySeen));
    });
    return _res;
  }
  if (isObservableMap(source)) {
    var _res2 = cache(__alreadySeen, source, new Map());
    source.forEach(function (value, key) {
      _res2.set(key, toJSHelper(value, __alreadySeen));
    });
    return _res2;
  } else {
    // must be observable object
    var _res3 = cache(__alreadySeen, source, {});
    apiOwnKeys(source).forEach(function (key) {
      if (objectPrototype.propertyIsEnumerable.call(source, key)) {
        _res3[key] = toJSHelper(source[key], __alreadySeen);
      }
    });
    return _res3;
  }
}
/**
 * Recursively converts an observable to it's non-observable native counterpart.
 * It does NOT recurse into non-observables, these are left as they are, even if they contain observables.
 * Computed and other non-enumerable properties are completely ignored.
 * Complex scenarios require custom solution, eg implementing `toJSON` or using `serializr` lib.
 */
function toJS(source, options) {
  if ( true && options) {
    die("toJS no longer supports options");
  }
  return toJSHelper(source, new Map());
}

function trace() {
  if (false) {}
  var enterBreakPoint = false;
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  if (typeof args[args.length - 1] === "boolean") {
    enterBreakPoint = args.pop();
  }
  var derivation = getAtomFromArgs(args);
  if (!derivation) {
    return die("'trace(break?)' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly");
  }
  if (derivation.isTracing_ === TraceMode.NONE) {
    console.log("[mobx.trace] '" + derivation.name_ + "' tracing enabled");
  }
  derivation.isTracing_ = enterBreakPoint ? TraceMode.BREAK : TraceMode.LOG;
}
function getAtomFromArgs(args) {
  switch (args.length) {
    case 0:
      return globalState.trackingDerivation;
    case 1:
      return getAtom(args[0]);
    case 2:
      return getAtom(args[0], args[1]);
  }
}

/**
 * During a transaction no views are updated until the end of the transaction.
 * The transaction will be run synchronously nonetheless.
 *
 * @param action a function that updates some reactive state
 * @returns any value that was returned by the 'action' parameter.
 */
function transaction(action, thisArg) {
  if (thisArg === void 0) {
    thisArg = undefined;
  }
  startBatch();
  try {
    return action.apply(thisArg);
  } finally {
    endBatch();
  }
}

function when(predicate, arg1, arg2) {
  if (arguments.length === 1 || arg1 && typeof arg1 === "object") {
    return whenPromise(predicate, arg1);
  }
  return _when(predicate, arg1, arg2 || {});
}
function _when(predicate, effect, opts) {
  var timeoutHandle;
  if (typeof opts.timeout === "number") {
    var error = new Error("WHEN_TIMEOUT");
    timeoutHandle = setTimeout(function () {
      if (!disposer[$mobx].isDisposed_) {
        disposer();
        if (opts.onError) {
          opts.onError(error);
        } else {
          throw error;
        }
      }
    }, opts.timeout);
  }
  opts.name =  true ? opts.name || "When@" + getNextId() : undefined;
  var effectAction = createAction( true ? opts.name + "-effect" : undefined, effect);
  // eslint-disable-next-line
  var disposer = autorun(function (r) {
    // predicate should not change state
    var cond = allowStateChanges(false, predicate);
    if (cond) {
      r.dispose();
      if (timeoutHandle) {
        clearTimeout(timeoutHandle);
      }
      effectAction();
    }
  }, opts);
  return disposer;
}
function whenPromise(predicate, opts) {
  var _opts$signal;
  if ( true && opts && opts.onError) {
    return die("the options 'onError' and 'promise' cannot be combined");
  }
  if (opts != null && (_opts$signal = opts.signal) != null && _opts$signal.aborted) {
    return Object.assign(Promise.reject(new Error("WHEN_ABORTED")), {
      cancel: function cancel() {
        return null;
      }
    });
  }
  var cancel;
  var abort;
  var res = new Promise(function (resolve, reject) {
    var _opts$signal2;
    var disposer = _when(predicate, resolve, _extends({}, opts, {
      onError: reject
    }));
    cancel = function cancel() {
      disposer();
      reject(new Error("WHEN_CANCELLED"));
    };
    abort = function abort() {
      disposer();
      reject(new Error("WHEN_ABORTED"));
    };
    opts == null ? void 0 : (_opts$signal2 = opts.signal) == null ? void 0 : _opts$signal2.addEventListener == null ? void 0 : _opts$signal2.addEventListener("abort", abort);
  })["finally"](function () {
    var _opts$signal3;
    return opts == null ? void 0 : (_opts$signal3 = opts.signal) == null ? void 0 : _opts$signal3.removeEventListener == null ? void 0 : _opts$signal3.removeEventListener("abort", abort);
  });
  res.cancel = cancel;
  return res;
}

function getAdm(target) {
  return target[$mobx];
}
// Optimization: we don't need the intermediate objects and could have a completely custom administration for DynamicObjects,
// and skip either the internal values map, or the base object with its property descriptors!
var objectProxyTraps = {
  has: function has(target, name) {
    if ( true && globalState.trackingDerivation) {
      warnAboutProxyRequirement("detect new properties using the 'in' operator. Use 'has' from 'mobx' instead.");
    }
    return getAdm(target).has_(name);
  },
  get: function get(target, name) {
    return getAdm(target).get_(name);
  },
  set: function set(target, name, value) {
    var _getAdm$set_;
    if (!isStringish(name)) {
      return false;
    }
    if ( true && !getAdm(target).values_.has(name)) {
      warnAboutProxyRequirement("add a new observable property through direct assignment. Use 'set' from 'mobx' instead.");
    }
    // null (intercepted) -> true (success)
    return (_getAdm$set_ = getAdm(target).set_(name, value, true)) != null ? _getAdm$set_ : true;
  },
  deleteProperty: function deleteProperty(target, name) {
    var _getAdm$delete_;
    if (true) {
      warnAboutProxyRequirement("delete properties from an observable object. Use 'remove' from 'mobx' instead.");
    }
    if (!isStringish(name)) {
      return false;
    }
    // null (intercepted) -> true (success)
    return (_getAdm$delete_ = getAdm(target).delete_(name, true)) != null ? _getAdm$delete_ : true;
  },
  defineProperty: function defineProperty(target, name, descriptor) {
    var _getAdm$definePropert;
    if (true) {
      warnAboutProxyRequirement("define property on an observable object. Use 'defineProperty' from 'mobx' instead.");
    }
    // null (intercepted) -> true (success)
    return (_getAdm$definePropert = getAdm(target).defineProperty_(name, descriptor)) != null ? _getAdm$definePropert : true;
  },
  ownKeys: function ownKeys(target) {
    if ( true && globalState.trackingDerivation) {
      warnAboutProxyRequirement("iterate keys to detect added / removed properties. Use 'keys' from 'mobx' instead.");
    }
    return getAdm(target).ownKeys_();
  },
  preventExtensions: function preventExtensions(target) {
    die(13);
  }
};
function asDynamicObservableObject(target, options) {
  var _target$$mobx, _target$$mobx$proxy_;
  assertProxies();
  target = asObservableObject(target, options);
  return (_target$$mobx$proxy_ = (_target$$mobx = target[$mobx]).proxy_) != null ? _target$$mobx$proxy_ : _target$$mobx.proxy_ = new Proxy(target, objectProxyTraps);
}

function hasInterceptors(interceptable) {
  return interceptable.interceptors_ !== undefined && interceptable.interceptors_.length > 0;
}
function registerInterceptor(interceptable, handler) {
  var interceptors = interceptable.interceptors_ || (interceptable.interceptors_ = []);
  interceptors.push(handler);
  return once(function () {
    var idx = interceptors.indexOf(handler);
    if (idx !== -1) {
      interceptors.splice(idx, 1);
    }
  });
}
function interceptChange(interceptable, change) {
  var prevU = untrackedStart();
  try {
    // Interceptor can modify the array, copy it to avoid concurrent modification, see #1950
    var interceptors = [].concat(interceptable.interceptors_ || []);
    for (var i = 0, l = interceptors.length; i < l; i++) {
      change = interceptors[i](change);
      if (change && !change.type) {
        die(14);
      }
      if (!change) {
        break;
      }
    }
    return change;
  } finally {
    untrackedEnd(prevU);
  }
}

function hasListeners(listenable) {
  return listenable.changeListeners_ !== undefined && listenable.changeListeners_.length > 0;
}
function registerListener(listenable, handler) {
  var listeners = listenable.changeListeners_ || (listenable.changeListeners_ = []);
  listeners.push(handler);
  return once(function () {
    var idx = listeners.indexOf(handler);
    if (idx !== -1) {
      listeners.splice(idx, 1);
    }
  });
}
function notifyListeners(listenable, change) {
  var prevU = untrackedStart();
  var listeners = listenable.changeListeners_;
  if (!listeners) {
    return;
  }
  listeners = listeners.slice();
  for (var i = 0, l = listeners.length; i < l; i++) {
    listeners[i](change);
  }
  untrackedEnd(prevU);
}

function makeObservable(target, annotations, options) {
  var adm = asObservableObject(target, options)[$mobx];
  startBatch();
  try {
    var _annotations;
    if ( true && annotations && target[storedAnnotationsSymbol]) {
      die("makeObservable second arg must be nullish when using decorators. Mixing @decorator syntax with annotations is not supported.");
    }
    // Default to decorators
    (_annotations = annotations) != null ? _annotations : annotations = collectStoredAnnotations(target);
    // Annotate
    ownKeys(annotations).forEach(function (key) {
      return adm.make_(key, annotations[key]);
    });
  } finally {
    endBatch();
  }
  return target;
}
// proto[keysSymbol] = new Set<PropertyKey>()
var keysSymbol = /*#__PURE__*/Symbol("mobx-keys");
function makeAutoObservable(target, overrides, options) {
  if (true) {
    if (!isPlainObject(target) && !isPlainObject(Object.getPrototypeOf(target))) {
      die("'makeAutoObservable' can only be used for classes that don't have a superclass");
    }
    if (isObservableObject(target)) {
      die("makeAutoObservable can only be used on objects not already made observable");
    }
  }
  // Optimization: avoid visiting protos
  // Assumes that annotation.make_/.extend_ works the same for plain objects
  if (isPlainObject(target)) {
    return extendObservable(target, target, overrides, options);
  }
  var adm = asObservableObject(target, options)[$mobx];
  // Optimization: cache keys on proto
  // Assumes makeAutoObservable can be called only once per object and can't be used in subclass
  if (!target[keysSymbol]) {
    var proto = Object.getPrototypeOf(target);
    var keys = new Set([].concat(ownKeys(target), ownKeys(proto)));
    keys["delete"]("constructor");
    keys["delete"]($mobx);
    addHiddenProp(proto, keysSymbol, keys);
  }
  startBatch();
  try {
    target[keysSymbol].forEach(function (key) {
      return adm.make_(key,
      // must pass "undefined" for { key: undefined }
      !overrides ? true : key in overrides ? overrides[key] : true);
    });
  } finally {
    endBatch();
  }
  return target;
}

var SPLICE = "splice";
var UPDATE = "update";
var MAX_SPLICE_SIZE = 10000; // See e.g. https://github.com/mobxjs/mobx/issues/859
var arrayTraps = {
  get: function get(target, name) {
    var adm = target[$mobx];
    if (name === $mobx) {
      return adm;
    }
    if (name === "length") {
      return adm.getArrayLength_();
    }
    if (typeof name === "string" && !isNaN(name)) {
      return adm.get_(parseInt(name));
    }
    if (hasProp(arrayExtensions, name)) {
      return arrayExtensions[name];
    }
    return target[name];
  },
  set: function set(target, name, value) {
    var adm = target[$mobx];
    if (name === "length") {
      adm.setArrayLength_(value);
    }
    if (typeof name === "symbol" || isNaN(name)) {
      target[name] = value;
    } else {
      // numeric string
      adm.set_(parseInt(name), value);
    }
    return true;
  },
  preventExtensions: function preventExtensions() {
    die(15);
  }
};
var ObservableArrayAdministration = /*#__PURE__*/function () {
  // this is the prop that gets proxied, so can't replace it!

  function ObservableArrayAdministration(name, enhancer, owned_, legacyMode_) {
    if (name === void 0) {
      name =  true ? "ObservableArray@" + getNextId() : undefined;
    }
    this.owned_ = void 0;
    this.legacyMode_ = void 0;
    this.atom_ = void 0;
    this.values_ = [];
    this.interceptors_ = void 0;
    this.changeListeners_ = void 0;
    this.enhancer_ = void 0;
    this.dehancer = void 0;
    this.proxy_ = void 0;
    this.lastKnownLength_ = 0;
    this.owned_ = owned_;
    this.legacyMode_ = legacyMode_;
    this.atom_ = new Atom(name);
    this.enhancer_ = function (newV, oldV) {
      return enhancer(newV, oldV,  true ? name + "[..]" : undefined);
    };
  }
  var _proto = ObservableArrayAdministration.prototype;
  _proto.dehanceValue_ = function dehanceValue_(value) {
    if (this.dehancer !== undefined) {
      return this.dehancer(value);
    }
    return value;
  };
  _proto.dehanceValues_ = function dehanceValues_(values) {
    if (this.dehancer !== undefined && values.length > 0) {
      return values.map(this.dehancer);
    }
    return values;
  };
  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };
  _proto.observe_ = function observe_(listener, fireImmediately) {
    if (fireImmediately === void 0) {
      fireImmediately = false;
    }
    if (fireImmediately) {
      listener({
        observableKind: "array",
        object: this.proxy_,
        debugObjectName: this.atom_.name_,
        type: "splice",
        index: 0,
        added: this.values_.slice(),
        addedCount: this.values_.length,
        removed: [],
        removedCount: 0
      });
    }
    return registerListener(this, listener);
  };
  _proto.getArrayLength_ = function getArrayLength_() {
    this.atom_.reportObserved();
    return this.values_.length;
  };
  _proto.setArrayLength_ = function setArrayLength_(newLength) {
    if (typeof newLength !== "number" || isNaN(newLength) || newLength < 0) {
      die("Out of range: " + newLength);
    }
    var currentLength = this.values_.length;
    if (newLength === currentLength) {
      return;
    } else if (newLength > currentLength) {
      var newItems = new Array(newLength - currentLength);
      for (var i = 0; i < newLength - currentLength; i++) {
        newItems[i] = undefined;
      } // No Array.fill everywhere...
      this.spliceWithArray_(currentLength, 0, newItems);
    } else {
      this.spliceWithArray_(newLength, currentLength - newLength);
    }
  };
  _proto.updateArrayLength_ = function updateArrayLength_(oldLength, delta) {
    if (oldLength !== this.lastKnownLength_) {
      die(16);
    }
    this.lastKnownLength_ += delta;
    if (this.legacyMode_ && delta > 0) {
      reserveArrayBuffer(oldLength + delta + 1);
    }
  };
  _proto.spliceWithArray_ = function spliceWithArray_(index, deleteCount, newItems) {
    var _this = this;
    checkIfStateModificationsAreAllowed(this.atom_);
    var length = this.values_.length;
    if (index === undefined) {
      index = 0;
    } else if (index > length) {
      index = length;
    } else if (index < 0) {
      index = Math.max(0, length + index);
    }
    if (arguments.length === 1) {
      deleteCount = length - index;
    } else if (deleteCount === undefined || deleteCount === null) {
      deleteCount = 0;
    } else {
      deleteCount = Math.max(0, Math.min(deleteCount, length - index));
    }
    if (newItems === undefined) {
      newItems = EMPTY_ARRAY;
    }
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        object: this.proxy_,
        type: SPLICE,
        index: index,
        removedCount: deleteCount,
        added: newItems
      });
      if (!change) {
        return EMPTY_ARRAY;
      }
      deleteCount = change.removedCount;
      newItems = change.added;
    }
    newItems = newItems.length === 0 ? newItems : newItems.map(function (v) {
      return _this.enhancer_(v, undefined);
    });
    if (this.legacyMode_ || "development" !== "production") {
      var lengthDelta = newItems.length - deleteCount;
      this.updateArrayLength_(length, lengthDelta); // checks if internal array wasn't modified
    }

    var res = this.spliceItemsIntoValues_(index, deleteCount, newItems);
    if (deleteCount !== 0 || newItems.length !== 0) {
      this.notifyArraySplice_(index, newItems, res);
    }
    return this.dehanceValues_(res);
  };
  _proto.spliceItemsIntoValues_ = function spliceItemsIntoValues_(index, deleteCount, newItems) {
    if (newItems.length < MAX_SPLICE_SIZE) {
      var _this$values_;
      return (_this$values_ = this.values_).splice.apply(_this$values_, [index, deleteCount].concat(newItems));
    } else {
      // The items removed by the splice
      var res = this.values_.slice(index, index + deleteCount);
      // The items that that should remain at the end of the array
      var oldItems = this.values_.slice(index + deleteCount);
      // New length is the previous length + addition count - deletion count
      this.values_.length += newItems.length - deleteCount;
      for (var i = 0; i < newItems.length; i++) {
        this.values_[index + i] = newItems[i];
      }
      for (var _i = 0; _i < oldItems.length; _i++) {
        this.values_[index + newItems.length + _i] = oldItems[_i];
      }
      return res;
    }
  };
  _proto.notifyArrayChildUpdate_ = function notifyArrayChildUpdate_(index, newValue, oldValue) {
    var notifySpy = !this.owned_ && isSpyEnabled();
    var notify = hasListeners(this);
    var change = notify || notifySpy ? {
      observableKind: "array",
      object: this.proxy_,
      type: UPDATE,
      debugObjectName: this.atom_.name_,
      index: index,
      newValue: newValue,
      oldValue: oldValue
    } : null;
    // The reason why this is on right hand side here (and not above), is this way the uglifier will drop it, but it won't
    // cause any runtime overhead in development mode without NODE_ENV set, unless spying is enabled
    if ( true && notifySpy) {
      spyReportStart(change);
    }
    this.atom_.reportChanged();
    if (notify) {
      notifyListeners(this, change);
    }
    if ( true && notifySpy) {
      spyReportEnd();
    }
  };
  _proto.notifyArraySplice_ = function notifyArraySplice_(index, added, removed) {
    var notifySpy = !this.owned_ && isSpyEnabled();
    var notify = hasListeners(this);
    var change = notify || notifySpy ? {
      observableKind: "array",
      object: this.proxy_,
      debugObjectName: this.atom_.name_,
      type: SPLICE,
      index: index,
      removed: removed,
      added: added,
      removedCount: removed.length,
      addedCount: added.length
    } : null;
    if ( true && notifySpy) {
      spyReportStart(change);
    }
    this.atom_.reportChanged();
    // conform: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe
    if (notify) {
      notifyListeners(this, change);
    }
    if ( true && notifySpy) {
      spyReportEnd();
    }
  };
  _proto.get_ = function get_(index) {
    if (this.legacyMode_ && index >= this.values_.length) {
      console.warn( true ? "[mobx.array] Attempt to read an array index (" + index + ") that is out of bounds (" + this.values_.length + "). Please check length first. Out of bound indices will not be tracked by MobX" : undefined);
      return undefined;
    }
    this.atom_.reportObserved();
    return this.dehanceValue_(this.values_[index]);
  };
  _proto.set_ = function set_(index, newValue) {
    var values = this.values_;
    if (this.legacyMode_ && index > values.length) {
      // out of bounds
      die(17, index, values.length);
    }
    if (index < values.length) {
      // update at index in range
      checkIfStateModificationsAreAllowed(this.atom_);
      var oldValue = values[index];
      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          type: UPDATE,
          object: this.proxy_,
          index: index,
          newValue: newValue
        });
        if (!change) {
          return;
        }
        newValue = change.newValue;
      }
      newValue = this.enhancer_(newValue, oldValue);
      var changed = newValue !== oldValue;
      if (changed) {
        values[index] = newValue;
        this.notifyArrayChildUpdate_(index, newValue, oldValue);
      }
    } else {
      // For out of bound index, we don't create an actual sparse array,
      // but rather fill the holes with undefined (same as setArrayLength_).
      // This could be considered a bug.
      var newItems = new Array(index + 1 - values.length);
      for (var i = 0; i < newItems.length - 1; i++) {
        newItems[i] = undefined;
      } // No Array.fill everywhere...
      newItems[newItems.length - 1] = newValue;
      this.spliceWithArray_(values.length, 0, newItems);
    }
  };
  return ObservableArrayAdministration;
}();
function createObservableArray(initialValues, enhancer, name, owned) {
  if (name === void 0) {
    name =  true ? "ObservableArray@" + getNextId() : undefined;
  }
  if (owned === void 0) {
    owned = false;
  }
  assertProxies();
  var adm = new ObservableArrayAdministration(name, enhancer, owned, false);
  addHiddenFinalProp(adm.values_, $mobx, adm);
  var proxy = new Proxy(adm.values_, arrayTraps);
  adm.proxy_ = proxy;
  if (initialValues && initialValues.length) {
    var prev = allowStateChangesStart(true);
    adm.spliceWithArray_(0, 0, initialValues);
    allowStateChangesEnd(prev);
  }
  return proxy;
}
// eslint-disable-next-line
var arrayExtensions = {
  clear: function clear() {
    return this.splice(0);
  },
  replace: function replace(newItems) {
    var adm = this[$mobx];
    return adm.spliceWithArray_(0, adm.values_.length, newItems);
  },
  // Used by JSON.stringify
  toJSON: function toJSON() {
    return this.slice();
  },
  /*
   * functions that do alter the internal structure of the array, (based on lib.es6.d.ts)
   * since these functions alter the inner structure of the array, the have side effects.
   * Because the have side effects, they should not be used in computed function,
   * and for that reason the do not call dependencyState.notifyObserved
   */
  splice: function splice(index, deleteCount) {
    for (var _len = arguments.length, newItems = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      newItems[_key - 2] = arguments[_key];
    }
    var adm = this[$mobx];
    switch (arguments.length) {
      case 0:
        return [];
      case 1:
        return adm.spliceWithArray_(index);
      case 2:
        return adm.spliceWithArray_(index, deleteCount);
    }
    return adm.spliceWithArray_(index, deleteCount, newItems);
  },
  spliceWithArray: function spliceWithArray(index, deleteCount, newItems) {
    return this[$mobx].spliceWithArray_(index, deleteCount, newItems);
  },
  push: function push() {
    var adm = this[$mobx];
    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      items[_key2] = arguments[_key2];
    }
    adm.spliceWithArray_(adm.values_.length, 0, items);
    return adm.values_.length;
  },
  pop: function pop() {
    return this.splice(Math.max(this[$mobx].values_.length - 1, 0), 1)[0];
  },
  shift: function shift() {
    return this.splice(0, 1)[0];
  },
  unshift: function unshift() {
    var adm = this[$mobx];
    for (var _len3 = arguments.length, items = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      items[_key3] = arguments[_key3];
    }
    adm.spliceWithArray_(0, 0, items);
    return adm.values_.length;
  },
  reverse: function reverse() {
    // reverse by default mutates in place before returning the result
    // which makes it both a 'derivation' and a 'mutation'.
    if (globalState.trackingDerivation) {
      die(37, "reverse");
    }
    this.replace(this.slice().reverse());
    return this;
  },
  sort: function sort() {
    // sort by default mutates in place before returning the result
    // which goes against all good practices. Let's not change the array in place!
    if (globalState.trackingDerivation) {
      die(37, "sort");
    }
    var copy = this.slice();
    copy.sort.apply(copy, arguments);
    this.replace(copy);
    return this;
  },
  remove: function remove(value) {
    var adm = this[$mobx];
    var idx = adm.dehanceValues_(adm.values_).indexOf(value);
    if (idx > -1) {
      this.splice(idx, 1);
      return true;
    }
    return false;
  }
};
/**
 * Wrap function from prototype
 * Without this, everything works as well, but this works
 * faster as everything works on unproxied values
 */
addArrayExtension("concat", simpleFunc);
addArrayExtension("flat", simpleFunc);
addArrayExtension("includes", simpleFunc);
addArrayExtension("indexOf", simpleFunc);
addArrayExtension("join", simpleFunc);
addArrayExtension("lastIndexOf", simpleFunc);
addArrayExtension("slice", simpleFunc);
addArrayExtension("toString", simpleFunc);
addArrayExtension("toLocaleString", simpleFunc);
// map
addArrayExtension("every", mapLikeFunc);
addArrayExtension("filter", mapLikeFunc);
addArrayExtension("find", mapLikeFunc);
addArrayExtension("findIndex", mapLikeFunc);
addArrayExtension("flatMap", mapLikeFunc);
addArrayExtension("forEach", mapLikeFunc);
addArrayExtension("map", mapLikeFunc);
addArrayExtension("some", mapLikeFunc);
// reduce
addArrayExtension("reduce", reduceLikeFunc);
addArrayExtension("reduceRight", reduceLikeFunc);
function addArrayExtension(funcName, funcFactory) {
  if (typeof Array.prototype[funcName] === "function") {
    arrayExtensions[funcName] = funcFactory(funcName);
  }
}
// Report and delegate to dehanced array
function simpleFunc(funcName) {
  return function () {
    var adm = this[$mobx];
    adm.atom_.reportObserved();
    var dehancedValues = adm.dehanceValues_(adm.values_);
    return dehancedValues[funcName].apply(dehancedValues, arguments);
  };
}
// Make sure callbacks recieve correct array arg #2326
function mapLikeFunc(funcName) {
  return function (callback, thisArg) {
    var _this2 = this;
    var adm = this[$mobx];
    adm.atom_.reportObserved();
    var dehancedValues = adm.dehanceValues_(adm.values_);
    return dehancedValues[funcName](function (element, index) {
      return callback.call(thisArg, element, index, _this2);
    });
  };
}
// Make sure callbacks recieve correct array arg #2326
function reduceLikeFunc(funcName) {
  return function () {
    var _this3 = this;
    var adm = this[$mobx];
    adm.atom_.reportObserved();
    var dehancedValues = adm.dehanceValues_(adm.values_);
    // #2432 - reduce behavior depends on arguments.length
    var callback = arguments[0];
    arguments[0] = function (accumulator, currentValue, index) {
      return callback(accumulator, currentValue, index, _this3);
    };
    return dehancedValues[funcName].apply(dehancedValues, arguments);
  };
}
var isObservableArrayAdministration = /*#__PURE__*/createInstanceofPredicate("ObservableArrayAdministration", ObservableArrayAdministration);
function isObservableArray(thing) {
  return isObject(thing) && isObservableArrayAdministration(thing[$mobx]);
}

var _Symbol$iterator, _Symbol$toStringTag;
var ObservableMapMarker = {};
var ADD = "add";
var DELETE = "delete";
// just extend Map? See also https://gist.github.com/nestharus/13b4d74f2ef4a2f4357dbd3fc23c1e54
// But: https://github.com/mobxjs/mobx/issues/1556
_Symbol$iterator = Symbol.iterator;
_Symbol$toStringTag = Symbol.toStringTag;
var ObservableMap = /*#__PURE__*/function () {
  // hasMap, not hashMap >-).

  function ObservableMap(initialData, enhancer_, name_) {
    var _this = this;
    if (enhancer_ === void 0) {
      enhancer_ = deepEnhancer;
    }
    if (name_ === void 0) {
      name_ =  true ? "ObservableMap@" + getNextId() : undefined;
    }
    this.enhancer_ = void 0;
    this.name_ = void 0;
    this[$mobx] = ObservableMapMarker;
    this.data_ = void 0;
    this.hasMap_ = void 0;
    this.keysAtom_ = void 0;
    this.interceptors_ = void 0;
    this.changeListeners_ = void 0;
    this.dehancer = void 0;
    this.enhancer_ = enhancer_;
    this.name_ = name_;
    if (!isFunction(Map)) {
      die(18);
    }
    this.keysAtom_ = createAtom( true ? this.name_ + ".keys()" : undefined);
    this.data_ = new Map();
    this.hasMap_ = new Map();
    allowStateChanges(true, function () {
      _this.merge(initialData);
    });
  }
  var _proto = ObservableMap.prototype;
  _proto.has_ = function has_(key) {
    return this.data_.has(key);
  };
  _proto.has = function has(key) {
    var _this2 = this;
    if (!globalState.trackingDerivation) {
      return this.has_(key);
    }
    var entry = this.hasMap_.get(key);
    if (!entry) {
      var newEntry = entry = new ObservableValue(this.has_(key), referenceEnhancer,  true ? this.name_ + "." + stringifyKey(key) + "?" : undefined, false);
      this.hasMap_.set(key, newEntry);
      onBecomeUnobserved(newEntry, function () {
        return _this2.hasMap_["delete"](key);
      });
    }
    return entry.get();
  };
  _proto.set = function set(key, value) {
    var hasKey = this.has_(key);
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: hasKey ? UPDATE : ADD,
        object: this,
        newValue: value,
        name: key
      });
      if (!change) {
        return this;
      }
      value = change.newValue;
    }
    if (hasKey) {
      this.updateValue_(key, value);
    } else {
      this.addValue_(key, value);
    }
    return this;
  };
  _proto["delete"] = function _delete(key) {
    var _this3 = this;
    checkIfStateModificationsAreAllowed(this.keysAtom_);
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: DELETE,
        object: this,
        name: key
      });
      if (!change) {
        return false;
      }
    }
    if (this.has_(key)) {
      var notifySpy = isSpyEnabled();
      var notify = hasListeners(this);
      var _change = notify || notifySpy ? {
        observableKind: "map",
        debugObjectName: this.name_,
        type: DELETE,
        object: this,
        oldValue: this.data_.get(key).value_,
        name: key
      } : null;
      if ( true && notifySpy) {
        spyReportStart(_change);
      } // TODO fix type
      transaction(function () {
        var _this3$hasMap_$get;
        _this3.keysAtom_.reportChanged();
        (_this3$hasMap_$get = _this3.hasMap_.get(key)) == null ? void 0 : _this3$hasMap_$get.setNewValue_(false);
        var observable = _this3.data_.get(key);
        observable.setNewValue_(undefined);
        _this3.data_["delete"](key);
      });
      if (notify) {
        notifyListeners(this, _change);
      }
      if ( true && notifySpy) {
        spyReportEnd();
      }
      return true;
    }
    return false;
  };
  _proto.updateValue_ = function updateValue_(key, newValue) {
    var observable = this.data_.get(key);
    newValue = observable.prepareNewValue_(newValue);
    if (newValue !== globalState.UNCHANGED) {
      var notifySpy = isSpyEnabled();
      var notify = hasListeners(this);
      var change = notify || notifySpy ? {
        observableKind: "map",
        debugObjectName: this.name_,
        type: UPDATE,
        object: this,
        oldValue: observable.value_,
        name: key,
        newValue: newValue
      } : null;
      if ( true && notifySpy) {
        spyReportStart(change);
      } // TODO fix type
      observable.setNewValue_(newValue);
      if (notify) {
        notifyListeners(this, change);
      }
      if ( true && notifySpy) {
        spyReportEnd();
      }
    }
  };
  _proto.addValue_ = function addValue_(key, newValue) {
    var _this4 = this;
    checkIfStateModificationsAreAllowed(this.keysAtom_);
    transaction(function () {
      var _this4$hasMap_$get;
      var observable = new ObservableValue(newValue, _this4.enhancer_,  true ? _this4.name_ + "." + stringifyKey(key) : undefined, false);
      _this4.data_.set(key, observable);
      newValue = observable.value_; // value might have been changed
      (_this4$hasMap_$get = _this4.hasMap_.get(key)) == null ? void 0 : _this4$hasMap_$get.setNewValue_(true);
      _this4.keysAtom_.reportChanged();
    });
    var notifySpy = isSpyEnabled();
    var notify = hasListeners(this);
    var change = notify || notifySpy ? {
      observableKind: "map",
      debugObjectName: this.name_,
      type: ADD,
      object: this,
      name: key,
      newValue: newValue
    } : null;
    if ( true && notifySpy) {
      spyReportStart(change);
    } // TODO fix type
    if (notify) {
      notifyListeners(this, change);
    }
    if ( true && notifySpy) {
      spyReportEnd();
    }
  };
  _proto.get = function get(key) {
    if (this.has(key)) {
      return this.dehanceValue_(this.data_.get(key).get());
    }
    return this.dehanceValue_(undefined);
  };
  _proto.dehanceValue_ = function dehanceValue_(value) {
    if (this.dehancer !== undefined) {
      return this.dehancer(value);
    }
    return value;
  };
  _proto.keys = function keys() {
    this.keysAtom_.reportObserved();
    return this.data_.keys();
  };
  _proto.values = function values() {
    var self = this;
    var keys = this.keys();
    return makeIterable({
      next: function next() {
        var _keys$next = keys.next(),
          done = _keys$next.done,
          value = _keys$next.value;
        return {
          done: done,
          value: done ? undefined : self.get(value)
        };
      }
    });
  };
  _proto.entries = function entries() {
    var self = this;
    var keys = this.keys();
    return makeIterable({
      next: function next() {
        var _keys$next2 = keys.next(),
          done = _keys$next2.done,
          value = _keys$next2.value;
        return {
          done: done,
          value: done ? undefined : [value, self.get(value)]
        };
      }
    });
  };
  _proto[_Symbol$iterator] = function () {
    return this.entries();
  };
  _proto.forEach = function forEach(callback, thisArg) {
    for (var _iterator = _createForOfIteratorHelperLoose(this), _step; !(_step = _iterator()).done;) {
      var _step$value = _step.value,
        key = _step$value[0],
        value = _step$value[1];
      callback.call(thisArg, value, key, this);
    }
  }
  /** Merge another object into this object, returns this. */;
  _proto.merge = function merge(other) {
    var _this5 = this;
    if (isObservableMap(other)) {
      other = new Map(other);
    }
    transaction(function () {
      if (isPlainObject(other)) {
        getPlainObjectKeys(other).forEach(function (key) {
          return _this5.set(key, other[key]);
        });
      } else if (Array.isArray(other)) {
        other.forEach(function (_ref) {
          var key = _ref[0],
            value = _ref[1];
          return _this5.set(key, value);
        });
      } else if (isES6Map(other)) {
        if (other.constructor !== Map) {
          die(19, other);
        }
        other.forEach(function (value, key) {
          return _this5.set(key, value);
        });
      } else if (other !== null && other !== undefined) {
        die(20, other);
      }
    });
    return this;
  };
  _proto.clear = function clear() {
    var _this6 = this;
    transaction(function () {
      untracked(function () {
        for (var _iterator2 = _createForOfIteratorHelperLoose(_this6.keys()), _step2; !(_step2 = _iterator2()).done;) {
          var key = _step2.value;
          _this6["delete"](key);
        }
      });
    });
  };
  _proto.replace = function replace(values) {
    var _this7 = this;
    // Implementation requirements:
    // - respect ordering of replacement map
    // - allow interceptors to run and potentially prevent individual operations
    // - don't recreate observables that already exist in original map (so we don't destroy existing subscriptions)
    // - don't _keysAtom.reportChanged if the keys of resulting map are indentical (order matters!)
    // - note that result map may differ from replacement map due to the interceptors
    transaction(function () {
      // Convert to map so we can do quick key lookups
      var replacementMap = convertToMap(values);
      var orderedData = new Map();
      // Used for optimization
      var keysReportChangedCalled = false;
      // Delete keys that don't exist in replacement map
      // if the key deletion is prevented by interceptor
      // add entry at the beginning of the result map
      for (var _iterator3 = _createForOfIteratorHelperLoose(_this7.data_.keys()), _step3; !(_step3 = _iterator3()).done;) {
        var key = _step3.value;
        // Concurrently iterating/deleting keys
        // iterator should handle this correctly
        if (!replacementMap.has(key)) {
          var deleted = _this7["delete"](key);
          // Was the key removed?
          if (deleted) {
            // _keysAtom.reportChanged() was already called
            keysReportChangedCalled = true;
          } else {
            // Delete prevented by interceptor
            var value = _this7.data_.get(key);
            orderedData.set(key, value);
          }
        }
      }
      // Merge entries
      for (var _iterator4 = _createForOfIteratorHelperLoose(replacementMap.entries()), _step4; !(_step4 = _iterator4()).done;) {
        var _step4$value = _step4.value,
          _key = _step4$value[0],
          _value = _step4$value[1];
        // We will want to know whether a new key is added
        var keyExisted = _this7.data_.has(_key);
        // Add or update value
        _this7.set(_key, _value);
        // The addition could have been prevent by interceptor
        if (_this7.data_.has(_key)) {
          // The update could have been prevented by interceptor
          // and also we want to preserve existing values
          // so use value from _data map (instead of replacement map)
          var _value2 = _this7.data_.get(_key);
          orderedData.set(_key, _value2);
          // Was a new key added?
          if (!keyExisted) {
            // _keysAtom.reportChanged() was already called
            keysReportChangedCalled = true;
          }
        }
      }
      // Check for possible key order change
      if (!keysReportChangedCalled) {
        if (_this7.data_.size !== orderedData.size) {
          // If size differs, keys are definitely modified
          _this7.keysAtom_.reportChanged();
        } else {
          var iter1 = _this7.data_.keys();
          var iter2 = orderedData.keys();
          var next1 = iter1.next();
          var next2 = iter2.next();
          while (!next1.done) {
            if (next1.value !== next2.value) {
              _this7.keysAtom_.reportChanged();
              break;
            }
            next1 = iter1.next();
            next2 = iter2.next();
          }
        }
      }
      // Use correctly ordered map
      _this7.data_ = orderedData;
    });
    return this;
  };
  _proto.toString = function toString() {
    return "[object ObservableMap]";
  };
  _proto.toJSON = function toJSON() {
    return Array.from(this);
  };
  /**
   * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
   * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
   * for callback details
   */
  _proto.observe_ = function observe_(listener, fireImmediately) {
    if ( true && fireImmediately === true) {
      die("`observe` doesn't support fireImmediately=true in combination with maps.");
    }
    return registerListener(this, listener);
  };
  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };
  _createClass(ObservableMap, [{
    key: "size",
    get: function get() {
      this.keysAtom_.reportObserved();
      return this.data_.size;
    }
  }, {
    key: _Symbol$toStringTag,
    get: function get() {
      return "Map";
    }
  }]);
  return ObservableMap;
}();
// eslint-disable-next-line
var isObservableMap = /*#__PURE__*/createInstanceofPredicate("ObservableMap", ObservableMap);
function convertToMap(dataStructure) {
  if (isES6Map(dataStructure) || isObservableMap(dataStructure)) {
    return dataStructure;
  } else if (Array.isArray(dataStructure)) {
    return new Map(dataStructure);
  } else if (isPlainObject(dataStructure)) {
    var map = new Map();
    for (var key in dataStructure) {
      map.set(key, dataStructure[key]);
    }
    return map;
  } else {
    return die(21, dataStructure);
  }
}

var _Symbol$iterator$1, _Symbol$toStringTag$1;
var ObservableSetMarker = {};
_Symbol$iterator$1 = Symbol.iterator;
_Symbol$toStringTag$1 = Symbol.toStringTag;
var ObservableSet = /*#__PURE__*/function () {
  function ObservableSet(initialData, enhancer, name_) {
    if (enhancer === void 0) {
      enhancer = deepEnhancer;
    }
    if (name_ === void 0) {
      name_ =  true ? "ObservableSet@" + getNextId() : undefined;
    }
    this.name_ = void 0;
    this[$mobx] = ObservableSetMarker;
    this.data_ = new Set();
    this.atom_ = void 0;
    this.changeListeners_ = void 0;
    this.interceptors_ = void 0;
    this.dehancer = void 0;
    this.enhancer_ = void 0;
    this.name_ = name_;
    if (!isFunction(Set)) {
      die(22);
    }
    this.atom_ = createAtom(this.name_);
    this.enhancer_ = function (newV, oldV) {
      return enhancer(newV, oldV, name_);
    };
    if (initialData) {
      this.replace(initialData);
    }
  }
  var _proto = ObservableSet.prototype;
  _proto.dehanceValue_ = function dehanceValue_(value) {
    if (this.dehancer !== undefined) {
      return this.dehancer(value);
    }
    return value;
  };
  _proto.clear = function clear() {
    var _this = this;
    transaction(function () {
      untracked(function () {
        for (var _iterator = _createForOfIteratorHelperLoose(_this.data_.values()), _step; !(_step = _iterator()).done;) {
          var value = _step.value;
          _this["delete"](value);
        }
      });
    });
  };
  _proto.forEach = function forEach(callbackFn, thisArg) {
    for (var _iterator2 = _createForOfIteratorHelperLoose(this), _step2; !(_step2 = _iterator2()).done;) {
      var value = _step2.value;
      callbackFn.call(thisArg, value, value, this);
    }
  };
  _proto.add = function add(value) {
    var _this2 = this;
    checkIfStateModificationsAreAllowed(this.atom_);
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: ADD,
        object: this,
        newValue: value
      });
      if (!change) {
        return this;
      }
      // ideally, value = change.value would be done here, so that values can be
      // changed by interceptor. Same applies for other Set and Map api's.
    }

    if (!this.has(value)) {
      transaction(function () {
        _this2.data_.add(_this2.enhancer_(value, undefined));
        _this2.atom_.reportChanged();
      });
      var notifySpy =  true && isSpyEnabled();
      var notify = hasListeners(this);
      var _change = notify || notifySpy ? {
        observableKind: "set",
        debugObjectName: this.name_,
        type: ADD,
        object: this,
        newValue: value
      } : null;
      if (notifySpy && "development" !== "production") {
        spyReportStart(_change);
      }
      if (notify) {
        notifyListeners(this, _change);
      }
      if (notifySpy && "development" !== "production") {
        spyReportEnd();
      }
    }
    return this;
  };
  _proto["delete"] = function _delete(value) {
    var _this3 = this;
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: DELETE,
        object: this,
        oldValue: value
      });
      if (!change) {
        return false;
      }
    }
    if (this.has(value)) {
      var notifySpy =  true && isSpyEnabled();
      var notify = hasListeners(this);
      var _change2 = notify || notifySpy ? {
        observableKind: "set",
        debugObjectName: this.name_,
        type: DELETE,
        object: this,
        oldValue: value
      } : null;
      if (notifySpy && "development" !== "production") {
        spyReportStart(_change2);
      }
      transaction(function () {
        _this3.atom_.reportChanged();
        _this3.data_["delete"](value);
      });
      if (notify) {
        notifyListeners(this, _change2);
      }
      if (notifySpy && "development" !== "production") {
        spyReportEnd();
      }
      return true;
    }
    return false;
  };
  _proto.has = function has(value) {
    this.atom_.reportObserved();
    return this.data_.has(this.dehanceValue_(value));
  };
  _proto.entries = function entries() {
    var nextIndex = 0;
    var keys = Array.from(this.keys());
    var values = Array.from(this.values());
    return makeIterable({
      next: function next() {
        var index = nextIndex;
        nextIndex += 1;
        return index < values.length ? {
          value: [keys[index], values[index]],
          done: false
        } : {
          done: true
        };
      }
    });
  };
  _proto.keys = function keys() {
    return this.values();
  };
  _proto.values = function values() {
    this.atom_.reportObserved();
    var self = this;
    var nextIndex = 0;
    var observableValues = Array.from(this.data_.values());
    return makeIterable({
      next: function next() {
        return nextIndex < observableValues.length ? {
          value: self.dehanceValue_(observableValues[nextIndex++]),
          done: false
        } : {
          done: true
        };
      }
    });
  };
  _proto.replace = function replace(other) {
    var _this4 = this;
    if (isObservableSet(other)) {
      other = new Set(other);
    }
    transaction(function () {
      if (Array.isArray(other)) {
        _this4.clear();
        other.forEach(function (value) {
          return _this4.add(value);
        });
      } else if (isES6Set(other)) {
        _this4.clear();
        other.forEach(function (value) {
          return _this4.add(value);
        });
      } else if (other !== null && other !== undefined) {
        die("Cannot initialize set from " + other);
      }
    });
    return this;
  };
  _proto.observe_ = function observe_(listener, fireImmediately) {
    // ... 'fireImmediately' could also be true?
    if ( true && fireImmediately === true) {
      die("`observe` doesn't support fireImmediately=true in combination with sets.");
    }
    return registerListener(this, listener);
  };
  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };
  _proto.toJSON = function toJSON() {
    return Array.from(this);
  };
  _proto.toString = function toString() {
    return "[object ObservableSet]";
  };
  _proto[_Symbol$iterator$1] = function () {
    return this.values();
  };
  _createClass(ObservableSet, [{
    key: "size",
    get: function get() {
      this.atom_.reportObserved();
      return this.data_.size;
    }
  }, {
    key: _Symbol$toStringTag$1,
    get: function get() {
      return "Set";
    }
  }]);
  return ObservableSet;
}();
// eslint-disable-next-line
var isObservableSet = /*#__PURE__*/createInstanceofPredicate("ObservableSet", ObservableSet);

var descriptorCache = /*#__PURE__*/Object.create(null);
var REMOVE = "remove";
var ObservableObjectAdministration = /*#__PURE__*/function () {
  function ObservableObjectAdministration(target_, values_, name_,
  // Used anytime annotation is not explicitely provided
  defaultAnnotation_) {
    if (values_ === void 0) {
      values_ = new Map();
    }
    if (defaultAnnotation_ === void 0) {
      defaultAnnotation_ = autoAnnotation;
    }
    this.target_ = void 0;
    this.values_ = void 0;
    this.name_ = void 0;
    this.defaultAnnotation_ = void 0;
    this.keysAtom_ = void 0;
    this.changeListeners_ = void 0;
    this.interceptors_ = void 0;
    this.proxy_ = void 0;
    this.isPlainObject_ = void 0;
    this.appliedAnnotations_ = void 0;
    this.pendingKeys_ = void 0;
    this.target_ = target_;
    this.values_ = values_;
    this.name_ = name_;
    this.defaultAnnotation_ = defaultAnnotation_;
    this.keysAtom_ = new Atom( true ? this.name_ + ".keys" : undefined);
    // Optimization: we use this frequently
    this.isPlainObject_ = isPlainObject(this.target_);
    if ( true && !isAnnotation(this.defaultAnnotation_)) {
      die("defaultAnnotation must be valid annotation");
    }
    if (true) {
      // Prepare structure for tracking which fields were already annotated
      this.appliedAnnotations_ = {};
    }
  }
  var _proto = ObservableObjectAdministration.prototype;
  _proto.getObservablePropValue_ = function getObservablePropValue_(key) {
    return this.values_.get(key).get();
  };
  _proto.setObservablePropValue_ = function setObservablePropValue_(key, newValue) {
    var observable = this.values_.get(key);
    if (observable instanceof ComputedValue) {
      observable.set(newValue);
      return true;
    }
    // intercept
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: UPDATE,
        object: this.proxy_ || this.target_,
        name: key,
        newValue: newValue
      });
      if (!change) {
        return null;
      }
      newValue = change.newValue;
    }
    newValue = observable.prepareNewValue_(newValue);
    // notify spy & observers
    if (newValue !== globalState.UNCHANGED) {
      var notify = hasListeners(this);
      var notifySpy =  true && isSpyEnabled();
      var _change = notify || notifySpy ? {
        type: UPDATE,
        observableKind: "object",
        debugObjectName: this.name_,
        object: this.proxy_ || this.target_,
        oldValue: observable.value_,
        name: key,
        newValue: newValue
      } : null;
      if ( true && notifySpy) {
        spyReportStart(_change);
      }
      observable.setNewValue_(newValue);
      if (notify) {
        notifyListeners(this, _change);
      }
      if ( true && notifySpy) {
        spyReportEnd();
      }
    }
    return true;
  };
  _proto.get_ = function get_(key) {
    if (globalState.trackingDerivation && !hasProp(this.target_, key)) {
      // Key doesn't exist yet, subscribe for it in case it's added later
      this.has_(key);
    }
    return this.target_[key];
  }
  /**
   * @param {PropertyKey} key
   * @param {any} value
   * @param {Annotation|boolean} annotation true - use default annotation, false - copy as is
   * @param {boolean} proxyTrap whether it's called from proxy trap
   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor
   */;
  _proto.set_ = function set_(key, value, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }
    // Don't use .has(key) - we care about own
    if (hasProp(this.target_, key)) {
      // Existing prop
      if (this.values_.has(key)) {
        // Observable (can be intercepted)
        return this.setObservablePropValue_(key, value);
      } else if (proxyTrap) {
        // Non-observable - proxy
        return Reflect.set(this.target_, key, value);
      } else {
        // Non-observable
        this.target_[key] = value;
        return true;
      }
    } else {
      // New prop
      return this.extend_(key, {
        value: value,
        enumerable: true,
        writable: true,
        configurable: true
      }, this.defaultAnnotation_, proxyTrap);
    }
  }
  // Trap for "in"
  ;
  _proto.has_ = function has_(key) {
    if (!globalState.trackingDerivation) {
      // Skip key subscription outside derivation
      return key in this.target_;
    }
    this.pendingKeys_ || (this.pendingKeys_ = new Map());
    var entry = this.pendingKeys_.get(key);
    if (!entry) {
      entry = new ObservableValue(key in this.target_, referenceEnhancer,  true ? this.name_ + "." + stringifyKey(key) + "?" : undefined, false);
      this.pendingKeys_.set(key, entry);
    }
    return entry.get();
  }
  /**
   * @param {PropertyKey} key
   * @param {Annotation|boolean} annotation true - use default annotation, false - ignore prop
   */;
  _proto.make_ = function make_(key, annotation) {
    if (annotation === true) {
      annotation = this.defaultAnnotation_;
    }
    if (annotation === false) {
      return;
    }
    assertAnnotable(this, annotation, key);
    if (!(key in this.target_)) {
      var _this$target_$storedA;
      // Throw on missing key, except for decorators:
      // Decorator annotations are collected from whole prototype chain.
      // When called from super() some props may not exist yet.
      // However we don't have to worry about missing prop,
      // because the decorator must have been applied to something.
      if ((_this$target_$storedA = this.target_[storedAnnotationsSymbol]) != null && _this$target_$storedA[key]) {
        return; // will be annotated by subclass constructor
      } else {
        die(1, annotation.annotationType_, this.name_ + "." + key.toString());
      }
    }
    var source = this.target_;
    while (source && source !== objectPrototype) {
      var descriptor = getDescriptor(source, key);
      if (descriptor) {
        var outcome = annotation.make_(this, key, descriptor, source);
        if (outcome === 0 /* Cancel */) {
          return;
        }
        if (outcome === 1 /* Break */) {
          break;
        }
      }
      source = Object.getPrototypeOf(source);
    }
    recordAnnotationApplied(this, annotation, key);
  }
  /**
   * @param {PropertyKey} key
   * @param {PropertyDescriptor} descriptor
   * @param {Annotation|boolean} annotation true - use default annotation, false - copy as is
   * @param {boolean} proxyTrap whether it's called from proxy trap
   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor
   */;
  _proto.extend_ = function extend_(key, descriptor, annotation, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }
    if (annotation === true) {
      annotation = this.defaultAnnotation_;
    }
    if (annotation === false) {
      return this.defineProperty_(key, descriptor, proxyTrap);
    }
    assertAnnotable(this, annotation, key);
    var outcome = annotation.extend_(this, key, descriptor, proxyTrap);
    if (outcome) {
      recordAnnotationApplied(this, annotation, key);
    }
    return outcome;
  }
  /**
   * @param {PropertyKey} key
   * @param {PropertyDescriptor} descriptor
   * @param {boolean} proxyTrap whether it's called from proxy trap
   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor
   */;
  _proto.defineProperty_ = function defineProperty_(key, descriptor, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }
    try {
      startBatch();
      // Delete
      var deleteOutcome = this.delete_(key);
      if (!deleteOutcome) {
        // Failure or intercepted
        return deleteOutcome;
      }
      // ADD interceptor
      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          object: this.proxy_ || this.target_,
          name: key,
          type: ADD,
          newValue: descriptor.value
        });
        if (!change) {
          return null;
        }
        var newValue = change.newValue;
        if (descriptor.value !== newValue) {
          descriptor = _extends({}, descriptor, {
            value: newValue
          });
        }
      }
      // Define
      if (proxyTrap) {
        if (!Reflect.defineProperty(this.target_, key, descriptor)) {
          return false;
        }
      } else {
        defineProperty(this.target_, key, descriptor);
      }
      // Notify
      this.notifyPropertyAddition_(key, descriptor.value);
    } finally {
      endBatch();
    }
    return true;
  }
  // If original descriptor becomes relevant, move this to annotation directly
  ;
  _proto.defineObservableProperty_ = function defineObservableProperty_(key, value, enhancer, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }
    try {
      startBatch();
      // Delete
      var deleteOutcome = this.delete_(key);
      if (!deleteOutcome) {
        // Failure or intercepted
        return deleteOutcome;
      }
      // ADD interceptor
      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          object: this.proxy_ || this.target_,
          name: key,
          type: ADD,
          newValue: value
        });
        if (!change) {
          return null;
        }
        value = change.newValue;
      }
      var cachedDescriptor = getCachedObservablePropDescriptor(key);
      var descriptor = {
        configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,
        enumerable: true,
        get: cachedDescriptor.get,
        set: cachedDescriptor.set
      };
      // Define
      if (proxyTrap) {
        if (!Reflect.defineProperty(this.target_, key, descriptor)) {
          return false;
        }
      } else {
        defineProperty(this.target_, key, descriptor);
      }
      var observable = new ObservableValue(value, enhancer,  true ? this.name_ + "." + key.toString() : undefined, false);
      this.values_.set(key, observable);
      // Notify (value possibly changed by ObservableValue)
      this.notifyPropertyAddition_(key, observable.value_);
    } finally {
      endBatch();
    }
    return true;
  }
  // If original descriptor becomes relevant, move this to annotation directly
  ;
  _proto.defineComputedProperty_ = function defineComputedProperty_(key, options, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }
    try {
      startBatch();
      // Delete
      var deleteOutcome = this.delete_(key);
      if (!deleteOutcome) {
        // Failure or intercepted
        return deleteOutcome;
      }
      // ADD interceptor
      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          object: this.proxy_ || this.target_,
          name: key,
          type: ADD,
          newValue: undefined
        });
        if (!change) {
          return null;
        }
      }
      options.name || (options.name =  true ? this.name_ + "." + key.toString() : undefined);
      options.context = this.proxy_ || this.target_;
      var cachedDescriptor = getCachedObservablePropDescriptor(key);
      var descriptor = {
        configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,
        enumerable: false,
        get: cachedDescriptor.get,
        set: cachedDescriptor.set
      };
      // Define
      if (proxyTrap) {
        if (!Reflect.defineProperty(this.target_, key, descriptor)) {
          return false;
        }
      } else {
        defineProperty(this.target_, key, descriptor);
      }
      this.values_.set(key, new ComputedValue(options));
      // Notify
      this.notifyPropertyAddition_(key, undefined);
    } finally {
      endBatch();
    }
    return true;
  }
  /**
   * @param {PropertyKey} key
   * @param {PropertyDescriptor} descriptor
   * @param {boolean} proxyTrap whether it's called from proxy trap
   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor
   */;
  _proto.delete_ = function delete_(key, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }
    // No such prop
    if (!hasProp(this.target_, key)) {
      return true;
    }
    // Intercept
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        object: this.proxy_ || this.target_,
        name: key,
        type: REMOVE
      });
      // Cancelled
      if (!change) {
        return null;
      }
    }
    // Delete
    try {
      var _this$pendingKeys_, _this$pendingKeys_$ge;
      startBatch();
      var notify = hasListeners(this);
      var notifySpy =  true && isSpyEnabled();
      var observable = this.values_.get(key);
      // Value needed for spies/listeners
      var value = undefined;
      // Optimization: don't pull the value unless we will need it
      if (!observable && (notify || notifySpy)) {
        var _getDescriptor;
        value = (_getDescriptor = getDescriptor(this.target_, key)) == null ? void 0 : _getDescriptor.value;
      }
      // delete prop (do first, may fail)
      if (proxyTrap) {
        if (!Reflect.deleteProperty(this.target_, key)) {
          return false;
        }
      } else {
        delete this.target_[key];
      }
      // Allow re-annotating this field
      if (true) {
        delete this.appliedAnnotations_[key];
      }
      // Clear observable
      if (observable) {
        this.values_["delete"](key);
        // for computed, value is undefined
        if (observable instanceof ObservableValue) {
          value = observable.value_;
        }
        // Notify: autorun(() => obj[key]), see #1796
        propagateChanged(observable);
      }
      // Notify "keys/entries/values" observers
      this.keysAtom_.reportChanged();
      // Notify "has" observers
      // "in" as it may still exist in proto
      (_this$pendingKeys_ = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_$ge = _this$pendingKeys_.get(key)) == null ? void 0 : _this$pendingKeys_$ge.set(key in this.target_);
      // Notify spies/listeners
      if (notify || notifySpy) {
        var _change2 = {
          type: REMOVE,
          observableKind: "object",
          object: this.proxy_ || this.target_,
          debugObjectName: this.name_,
          oldValue: value,
          name: key
        };
        if ( true && notifySpy) {
          spyReportStart(_change2);
        }
        if (notify) {
          notifyListeners(this, _change2);
        }
        if ( true && notifySpy) {
          spyReportEnd();
        }
      }
    } finally {
      endBatch();
    }
    return true;
  }
  /**
   * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
   * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
   * for callback details
   */;
  _proto.observe_ = function observe_(callback, fireImmediately) {
    if ( true && fireImmediately === true) {
      die("`observe` doesn't support the fire immediately property for observable objects.");
    }
    return registerListener(this, callback);
  };
  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };
  _proto.notifyPropertyAddition_ = function notifyPropertyAddition_(key, value) {
    var _this$pendingKeys_2, _this$pendingKeys_2$g;
    var notify = hasListeners(this);
    var notifySpy =  true && isSpyEnabled();
    if (notify || notifySpy) {
      var change = notify || notifySpy ? {
        type: ADD,
        observableKind: "object",
        debugObjectName: this.name_,
        object: this.proxy_ || this.target_,
        name: key,
        newValue: value
      } : null;
      if ( true && notifySpy) {
        spyReportStart(change);
      }
      if (notify) {
        notifyListeners(this, change);
      }
      if ( true && notifySpy) {
        spyReportEnd();
      }
    }
    (_this$pendingKeys_2 = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_2$g = _this$pendingKeys_2.get(key)) == null ? void 0 : _this$pendingKeys_2$g.set(true);
    // Notify "keys/entries/values" observers
    this.keysAtom_.reportChanged();
  };
  _proto.ownKeys_ = function ownKeys_() {
    this.keysAtom_.reportObserved();
    return ownKeys(this.target_);
  };
  _proto.keys_ = function keys_() {
    // Returns enumerable && own, but unfortunately keysAtom will report on ANY key change.
    // There is no way to distinguish between Object.keys(object) and Reflect.ownKeys(object) - both are handled by ownKeys trap.
    // We can either over-report in Object.keys(object) or under-report in Reflect.ownKeys(object)
    // We choose to over-report in Object.keys(object), because:
    // - typically it's used with simple data objects
    // - when symbolic/non-enumerable keys are relevant Reflect.ownKeys works as expected
    this.keysAtom_.reportObserved();
    return Object.keys(this.target_);
  };
  return ObservableObjectAdministration;
}();
function asObservableObject(target, options) {
  var _options$name;
  if ( true && options && isObservableObject(target)) {
    die("Options can't be provided for already observable objects.");
  }
  if (hasProp(target, $mobx)) {
    if ( true && !(getAdministration(target) instanceof ObservableObjectAdministration)) {
      die("Cannot convert '" + getDebugName(target) + "' into observable object:" + "\nThe target is already observable of different type." + "\nExtending builtins is not supported.");
    }
    return target;
  }
  if ( true && !Object.isExtensible(target)) {
    die("Cannot make the designated object observable; it is not extensible");
  }
  var name = (_options$name = options == null ? void 0 : options.name) != null ? _options$name :  true ? (isPlainObject(target) ? "ObservableObject" : target.constructor.name) + "@" + getNextId() : undefined;
  var adm = new ObservableObjectAdministration(target, new Map(), String(name), getAnnotationFromOptions(options));
  addHiddenProp(target, $mobx, adm);
  return target;
}
var isObservableObjectAdministration = /*#__PURE__*/createInstanceofPredicate("ObservableObjectAdministration", ObservableObjectAdministration);
function getCachedObservablePropDescriptor(key) {
  return descriptorCache[key] || (descriptorCache[key] = {
    get: function get() {
      return this[$mobx].getObservablePropValue_(key);
    },
    set: function set(value) {
      return this[$mobx].setObservablePropValue_(key, value);
    }
  });
}
function isObservableObject(thing) {
  if (isObject(thing)) {
    return isObservableObjectAdministration(thing[$mobx]);
  }
  return false;
}
function recordAnnotationApplied(adm, annotation, key) {
  var _adm$target_$storedAn;
  if (true) {
    adm.appliedAnnotations_[key] = annotation;
  }
  // Remove applied decorator annotation so we don't try to apply it again in subclass constructor
  (_adm$target_$storedAn = adm.target_[storedAnnotationsSymbol]) == null ? true : delete _adm$target_$storedAn[key];
}
function assertAnnotable(adm, annotation, key) {
  // Valid annotation
  if ( true && !isAnnotation(annotation)) {
    die("Cannot annotate '" + adm.name_ + "." + key.toString() + "': Invalid annotation.");
  }
  /*
  // Configurable, not sealed, not frozen
  // Possibly not needed, just a little better error then the one thrown by engine.
  // Cases where this would be useful the most (subclass field initializer) are not interceptable by this.
  if (__DEV__) {
      const configurable = getDescriptor(adm.target_, key)?.configurable
      const frozen = Object.isFrozen(adm.target_)
      const sealed = Object.isSealed(adm.target_)
      if (!configurable || frozen || sealed) {
          const fieldName = `${adm.name_}.${key.toString()}`
          const requestedAnnotationType = annotation.annotationType_
          let error = `Cannot apply '${requestedAnnotationType}' to '${fieldName}':`
          if (frozen) {
              error += `\nObject is frozen.`
          }
          if (sealed) {
              error += `\nObject is sealed.`
          }
          if (!configurable) {
              error += `\nproperty is not configurable.`
              // Mention only if caused by us to avoid confusion
              if (hasProp(adm.appliedAnnotations!, key)) {
                  error += `\nTo prevent accidental re-definition of a field by a subclass, `
                  error += `all annotated fields of non-plain objects (classes) are not configurable.`
              }
          }
          die(error)
      }
  }
  */
  // Not annotated
  if ( true && !isOverride(annotation) && hasProp(adm.appliedAnnotations_, key)) {
    var fieldName = adm.name_ + "." + key.toString();
    var currentAnnotationType = adm.appliedAnnotations_[key].annotationType_;
    var requestedAnnotationType = annotation.annotationType_;
    die("Cannot apply '" + requestedAnnotationType + "' to '" + fieldName + "':" + ("\nThe field is already annotated with '" + currentAnnotationType + "'.") + "\nRe-annotating fields is not allowed." + "\nUse 'override' annotation for methods overridden by subclass.");
  }
}

// Bug in safari 9.* (or iOS 9 safari mobile). See #364
var ENTRY_0 = /*#__PURE__*/createArrayEntryDescriptor(0);
/**
 * This array buffer contains two lists of properties, so that all arrays
 * can recycle their property definitions, which significantly improves performance of creating
 * properties on the fly.
 */
var OBSERVABLE_ARRAY_BUFFER_SIZE = 0;
// Typescript workaround to make sure ObservableArray extends Array
var StubArray = function StubArray() {};
function inherit(ctor, proto) {
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(ctor.prototype, proto);
  } else if (ctor.prototype.__proto__ !== undefined) {
    ctor.prototype.__proto__ = proto;
  } else {
    ctor.prototype = proto;
  }
}
inherit(StubArray, Array.prototype);
// Weex proto freeze protection was here,
// but it is unclear why the hack is need as MobX never changed the prototype
// anyway, so removed it in V6
var LegacyObservableArray = /*#__PURE__*/function (_StubArray, _Symbol$toStringTag, _Symbol$iterator) {
  _inheritsLoose(LegacyObservableArray, _StubArray);
  function LegacyObservableArray(initialValues, enhancer, name, owned) {
    var _this;
    if (name === void 0) {
      name =  true ? "ObservableArray@" + getNextId() : undefined;
    }
    if (owned === void 0) {
      owned = false;
    }
    _this = _StubArray.call(this) || this;
    var adm = new ObservableArrayAdministration(name, enhancer, owned, true);
    adm.proxy_ = _assertThisInitialized(_this);
    addHiddenFinalProp(_assertThisInitialized(_this), $mobx, adm);
    if (initialValues && initialValues.length) {
      var prev = allowStateChangesStart(true);
      // @ts-ignore
      _this.spliceWithArray(0, 0, initialValues);
      allowStateChangesEnd(prev);
    }
    {
      // Seems that Safari won't use numeric prototype setter untill any * numeric property is
      // defined on the instance. After that it works fine, even if this property is deleted.
      Object.defineProperty(_assertThisInitialized(_this), "0", ENTRY_0);
    }
    return _this;
  }
  var _proto = LegacyObservableArray.prototype;
  _proto.concat = function concat() {
    this[$mobx].atom_.reportObserved();
    for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {
      arrays[_key] = arguments[_key];
    }
    return Array.prototype.concat.apply(this.slice(),
    //@ts-ignore
    arrays.map(function (a) {
      return isObservableArray(a) ? a.slice() : a;
    }));
  };
  _proto[_Symbol$iterator] = function () {
    var self = this;
    var nextIndex = 0;
    return makeIterable({
      next: function next() {
        return nextIndex < self.length ? {
          value: self[nextIndex++],
          done: false
        } : {
          done: true,
          value: undefined
        };
      }
    });
  };
  _createClass(LegacyObservableArray, [{
    key: "length",
    get: function get() {
      return this[$mobx].getArrayLength_();
    },
    set: function set(newLength) {
      this[$mobx].setArrayLength_(newLength);
    }
  }, {
    key: _Symbol$toStringTag,
    get: function get() {
      return "Array";
    }
  }]);
  return LegacyObservableArray;
}(StubArray, Symbol.toStringTag, Symbol.iterator);
Object.entries(arrayExtensions).forEach(function (_ref) {
  var prop = _ref[0],
    fn = _ref[1];
  if (prop !== "concat") {
    addHiddenProp(LegacyObservableArray.prototype, prop, fn);
  }
});
function createArrayEntryDescriptor(index) {
  return {
    enumerable: false,
    configurable: true,
    get: function get() {
      return this[$mobx].get_(index);
    },
    set: function set(value) {
      this[$mobx].set_(index, value);
    }
  };
}
function createArrayBufferItem(index) {
  defineProperty(LegacyObservableArray.prototype, "" + index, createArrayEntryDescriptor(index));
}
function reserveArrayBuffer(max) {
  if (max > OBSERVABLE_ARRAY_BUFFER_SIZE) {
    for (var index = OBSERVABLE_ARRAY_BUFFER_SIZE; index < max + 100; index++) {
      createArrayBufferItem(index);
    }
    OBSERVABLE_ARRAY_BUFFER_SIZE = max;
  }
}
reserveArrayBuffer(1000);
function createLegacyArray(initialValues, enhancer, name) {
  return new LegacyObservableArray(initialValues, enhancer, name);
}

function getAtom(thing, property) {
  if (typeof thing === "object" && thing !== null) {
    if (isObservableArray(thing)) {
      if (property !== undefined) {
        die(23);
      }
      return thing[$mobx].atom_;
    }
    if (isObservableSet(thing)) {
      return thing.atom_;
    }
    if (isObservableMap(thing)) {
      if (property === undefined) {
        return thing.keysAtom_;
      }
      var observable = thing.data_.get(property) || thing.hasMap_.get(property);
      if (!observable) {
        die(25, property, getDebugName(thing));
      }
      return observable;
    }
    if (isObservableObject(thing)) {
      if (!property) {
        return die(26);
      }
      var _observable = thing[$mobx].values_.get(property);
      if (!_observable) {
        die(27, property, getDebugName(thing));
      }
      return _observable;
    }
    if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {
      return thing;
    }
  } else if (isFunction(thing)) {
    if (isReaction(thing[$mobx])) {
      // disposer function
      return thing[$mobx];
    }
  }
  die(28);
}
function getAdministration(thing, property) {
  if (!thing) {
    die(29);
  }
  if (property !== undefined) {
    return getAdministration(getAtom(thing, property));
  }
  if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {
    return thing;
  }
  if (isObservableMap(thing) || isObservableSet(thing)) {
    return thing;
  }
  if (thing[$mobx]) {
    return thing[$mobx];
  }
  die(24, thing);
}
function getDebugName(thing, property) {
  var named;
  if (property !== undefined) {
    named = getAtom(thing, property);
  } else if (isAction(thing)) {
    return thing.name;
  } else if (isObservableObject(thing) || isObservableMap(thing) || isObservableSet(thing)) {
    named = getAdministration(thing);
  } else {
    // valid for arrays as well
    named = getAtom(thing);
  }
  return named.name_;
}

var toString = objectPrototype.toString;
function deepEqual(a, b, depth) {
  if (depth === void 0) {
    depth = -1;
  }
  return eq(a, b, depth);
}
// Copied from https://github.com/jashkenas/underscore/blob/5c237a7c682fb68fd5378203f0bf22dce1624854/underscore.js#L1186-L1289
// Internal recursive comparison function for `isEqual`.
function eq(a, b, depth, aStack, bStack) {
  // Identical objects are equal. `0 === -0`, but they aren't identical.
  // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
  if (a === b) {
    return a !== 0 || 1 / a === 1 / b;
  }
  // `null` or `undefined` only equal to itself (strict comparison).
  if (a == null || b == null) {
    return false;
  }
  // `NaN`s are equivalent, but non-reflexive.
  if (a !== a) {
    return b !== b;
  }
  // Exhaust primitive checks
  var type = typeof a;
  if (type !== "function" && type !== "object" && typeof b != "object") {
    return false;
  }
  // Compare `[[Class]]` names.
  var className = toString.call(a);
  if (className !== toString.call(b)) {
    return false;
  }
  switch (className) {
    // Strings, numbers, regular expressions, dates, and booleans are compared by value.
    case "[object RegExp]":
    // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
    case "[object String]":
      // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
      // equivalent to `new String("5")`.
      return "" + a === "" + b;
    case "[object Number]":
      // `NaN`s are equivalent, but non-reflexive.
      // Object(NaN) is equivalent to NaN.
      if (+a !== +a) {
        return +b !== +b;
      }
      // An `egal` comparison is performed for other numeric values.
      return +a === 0 ? 1 / +a === 1 / b : +a === +b;
    case "[object Date]":
    case "[object Boolean]":
      // Coerce dates and booleans to numeric primitive values. Dates are compared by their
      // millisecond representations. Note that invalid dates with millisecond representations
      // of `NaN` are not equivalent.
      return +a === +b;
    case "[object Symbol]":
      return typeof Symbol !== "undefined" && Symbol.valueOf.call(a) === Symbol.valueOf.call(b);
    case "[object Map]":
    case "[object Set]":
      // Maps and Sets are unwrapped to arrays of entry-pairs, adding an incidental level.
      // Hide this extra level by increasing the depth.
      if (depth >= 0) {
        depth++;
      }
      break;
  }
  // Unwrap any wrapped objects.
  a = unwrap(a);
  b = unwrap(b);
  var areArrays = className === "[object Array]";
  if (!areArrays) {
    if (typeof a != "object" || typeof b != "object") {
      return false;
    }
    // Objects with different constructors are not equivalent, but `Object`s or `Array`s
    // from different frames are.
    var aCtor = a.constructor,
      bCtor = b.constructor;
    if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor && isFunction(bCtor) && bCtor instanceof bCtor) && "constructor" in a && "constructor" in b) {
      return false;
    }
  }
  if (depth === 0) {
    return false;
  } else if (depth < 0) {
    depth = -1;
  }
  // Assume equality for cyclic structures. The algorithm for detecting cyclic
  // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
  // Initializing stack of traversed objects.
  // It's done here since we only need them for objects and arrays comparison.
  aStack = aStack || [];
  bStack = bStack || [];
  var length = aStack.length;
  while (length--) {
    // Linear search. Performance is inversely proportional to the number of
    // unique nested structures.
    if (aStack[length] === a) {
      return bStack[length] === b;
    }
  }
  // Add the first object to the stack of traversed objects.
  aStack.push(a);
  bStack.push(b);
  // Recursively compare objects and arrays.
  if (areArrays) {
    // Compare array lengths to determine if a deep comparison is necessary.
    length = a.length;
    if (length !== b.length) {
      return false;
    }
    // Deep compare the contents, ignoring non-numeric properties.
    while (length--) {
      if (!eq(a[length], b[length], depth - 1, aStack, bStack)) {
        return false;
      }
    }
  } else {
    // Deep compare objects.
    var keys = Object.keys(a);
    var key;
    length = keys.length;
    // Ensure that both objects contain the same number of properties before comparing deep equality.
    if (Object.keys(b).length !== length) {
      return false;
    }
    while (length--) {
      // Deep compare each member
      key = keys[length];
      if (!(hasProp(b, key) && eq(a[key], b[key], depth - 1, aStack, bStack))) {
        return false;
      }
    }
  }
  // Remove the first object from the stack of traversed objects.
  aStack.pop();
  bStack.pop();
  return true;
}
function unwrap(a) {
  if (isObservableArray(a)) {
    return a.slice();
  }
  if (isES6Map(a) || isObservableMap(a)) {
    return Array.from(a.entries());
  }
  if (isES6Set(a) || isObservableSet(a)) {
    return Array.from(a.entries());
  }
  return a;
}

function makeIterable(iterator) {
  iterator[Symbol.iterator] = getSelf;
  return iterator;
}
function getSelf() {
  return this;
}

function isAnnotation(thing) {
  return (
    // Can be function
    thing instanceof Object && typeof thing.annotationType_ === "string" && isFunction(thing.make_) && isFunction(thing.extend_)
  );
}

/**
 * (c) Michel Weststrate 2015 - 2020
 * MIT Licensed
 *
 * Welcome to the mobx sources! To get a global overview of how MobX internally works,
 * this is a good place to start:
 * https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.xvbh6qd74
 *
 * Source folders:
 * ===============
 *
 * - api/     Most of the public static methods exposed by the module can be found here.
 * - core/    Implementation of the MobX algorithm; atoms, derivations, reactions, dependency trees, optimizations. Cool stuff can be found here.
 * - types/   All the magic that is need to have observable objects, arrays and values is in this folder. Including the modifiers like `asFlat`.
 * - utils/   Utility stuff.
 *
 */
["Symbol", "Map", "Set"].forEach(function (m) {
  var g = getGlobal();
  if (typeof g[m] === "undefined") {
    die("MobX requires global '" + m + "' to be available or polyfilled");
  }
});
if (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === "object") {
  // See: https://github.com/andykog/mobx-devtools/
  __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({
    spy: spy,
    extras: {
      getDebugName: getDebugName
    },
    $mobx: $mobx
  });
}


//# sourceMappingURL=mobx.esm.js.map

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/ssr-window/ssr-window.esm.js":
/*!***************************************************!*\
  !*** ./node_modules/ssr-window/ssr-window.esm.js ***!
  \***************************************************/
/*! exports provided: extend, getDocument, getWindow, ssrDocument, ssrWindow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extend", function() { return extend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDocument", function() { return getDocument; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getWindow", function() { return getWindow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ssrDocument", function() { return ssrDocument; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ssrWindow", function() { return ssrWindow; });
/**
 * SSR Window 3.0.0
 * Better handling for window object in SSR environment
 * https://github.com/nolimits4web/ssr-window
 *
 * Copyright 2020, Vladimir Kharlampidi
 *
 * Licensed under MIT
 *
 * Released on: November 9, 2020
 */
/* eslint-disable no-param-reassign */
function isObject(obj) {
    return (obj !== null &&
        typeof obj === 'object' &&
        'constructor' in obj &&
        obj.constructor === Object);
}
function extend(target, src) {
    if (target === void 0) { target = {}; }
    if (src === void 0) { src = {}; }
    Object.keys(src).forEach(function (key) {
        if (typeof target[key] === 'undefined')
            target[key] = src[key];
        else if (isObject(src[key]) &&
            isObject(target[key]) &&
            Object.keys(src[key]).length > 0) {
            extend(target[key], src[key]);
        }
    });
}

var ssrDocument = {
    body: {},
    addEventListener: function () { },
    removeEventListener: function () { },
    activeElement: {
        blur: function () { },
        nodeName: '',
    },
    querySelector: function () {
        return null;
    },
    querySelectorAll: function () {
        return [];
    },
    getElementById: function () {
        return null;
    },
    createEvent: function () {
        return {
            initEvent: function () { },
        };
    },
    createElement: function () {
        return {
            children: [],
            childNodes: [],
            style: {},
            setAttribute: function () { },
            getElementsByTagName: function () {
                return [];
            },
        };
    },
    createElementNS: function () {
        return {};
    },
    importNode: function () {
        return null;
    },
    location: {
        hash: '',
        host: '',
        hostname: '',
        href: '',
        origin: '',
        pathname: '',
        protocol: '',
        search: '',
    },
};
function getDocument() {
    var doc = typeof document !== 'undefined' ? document : {};
    extend(doc, ssrDocument);
    return doc;
}

var ssrWindow = {
    document: ssrDocument,
    navigator: {
        userAgent: '',
    },
    location: {
        hash: '',
        host: '',
        hostname: '',
        href: '',
        origin: '',
        pathname: '',
        protocol: '',
        search: '',
    },
    history: {
        replaceState: function () { },
        pushState: function () { },
        go: function () { },
        back: function () { },
    },
    CustomEvent: function CustomEvent() {
        return this;
    },
    addEventListener: function () { },
    removeEventListener: function () { },
    getComputedStyle: function () {
        return {
            getPropertyValue: function () {
                return '';
            },
        };
    },
    Image: function () { },
    Date: function () { },
    screen: {},
    setTimeout: function () { },
    clearTimeout: function () { },
    matchMedia: function () {
        return {};
    },
    requestAnimationFrame: function (callback) {
        if (typeof setTimeout === 'undefined') {
            callback();
            return null;
        }
        return setTimeout(callback, 0);
    },
    cancelAnimationFrame: function (id) {
        if (typeof setTimeout === 'undefined') {
            return;
        }
        clearTimeout(id);
    },
};
function getWindow() {
    var win = typeof window !== 'undefined' ? window : {};
    extend(win, ssrWindow);
    return win;
}




/***/ }),

/***/ "./node_modules/swiper/cjs/components/autoplay/autoplay.js":
/*!*****************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/autoplay/autoplay.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var _ssrWindow = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");

var _utils = __webpack_require__(/*! ../../utils/utils */ "./node_modules/swiper/cjs/utils/utils.js");

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var Autoplay = {
  run: function run() {
    var swiper = this;
    var $activeSlideEl = swiper.slides.eq(swiper.activeIndex);
    var delay = swiper.params.autoplay.delay;

    if ($activeSlideEl.attr('data-swiper-autoplay')) {
      delay = $activeSlideEl.attr('data-swiper-autoplay') || swiper.params.autoplay.delay;
    }

    clearTimeout(swiper.autoplay.timeout);
    swiper.autoplay.timeout = (0, _utils.nextTick)(function () {
      var autoplayResult;

      if (swiper.params.autoplay.reverseDirection) {
        if (swiper.params.loop) {
          swiper.loopFix();
          autoplayResult = swiper.slidePrev(swiper.params.speed, true, true);
          swiper.emit('autoplay');
        } else if (!swiper.isBeginning) {
          autoplayResult = swiper.slidePrev(swiper.params.speed, true, true);
          swiper.emit('autoplay');
        } else if (!swiper.params.autoplay.stopOnLastSlide) {
          autoplayResult = swiper.slideTo(swiper.slides.length - 1, swiper.params.speed, true, true);
          swiper.emit('autoplay');
        } else {
          swiper.autoplay.stop();
        }
      } else if (swiper.params.loop) {
        swiper.loopFix();
        autoplayResult = swiper.slideNext(swiper.params.speed, true, true);
        swiper.emit('autoplay');
      } else if (!swiper.isEnd) {
        autoplayResult = swiper.slideNext(swiper.params.speed, true, true);
        swiper.emit('autoplay');
      } else if (!swiper.params.autoplay.stopOnLastSlide) {
        autoplayResult = swiper.slideTo(0, swiper.params.speed, true, true);
        swiper.emit('autoplay');
      } else {
        swiper.autoplay.stop();
      }

      if (swiper.params.cssMode && swiper.autoplay.running) swiper.autoplay.run();else if (autoplayResult === false) {
        swiper.autoplay.run();
      }
    }, delay);
  },
  start: function start() {
    var swiper = this;
    if (typeof swiper.autoplay.timeout !== 'undefined') return false;
    if (swiper.autoplay.running) return false;
    swiper.autoplay.running = true;
    swiper.emit('autoplayStart');
    swiper.autoplay.run();
    return true;
  },
  stop: function stop() {
    var swiper = this;
    if (!swiper.autoplay.running) return false;
    if (typeof swiper.autoplay.timeout === 'undefined') return false;

    if (swiper.autoplay.timeout) {
      clearTimeout(swiper.autoplay.timeout);
      swiper.autoplay.timeout = undefined;
    }

    swiper.autoplay.running = false;
    swiper.emit('autoplayStop');
    return true;
  },
  pause: function pause(speed) {
    var swiper = this;
    if (!swiper.autoplay.running) return;
    if (swiper.autoplay.paused) return;
    if (swiper.autoplay.timeout) clearTimeout(swiper.autoplay.timeout);
    swiper.autoplay.paused = true;

    if (speed === 0 || !swiper.params.autoplay.waitForTransition) {
      swiper.autoplay.paused = false;
      swiper.autoplay.run();
    } else {
      ['transitionend', 'webkitTransitionEnd'].forEach(function (event) {
        swiper.$wrapperEl[0].addEventListener(event, swiper.autoplay.onTransitionEnd);
      });
    }
  },
  onVisibilityChange: function onVisibilityChange() {
    var swiper = this;
    var document = (0, _ssrWindow.getDocument)();

    if (document.visibilityState === 'hidden' && swiper.autoplay.running) {
      swiper.autoplay.pause();
    }

    if (document.visibilityState === 'visible' && swiper.autoplay.paused) {
      swiper.autoplay.run();
      swiper.autoplay.paused = false;
    }
  },
  onTransitionEnd: function onTransitionEnd(e) {
    var swiper = this;
    if (!swiper || swiper.destroyed || !swiper.$wrapperEl) return;
    if (e.target !== swiper.$wrapperEl[0]) return;
    ['transitionend', 'webkitTransitionEnd'].forEach(function (event) {
      swiper.$wrapperEl[0].removeEventListener(event, swiper.autoplay.onTransitionEnd);
    });
    swiper.autoplay.paused = false;

    if (!swiper.autoplay.running) {
      swiper.autoplay.stop();
    } else {
      swiper.autoplay.run();
    }
  },
  onMouseEnter: function onMouseEnter() {
    var swiper = this;

    if (swiper.params.autoplay.disableOnInteraction) {
      swiper.autoplay.stop();
    } else {
      swiper.autoplay.pause();
    }

    ['transitionend', 'webkitTransitionEnd'].forEach(function (event) {
      swiper.$wrapperEl[0].removeEventListener(event, swiper.autoplay.onTransitionEnd);
    });
  },
  onMouseLeave: function onMouseLeave() {
    var swiper = this;

    if (swiper.params.autoplay.disableOnInteraction) {
      return;
    }

    swiper.autoplay.paused = false;
    swiper.autoplay.run();
  },
  attachMouseEvents: function attachMouseEvents() {
    var swiper = this;

    if (swiper.params.autoplay.pauseOnMouseEnter) {
      swiper.$el.on('mouseenter', swiper.autoplay.onMouseEnter);
      swiper.$el.on('mouseleave', swiper.autoplay.onMouseLeave);
    }
  },
  detachMouseEvents: function detachMouseEvents() {
    var swiper = this;
    swiper.$el.off('mouseenter', swiper.autoplay.onMouseEnter);
    swiper.$el.off('mouseleave', swiper.autoplay.onMouseLeave);
  }
};
var _default = {
  name: 'autoplay',
  params: {
    autoplay: {
      enabled: false,
      delay: 3000,
      waitForTransition: true,
      disableOnInteraction: true,
      stopOnLastSlide: false,
      reverseDirection: false,
      pauseOnMouseEnter: false
    }
  },
  create: function create() {
    var swiper = this;
    (0, _utils.bindModuleMethods)(swiper, {
      autoplay: _extends({}, Autoplay, {
        running: false,
        paused: false
      })
    });
  },
  on: {
    init: function init(swiper) {
      if (swiper.params.autoplay.enabled) {
        swiper.autoplay.start();
        var document = (0, _ssrWindow.getDocument)();
        document.addEventListener('visibilitychange', swiper.autoplay.onVisibilityChange);
        swiper.autoplay.attachMouseEvents();
      }
    },
    beforeTransitionStart: function beforeTransitionStart(swiper, speed, internal) {
      if (swiper.autoplay.running) {
        if (internal || !swiper.params.autoplay.disableOnInteraction) {
          swiper.autoplay.pause(speed);
        } else {
          swiper.autoplay.stop();
        }
      }
    },
    sliderFirstMove: function sliderFirstMove(swiper) {
      if (swiper.autoplay.running) {
        if (swiper.params.autoplay.disableOnInteraction) {
          swiper.autoplay.stop();
        } else {
          swiper.autoplay.pause();
        }
      }
    },
    touchEnd: function touchEnd(swiper) {
      if (swiper.params.cssMode && swiper.autoplay.paused && !swiper.params.autoplay.disableOnInteraction) {
        swiper.autoplay.run();
      }
    },
    destroy: function destroy(swiper) {
      swiper.autoplay.detachMouseEvents();

      if (swiper.autoplay.running) {
        swiper.autoplay.stop();
      }

      var document = (0, _ssrWindow.getDocument)();
      document.removeEventListener('visibilitychange', swiper.autoplay.onVisibilityChange);
    }
  }
};
exports.default = _default;

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/breakpoints/getBreakpoint.js":
/*!******************************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/breakpoints/getBreakpoint.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = getBreakpoint;

var _ssrWindow = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");

function getBreakpoint(breakpoints, base, containerEl) {
  if (base === void 0) {
    base = 'window';
  }

  if (!breakpoints || base === 'container' && !containerEl) return undefined;
  var breakpoint = false;
  var window = (0, _ssrWindow.getWindow)();
  var currentHeight = base === 'window' ? window.innerHeight : containerEl.clientHeight;
  var points = Object.keys(breakpoints).map(function (point) {
    if (typeof point === 'string' && point.indexOf('@') === 0) {
      var minRatio = parseFloat(point.substr(1));
      var value = currentHeight * minRatio;
      return {
        value: value,
        point: point
      };
    }

    return {
      value: point,
      point: point
    };
  });
  points.sort(function (a, b) {
    return parseInt(a.value, 10) - parseInt(b.value, 10);
  });

  for (var i = 0; i < points.length; i += 1) {
    var _points$i = points[i],
        point = _points$i.point,
        value = _points$i.value;

    if (base === 'window') {
      if (window.matchMedia("(min-width: " + value + "px)").matches) {
        breakpoint = point;
      }
    } else if (value <= containerEl.clientWidth) {
      breakpoint = point;
    }
  }

  return breakpoint || 'max';
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/breakpoints/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/breakpoints/index.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var _setBreakpoint = _interopRequireDefault(__webpack_require__(/*! ./setBreakpoint */ "./node_modules/swiper/cjs/components/core/breakpoints/setBreakpoint.js"));

var _getBreakpoint = _interopRequireDefault(__webpack_require__(/*! ./getBreakpoint */ "./node_modules/swiper/cjs/components/core/breakpoints/getBreakpoint.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  setBreakpoint: _setBreakpoint.default,
  getBreakpoint: _getBreakpoint.default
};
exports.default = _default;

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/breakpoints/setBreakpoint.js":
/*!******************************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/breakpoints/setBreakpoint.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = setBreakpoint;

var _utils = __webpack_require__(/*! ../../../utils/utils */ "./node_modules/swiper/cjs/utils/utils.js");

function setBreakpoint() {
  var swiper = this;
  var activeIndex = swiper.activeIndex,
      initialized = swiper.initialized,
      _swiper$loopedSlides = swiper.loopedSlides,
      loopedSlides = _swiper$loopedSlides === void 0 ? 0 : _swiper$loopedSlides,
      params = swiper.params,
      $el = swiper.$el;
  var breakpoints = params.breakpoints;
  if (!breakpoints || breakpoints && Object.keys(breakpoints).length === 0) return; // Get breakpoint for window width and update parameters

  var breakpoint = swiper.getBreakpoint(breakpoints, swiper.params.breakpointsBase, swiper.el);
  if (!breakpoint || swiper.currentBreakpoint === breakpoint) return;
  var breakpointOnlyParams = breakpoint in breakpoints ? breakpoints[breakpoint] : undefined;

  if (breakpointOnlyParams) {
    ['slidesPerView', 'spaceBetween', 'slidesPerGroup', 'slidesPerGroupSkip', 'slidesPerColumn'].forEach(function (param) {
      var paramValue = breakpointOnlyParams[param];
      if (typeof paramValue === 'undefined') return;

      if (param === 'slidesPerView' && (paramValue === 'AUTO' || paramValue === 'auto')) {
        breakpointOnlyParams[param] = 'auto';
      } else if (param === 'slidesPerView') {
        breakpointOnlyParams[param] = parseFloat(paramValue);
      } else {
        breakpointOnlyParams[param] = parseInt(paramValue, 10);
      }
    });
  }

  var breakpointParams = breakpointOnlyParams || swiper.originalParams;
  var wasMultiRow = params.slidesPerColumn > 1;
  var isMultiRow = breakpointParams.slidesPerColumn > 1;
  var wasEnabled = params.enabled;

  if (wasMultiRow && !isMultiRow) {
    $el.removeClass(params.containerModifierClass + "multirow " + params.containerModifierClass + "multirow-column");
    swiper.emitContainerClasses();
  } else if (!wasMultiRow && isMultiRow) {
    $el.addClass(params.containerModifierClass + "multirow");

    if (breakpointParams.slidesPerColumnFill && breakpointParams.slidesPerColumnFill === 'column' || !breakpointParams.slidesPerColumnFill && params.slidesPerColumnFill === 'column') {
      $el.addClass(params.containerModifierClass + "multirow-column");
    }

    swiper.emitContainerClasses();
  }

  var directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;
  var needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);

  if (directionChanged && initialized) {
    swiper.changeDirection();
  }

  (0, _utils.extend)(swiper.params, breakpointParams);
  var isEnabled = swiper.params.enabled;
  (0, _utils.extend)(swiper, {
    allowTouchMove: swiper.params.allowTouchMove,
    allowSlideNext: swiper.params.allowSlideNext,
    allowSlidePrev: swiper.params.allowSlidePrev
  });

  if (wasEnabled && !isEnabled) {
    swiper.disable();
  } else if (!wasEnabled && isEnabled) {
    swiper.enable();
  }

  swiper.currentBreakpoint = breakpoint;
  swiper.emit('_beforeBreakpoint', breakpointParams);

  if (needsReLoop && initialized) {
    swiper.loopDestroy();
    swiper.loopCreate();
    swiper.updateSlides();
    swiper.slideTo(activeIndex - loopedSlides + swiper.loopedSlides, 0, false);
  }

  swiper.emit('breakpoint', breakpointParams);
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/check-overflow/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/check-overflow/index.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

function checkOverflow() {
  var swiper = this;
  var params = swiper.params;
  var wasLocked = swiper.isLocked;
  var lastSlidePosition = swiper.slides.length > 0 && params.slidesOffsetBefore + params.spaceBetween * (swiper.slides.length - 1) + swiper.slides[0].offsetWidth * swiper.slides.length;

  if (params.slidesOffsetBefore && params.slidesOffsetAfter && lastSlidePosition) {
    swiper.isLocked = lastSlidePosition <= swiper.size;
  } else {
    swiper.isLocked = swiper.snapGrid.length === 1;
  }

  swiper.allowSlideNext = !swiper.isLocked;
  swiper.allowSlidePrev = !swiper.isLocked; // events

  if (wasLocked !== swiper.isLocked) swiper.emit(swiper.isLocked ? 'lock' : 'unlock');

  if (wasLocked && wasLocked !== swiper.isLocked) {
    swiper.isEnd = false;
    if (swiper.navigation) swiper.navigation.update();
  }
}

var _default = {
  checkOverflow: checkOverflow
};
exports.default = _default;

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/classes/addClasses.js":
/*!***********************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/classes/addClasses.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = addClasses;

function prepareClasses(entries, prefix) {
  var resultClasses = [];
  entries.forEach(function (item) {
    if (typeof item === 'object') {
      Object.keys(item).forEach(function (classNames) {
        if (item[classNames]) {
          resultClasses.push(prefix + classNames);
        }
      });
    } else if (typeof item === 'string') {
      resultClasses.push(prefix + item);
    }
  });
  return resultClasses;
}

function addClasses() {
  var swiper = this;
  var classNames = swiper.classNames,
      params = swiper.params,
      rtl = swiper.rtl,
      $el = swiper.$el,
      device = swiper.device,
      support = swiper.support; // prettier-ignore

  var suffixes = prepareClasses(['initialized', params.direction, {
    'pointer-events': support.pointerEvents && !support.touch
  }, {
    'free-mode': params.freeMode
  }, {
    'autoheight': params.autoHeight
  }, {
    'rtl': rtl
  }, {
    'multirow': params.slidesPerColumn > 1
  }, {
    'multirow-column': params.slidesPerColumn > 1 && params.slidesPerColumnFill === 'column'
  }, {
    'android': device.android
  }, {
    'ios': device.ios
  }, {
    'css-mode': params.cssMode
  }], params.containerModifierClass);
  classNames.push.apply(classNames, suffixes);
  $el.addClass([].concat(classNames).join(' '));
  swiper.emitContainerClasses();
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/classes/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/classes/index.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var _addClasses = _interopRequireDefault(__webpack_require__(/*! ./addClasses */ "./node_modules/swiper/cjs/components/core/classes/addClasses.js"));

var _removeClasses = _interopRequireDefault(__webpack_require__(/*! ./removeClasses */ "./node_modules/swiper/cjs/components/core/classes/removeClasses.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  addClasses: _addClasses.default,
  removeClasses: _removeClasses.default
};
exports.default = _default;

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/classes/removeClasses.js":
/*!**************************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/classes/removeClasses.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = removeClasses;

function removeClasses() {
  var swiper = this;
  var $el = swiper.$el,
      classNames = swiper.classNames;
  $el.removeClass(classNames.join(' '));
  swiper.emitContainerClasses();
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/core-class.js":
/*!***************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/core-class.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var _ssrWindow = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");

var _dom = _interopRequireDefault(__webpack_require__(/*! ../../utils/dom */ "./node_modules/swiper/cjs/utils/dom.js"));

var _utils = __webpack_require__(/*! ../../utils/utils */ "./node_modules/swiper/cjs/utils/utils.js");

var _getSupport = __webpack_require__(/*! ../../utils/get-support */ "./node_modules/swiper/cjs/utils/get-support.js");

var _getDevice = __webpack_require__(/*! ../../utils/get-device */ "./node_modules/swiper/cjs/utils/get-device.js");

var _getBrowser = __webpack_require__(/*! ../../utils/get-browser */ "./node_modules/swiper/cjs/utils/get-browser.js");

var _resize = _interopRequireDefault(__webpack_require__(/*! ../../modules/resize/resize */ "./node_modules/swiper/cjs/modules/resize/resize.js"));

var _observer = _interopRequireDefault(__webpack_require__(/*! ../../modules/observer/observer */ "./node_modules/swiper/cjs/modules/observer/observer.js"));

var _modular = _interopRequireDefault(__webpack_require__(/*! ./modular */ "./node_modules/swiper/cjs/components/core/modular.js"));

var _eventsEmitter = _interopRequireDefault(__webpack_require__(/*! ./events-emitter */ "./node_modules/swiper/cjs/components/core/events-emitter.js"));

var _index = _interopRequireDefault(__webpack_require__(/*! ./update/index */ "./node_modules/swiper/cjs/components/core/update/index.js"));

var _index2 = _interopRequireDefault(__webpack_require__(/*! ./translate/index */ "./node_modules/swiper/cjs/components/core/translate/index.js"));

var _index3 = _interopRequireDefault(__webpack_require__(/*! ./transition/index */ "./node_modules/swiper/cjs/components/core/transition/index.js"));

var _index4 = _interopRequireDefault(__webpack_require__(/*! ./slide/index */ "./node_modules/swiper/cjs/components/core/slide/index.js"));

var _index5 = _interopRequireDefault(__webpack_require__(/*! ./loop/index */ "./node_modules/swiper/cjs/components/core/loop/index.js"));

var _index6 = _interopRequireDefault(__webpack_require__(/*! ./grab-cursor/index */ "./node_modules/swiper/cjs/components/core/grab-cursor/index.js"));

var _index7 = _interopRequireDefault(__webpack_require__(/*! ./manipulation/index */ "./node_modules/swiper/cjs/components/core/manipulation/index.js"));

var _index8 = _interopRequireDefault(__webpack_require__(/*! ./events/index */ "./node_modules/swiper/cjs/components/core/events/index.js"));

var _index9 = _interopRequireDefault(__webpack_require__(/*! ./breakpoints/index */ "./node_modules/swiper/cjs/components/core/breakpoints/index.js"));

var _index10 = _interopRequireDefault(__webpack_require__(/*! ./classes/index */ "./node_modules/swiper/cjs/components/core/classes/index.js"));

var _index11 = _interopRequireDefault(__webpack_require__(/*! ./images/index */ "./node_modules/swiper/cjs/components/core/images/index.js"));

var _index12 = _interopRequireDefault(__webpack_require__(/*! ./check-overflow/index */ "./node_modules/swiper/cjs/components/core/check-overflow/index.js"));

var _defaults = _interopRequireDefault(__webpack_require__(/*! ./defaults */ "./node_modules/swiper/cjs/components/core/defaults.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var prototypes = {
  modular: _modular.default,
  eventsEmitter: _eventsEmitter.default,
  update: _index.default,
  translate: _index2.default,
  transition: _index3.default,
  slide: _index4.default,
  loop: _index5.default,
  grabCursor: _index6.default,
  manipulation: _index7.default,
  events: _index8.default,
  breakpoints: _index9.default,
  checkOverflow: _index12.default,
  classes: _index10.default,
  images: _index11.default
};
var extendedDefaults = {};

var Swiper = /*#__PURE__*/function () {
  function Swiper() {
    var el;
    var params;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (args.length === 1 && args[0].constructor && Object.prototype.toString.call(args[0]).slice(8, -1) === 'Object') {
      params = args[0];
    } else {
      el = args[0];
      params = args[1];
    }

    if (!params) params = {};
    params = (0, _utils.extend)({}, params);
    if (el && !params.el) params.el = el;

    if (params.el && (0, _dom.default)(params.el).length > 1) {
      var swipers = [];
      (0, _dom.default)(params.el).each(function (containerEl) {
        var newParams = (0, _utils.extend)({}, params, {
          el: containerEl
        });
        swipers.push(new Swiper(newParams));
      });
      return swipers;
    } // Swiper Instance


    var swiper = this;
    swiper.__swiper__ = true;
    swiper.support = (0, _getSupport.getSupport)();
    swiper.device = (0, _getDevice.getDevice)({
      userAgent: params.userAgent
    });
    swiper.browser = (0, _getBrowser.getBrowser)();
    swiper.eventsListeners = {};
    swiper.eventsAnyListeners = [];

    if (typeof swiper.modules === 'undefined') {
      swiper.modules = {};
    }

    Object.keys(swiper.modules).forEach(function (moduleName) {
      var module = swiper.modules[moduleName];

      if (module.params) {
        var moduleParamName = Object.keys(module.params)[0];
        var moduleParams = module.params[moduleParamName];
        if (typeof moduleParams !== 'object' || moduleParams === null) return;

        if (['navigation', 'pagination', 'scrollbar'].indexOf(moduleParamName) >= 0 && params[moduleParamName] === true) {
          params[moduleParamName] = {
            auto: true
          };
        }

        if (!(moduleParamName in params && 'enabled' in moduleParams)) return;

        if (params[moduleParamName] === true) {
          params[moduleParamName] = {
            enabled: true
          };
        }

        if (typeof params[moduleParamName] === 'object' && !('enabled' in params[moduleParamName])) {
          params[moduleParamName].enabled = true;
        }

        if (!params[moduleParamName]) params[moduleParamName] = {
          enabled: false
        };
      }
    }); // Extend defaults with modules params

    var swiperParams = (0, _utils.extend)({}, _defaults.default);
    swiper.useParams(swiperParams); // Extend defaults with passed params

    swiper.params = (0, _utils.extend)({}, swiperParams, extendedDefaults, params);
    swiper.originalParams = (0, _utils.extend)({}, swiper.params);
    swiper.passedParams = (0, _utils.extend)({}, params); // add event listeners

    if (swiper.params && swiper.params.on) {
      Object.keys(swiper.params.on).forEach(function (eventName) {
        swiper.on(eventName, swiper.params.on[eventName]);
      });
    }

    if (swiper.params && swiper.params.onAny) {
      swiper.onAny(swiper.params.onAny);
    } // Save Dom lib


    swiper.$ = _dom.default; // Extend Swiper

    (0, _utils.extend)(swiper, {
      enabled: swiper.params.enabled,
      el: el,
      // Classes
      classNames: [],
      // Slides
      slides: (0, _dom.default)(),
      slidesGrid: [],
      snapGrid: [],
      slidesSizesGrid: [],
      // isDirection
      isHorizontal: function isHorizontal() {
        return swiper.params.direction === 'horizontal';
      },
      isVertical: function isVertical() {
        return swiper.params.direction === 'vertical';
      },
      // Indexes
      activeIndex: 0,
      realIndex: 0,
      //
      isBeginning: true,
      isEnd: false,
      // Props
      translate: 0,
      previousTranslate: 0,
      progress: 0,
      velocity: 0,
      animating: false,
      // Locks
      allowSlideNext: swiper.params.allowSlideNext,
      allowSlidePrev: swiper.params.allowSlidePrev,
      // Touch Events
      touchEvents: function touchEvents() {
        var touch = ['touchstart', 'touchmove', 'touchend', 'touchcancel'];
        var desktop = ['mousedown', 'mousemove', 'mouseup'];

        if (swiper.support.pointerEvents) {
          desktop = ['pointerdown', 'pointermove', 'pointerup'];
        }

        swiper.touchEventsTouch = {
          start: touch[0],
          move: touch[1],
          end: touch[2],
          cancel: touch[3]
        };
        swiper.touchEventsDesktop = {
          start: desktop[0],
          move: desktop[1],
          end: desktop[2]
        };
        return swiper.support.touch || !swiper.params.simulateTouch ? swiper.touchEventsTouch : swiper.touchEventsDesktop;
      }(),
      touchEventsData: {
        isTouched: undefined,
        isMoved: undefined,
        allowTouchCallbacks: undefined,
        touchStartTime: undefined,
        isScrolling: undefined,
        currentTranslate: undefined,
        startTranslate: undefined,
        allowThresholdMove: undefined,
        // Form elements to match
        focusableElements: swiper.params.focusableElements,
        // Last click time
        lastClickTime: (0, _utils.now)(),
        clickTimeout: undefined,
        // Velocities
        velocities: [],
        allowMomentumBounce: undefined,
        isTouchEvent: undefined,
        startMoving: undefined
      },
      // Clicks
      allowClick: true,
      // Touches
      allowTouchMove: swiper.params.allowTouchMove,
      touches: {
        startX: 0,
        startY: 0,
        currentX: 0,
        currentY: 0,
        diff: 0
      },
      // Images
      imagesToLoad: [],
      imagesLoaded: 0
    }); // Install Modules

    swiper.useModules();
    swiper.emit('_swiper'); // Init

    if (swiper.params.init) {
      swiper.init();
    } // Return app instance


    return swiper;
  }

  var _proto = Swiper.prototype;

  _proto.enable = function enable() {
    var swiper = this;
    if (swiper.enabled) return;
    swiper.enabled = true;

    if (swiper.params.grabCursor) {
      swiper.setGrabCursor();
    }

    swiper.emit('enable');
  };

  _proto.disable = function disable() {
    var swiper = this;
    if (!swiper.enabled) return;
    swiper.enabled = false;

    if (swiper.params.grabCursor) {
      swiper.unsetGrabCursor();
    }

    swiper.emit('disable');
  };

  _proto.setProgress = function setProgress(progress, speed) {
    var swiper = this;
    progress = Math.min(Math.max(progress, 0), 1);
    var min = swiper.minTranslate();
    var max = swiper.maxTranslate();
    var current = (max - min) * progress + min;
    swiper.translateTo(current, typeof speed === 'undefined' ? 0 : speed);
    swiper.updateActiveIndex();
    swiper.updateSlidesClasses();
  };

  _proto.emitContainerClasses = function emitContainerClasses() {
    var swiper = this;
    if (!swiper.params._emitClasses || !swiper.el) return;
    var classes = swiper.el.className.split(' ').filter(function (className) {
      return className.indexOf('swiper-container') === 0 || className.indexOf(swiper.params.containerModifierClass) === 0;
    });
    swiper.emit('_containerClasses', classes.join(' '));
  };

  _proto.getSlideClasses = function getSlideClasses(slideEl) {
    var swiper = this;
    return slideEl.className.split(' ').filter(function (className) {
      return className.indexOf('swiper-slide') === 0 || className.indexOf(swiper.params.slideClass) === 0;
    }).join(' ');
  };

  _proto.emitSlidesClasses = function emitSlidesClasses() {
    var swiper = this;
    if (!swiper.params._emitClasses || !swiper.el) return;
    var updates = [];
    swiper.slides.each(function (slideEl) {
      var classNames = swiper.getSlideClasses(slideEl);
      updates.push({
        slideEl: slideEl,
        classNames: classNames
      });
      swiper.emit('_slideClass', slideEl, classNames);
    });
    swiper.emit('_slideClasses', updates);
  };

  _proto.slidesPerViewDynamic = function slidesPerViewDynamic() {
    var swiper = this;
    var params = swiper.params,
        slides = swiper.slides,
        slidesGrid = swiper.slidesGrid,
        swiperSize = swiper.size,
        activeIndex = swiper.activeIndex;
    var spv = 1;

    if (params.centeredSlides) {
      var slideSize = slides[activeIndex].swiperSlideSize;
      var breakLoop;

      for (var i = activeIndex + 1; i < slides.length; i += 1) {
        if (slides[i] && !breakLoop) {
          slideSize += slides[i].swiperSlideSize;
          spv += 1;
          if (slideSize > swiperSize) breakLoop = true;
        }
      }

      for (var _i = activeIndex - 1; _i >= 0; _i -= 1) {
        if (slides[_i] && !breakLoop) {
          slideSize += slides[_i].swiperSlideSize;
          spv += 1;
          if (slideSize > swiperSize) breakLoop = true;
        }
      }
    } else {
      for (var _i2 = activeIndex + 1; _i2 < slides.length; _i2 += 1) {
        if (slidesGrid[_i2] - slidesGrid[activeIndex] < swiperSize) {
          spv += 1;
        }
      }
    }

    return spv;
  };

  _proto.update = function update() {
    var swiper = this;
    if (!swiper || swiper.destroyed) return;
    var snapGrid = swiper.snapGrid,
        params = swiper.params; // Breakpoints

    if (params.breakpoints) {
      swiper.setBreakpoint();
    }

    swiper.updateSize();
    swiper.updateSlides();
    swiper.updateProgress();
    swiper.updateSlidesClasses();

    function setTranslate() {
      var translateValue = swiper.rtlTranslate ? swiper.translate * -1 : swiper.translate;
      var newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());
      swiper.setTranslate(newTranslate);
      swiper.updateActiveIndex();
      swiper.updateSlidesClasses();
    }

    var translated;

    if (swiper.params.freeMode) {
      setTranslate();

      if (swiper.params.autoHeight) {
        swiper.updateAutoHeight();
      }
    } else {
      if ((swiper.params.slidesPerView === 'auto' || swiper.params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides) {
        translated = swiper.slideTo(swiper.slides.length - 1, 0, false, true);
      } else {
        translated = swiper.slideTo(swiper.activeIndex, 0, false, true);
      }

      if (!translated) {
        setTranslate();
      }
    }

    if (params.watchOverflow && snapGrid !== swiper.snapGrid) {
      swiper.checkOverflow();
    }

    swiper.emit('update');
  };

  _proto.changeDirection = function changeDirection(newDirection, needUpdate) {
    if (needUpdate === void 0) {
      needUpdate = true;
    }

    var swiper = this;
    var currentDirection = swiper.params.direction;

    if (!newDirection) {
      // eslint-disable-next-line
      newDirection = currentDirection === 'horizontal' ? 'vertical' : 'horizontal';
    }

    if (newDirection === currentDirection || newDirection !== 'horizontal' && newDirection !== 'vertical') {
      return swiper;
    }

    swiper.$el.removeClass("" + swiper.params.containerModifierClass + currentDirection).addClass("" + swiper.params.containerModifierClass + newDirection);
    swiper.emitContainerClasses();
    swiper.params.direction = newDirection;
    swiper.slides.each(function (slideEl) {
      if (newDirection === 'vertical') {
        slideEl.style.width = '';
      } else {
        slideEl.style.height = '';
      }
    });
    swiper.emit('changeDirection');
    if (needUpdate) swiper.update();
    return swiper;
  };

  _proto.mount = function mount(el) {
    var swiper = this;
    if (swiper.mounted) return true; // Find el

    var $el = (0, _dom.default)(el || swiper.params.el);
    el = $el[0];

    if (!el) {
      return false;
    }

    el.swiper = swiper;

    var getWrapperSelector = function getWrapperSelector() {
      return "." + (swiper.params.wrapperClass || '').trim().split(' ').join('.');
    };

    var getWrapper = function getWrapper() {
      if (el && el.shadowRoot && el.shadowRoot.querySelector) {
        var res = (0, _dom.default)(el.shadowRoot.querySelector(getWrapperSelector())); // Children needs to return slot items

        res.children = function (options) {
          return $el.children(options);
        };

        return res;
      }

      return $el.children(getWrapperSelector());
    }; // Find Wrapper


    var $wrapperEl = getWrapper();

    if ($wrapperEl.length === 0 && swiper.params.createElements) {
      var document = (0, _ssrWindow.getDocument)();
      var wrapper = document.createElement('div');
      $wrapperEl = (0, _dom.default)(wrapper);
      wrapper.className = swiper.params.wrapperClass;
      $el.append(wrapper);
      $el.children("." + swiper.params.slideClass).each(function (slideEl) {
        $wrapperEl.append(slideEl);
      });
    }

    (0, _utils.extend)(swiper, {
      $el: $el,
      el: el,
      $wrapperEl: $wrapperEl,
      wrapperEl: $wrapperEl[0],
      mounted: true,
      // RTL
      rtl: el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl',
      rtlTranslate: swiper.params.direction === 'horizontal' && (el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl'),
      wrongRTL: $wrapperEl.css('display') === '-webkit-box'
    });
    return true;
  };

  _proto.init = function init(el) {
    var swiper = this;
    if (swiper.initialized) return swiper;
    var mounted = swiper.mount(el);
    if (mounted === false) return swiper;
    swiper.emit('beforeInit'); // Set breakpoint

    if (swiper.params.breakpoints) {
      swiper.setBreakpoint();
    } // Add Classes


    swiper.addClasses(); // Create loop

    if (swiper.params.loop) {
      swiper.loopCreate();
    } // Update size


    swiper.updateSize(); // Update slides

    swiper.updateSlides();

    if (swiper.params.watchOverflow) {
      swiper.checkOverflow();
    } // Set Grab Cursor


    if (swiper.params.grabCursor && swiper.enabled) {
      swiper.setGrabCursor();
    }

    if (swiper.params.preloadImages) {
      swiper.preloadImages();
    } // Slide To Initial Slide


    if (swiper.params.loop) {
      swiper.slideTo(swiper.params.initialSlide + swiper.loopedSlides, 0, swiper.params.runCallbacksOnInit, false, true);
    } else {
      swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit, false, true);
    } // Attach events


    swiper.attachEvents(); // Init Flag

    swiper.initialized = true; // Emit

    swiper.emit('init');
    swiper.emit('afterInit');
    return swiper;
  };

  _proto.destroy = function destroy(deleteInstance, cleanStyles) {
    if (deleteInstance === void 0) {
      deleteInstance = true;
    }

    if (cleanStyles === void 0) {
      cleanStyles = true;
    }

    var swiper = this;
    var params = swiper.params,
        $el = swiper.$el,
        $wrapperEl = swiper.$wrapperEl,
        slides = swiper.slides;

    if (typeof swiper.params === 'undefined' || swiper.destroyed) {
      return null;
    }

    swiper.emit('beforeDestroy'); // Init Flag

    swiper.initialized = false; // Detach events

    swiper.detachEvents(); // Destroy loop

    if (params.loop) {
      swiper.loopDestroy();
    } // Cleanup styles


    if (cleanStyles) {
      swiper.removeClasses();
      $el.removeAttr('style');
      $wrapperEl.removeAttr('style');

      if (slides && slides.length) {
        slides.removeClass([params.slideVisibleClass, params.slideActiveClass, params.slideNextClass, params.slidePrevClass].join(' ')).removeAttr('style').removeAttr('data-swiper-slide-index');
      }
    }

    swiper.emit('destroy'); // Detach emitter events

    Object.keys(swiper.eventsListeners).forEach(function (eventName) {
      swiper.off(eventName);
    });

    if (deleteInstance !== false) {
      swiper.$el[0].swiper = null;
      (0, _utils.deleteProps)(swiper);
    }

    swiper.destroyed = true;
    return null;
  };

  Swiper.extendDefaults = function extendDefaults(newDefaults) {
    (0, _utils.extend)(extendedDefaults, newDefaults);
  };

  Swiper.installModule = function installModule(module) {
    if (!Swiper.prototype.modules) Swiper.prototype.modules = {};
    var name = module.name || Object.keys(Swiper.prototype.modules).length + "_" + (0, _utils.now)();
    Swiper.prototype.modules[name] = module;
  };

  Swiper.use = function use(module) {
    if (Array.isArray(module)) {
      module.forEach(function (m) {
        return Swiper.installModule(m);
      });
      return Swiper;
    }

    Swiper.installModule(module);
    return Swiper;
  };

  _createClass(Swiper, null, [{
    key: "extendedDefaults",
    get: function get() {
      return extendedDefaults;
    }
  }, {
    key: "defaults",
    get: function get() {
      return _defaults.default;
    }
  }]);

  return Swiper;
}();

Object.keys(prototypes).forEach(function (prototypeGroup) {
  Object.keys(prototypes[prototypeGroup]).forEach(function (protoMethod) {
    Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];
  });
});
Swiper.use([_resize.default, _observer.default]);
var _default = Swiper;
exports.default = _default;

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/defaults.js":
/*!*************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/defaults.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;
var _default = {
  init: true,
  direction: 'horizontal',
  touchEventsTarget: 'container',
  initialSlide: 0,
  speed: 300,
  cssMode: false,
  updateOnWindowResize: true,
  resizeObserver: false,
  nested: false,
  createElements: false,
  enabled: true,
  focusableElements: 'input, select, option, textarea, button, video, label',
  // Overrides
  width: null,
  height: null,
  //
  preventInteractionOnTransition: false,
  // ssr
  userAgent: null,
  url: null,
  // To support iOS's swipe-to-go-back gesture (when being used in-app).
  edgeSwipeDetection: false,
  edgeSwipeThreshold: 20,
  // Free mode
  freeMode: false,
  freeModeMomentum: true,
  freeModeMomentumRatio: 1,
  freeModeMomentumBounce: true,
  freeModeMomentumBounceRatio: 1,
  freeModeMomentumVelocityRatio: 1,
  freeModeSticky: false,
  freeModeMinimumVelocity: 0.02,
  // Autoheight
  autoHeight: false,
  // Set wrapper width
  setWrapperSize: false,
  // Virtual Translate
  virtualTranslate: false,
  // Effects
  effect: 'slide',
  // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'
  // Breakpoints
  breakpoints: undefined,
  breakpointsBase: 'window',
  // Slides grid
  spaceBetween: 0,
  slidesPerView: 1,
  slidesPerColumn: 1,
  slidesPerColumnFill: 'column',
  slidesPerGroup: 1,
  slidesPerGroupSkip: 0,
  centeredSlides: false,
  centeredSlidesBounds: false,
  slidesOffsetBefore: 0,
  // in px
  slidesOffsetAfter: 0,
  // in px
  normalizeSlideIndex: true,
  centerInsufficientSlides: false,
  // Disable swiper and hide navigation when container not overflow
  watchOverflow: false,
  // Round length
  roundLengths: false,
  // Touches
  touchRatio: 1,
  touchAngle: 45,
  simulateTouch: true,
  shortSwipes: true,
  longSwipes: true,
  longSwipesRatio: 0.5,
  longSwipesMs: 300,
  followFinger: true,
  allowTouchMove: true,
  threshold: 0,
  touchMoveStopPropagation: false,
  touchStartPreventDefault: true,
  touchStartForcePreventDefault: false,
  touchReleaseOnEdges: false,
  // Unique Navigation Elements
  uniqueNavElements: true,
  // Resistance
  resistance: true,
  resistanceRatio: 0.85,
  // Progress
  watchSlidesProgress: false,
  watchSlidesVisibility: false,
  // Cursor
  grabCursor: false,
  // Clicks
  preventClicks: true,
  preventClicksPropagation: true,
  slideToClickedSlide: false,
  // Images
  preloadImages: true,
  updateOnImagesReady: true,
  // loop
  loop: false,
  loopAdditionalSlides: 0,
  loopedSlides: null,
  loopFillGroupWithBlank: false,
  loopPreventsSlide: true,
  // Swiping/no swiping
  allowSlidePrev: true,
  allowSlideNext: true,
  swipeHandler: null,
  // '.swipe-handler',
  noSwiping: true,
  noSwipingClass: 'swiper-no-swiping',
  noSwipingSelector: null,
  // Passive Listeners
  passiveListeners: true,
  // NS
  containerModifierClass: 'swiper-container-',
  // NEW
  slideClass: 'swiper-slide',
  slideBlankClass: 'swiper-slide-invisible-blank',
  slideActiveClass: 'swiper-slide-active',
  slideDuplicateActiveClass: 'swiper-slide-duplicate-active',
  slideVisibleClass: 'swiper-slide-visible',
  slideDuplicateClass: 'swiper-slide-duplicate',
  slideNextClass: 'swiper-slide-next',
  slideDuplicateNextClass: 'swiper-slide-duplicate-next',
  slidePrevClass: 'swiper-slide-prev',
  slideDuplicatePrevClass: 'swiper-slide-duplicate-prev',
  wrapperClass: 'swiper-wrapper',
  // Callbacks
  runCallbacksOnInit: true,
  // Internals
  _emitClasses: false
};
exports.default = _default;

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/events-emitter.js":
/*!*******************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/events-emitter.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

/* eslint-disable no-underscore-dangle */
var _default = {
  on: function on(events, handler, priority) {
    var self = this;
    if (typeof handler !== 'function') return self;
    var method = priority ? 'unshift' : 'push';
    events.split(' ').forEach(function (event) {
      if (!self.eventsListeners[event]) self.eventsListeners[event] = [];
      self.eventsListeners[event][method](handler);
    });
    return self;
  },
  once: function once(events, handler, priority) {
    var self = this;
    if (typeof handler !== 'function') return self;

    function onceHandler() {
      self.off(events, onceHandler);

      if (onceHandler.__emitterProxy) {
        delete onceHandler.__emitterProxy;
      }

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      handler.apply(self, args);
    }

    onceHandler.__emitterProxy = handler;
    return self.on(events, onceHandler, priority);
  },
  onAny: function onAny(handler, priority) {
    var self = this;
    if (typeof handler !== 'function') return self;
    var method = priority ? 'unshift' : 'push';

    if (self.eventsAnyListeners.indexOf(handler) < 0) {
      self.eventsAnyListeners[method](handler);
    }

    return self;
  },
  offAny: function offAny(handler) {
    var self = this;
    if (!self.eventsAnyListeners) return self;
    var index = self.eventsAnyListeners.indexOf(handler);

    if (index >= 0) {
      self.eventsAnyListeners.splice(index, 1);
    }

    return self;
  },
  off: function off(events, handler) {
    var self = this;
    if (!self.eventsListeners) return self;
    events.split(' ').forEach(function (event) {
      if (typeof handler === 'undefined') {
        self.eventsListeners[event] = [];
      } else if (self.eventsListeners[event]) {
        self.eventsListeners[event].forEach(function (eventHandler, index) {
          if (eventHandler === handler || eventHandler.__emitterProxy && eventHandler.__emitterProxy === handler) {
            self.eventsListeners[event].splice(index, 1);
          }
        });
      }
    });
    return self;
  },
  emit: function emit() {
    var self = this;
    if (!self.eventsListeners) return self;
    var events;
    var data;
    var context;

    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    if (typeof args[0] === 'string' || Array.isArray(args[0])) {
      events = args[0];
      data = args.slice(1, args.length);
      context = self;
    } else {
      events = args[0].events;
      data = args[0].data;
      context = args[0].context || self;
    }

    data.unshift(context);
    var eventsArray = Array.isArray(events) ? events : events.split(' ');
    eventsArray.forEach(function (event) {
      if (self.eventsAnyListeners && self.eventsAnyListeners.length) {
        self.eventsAnyListeners.forEach(function (eventHandler) {
          eventHandler.apply(context, [event].concat(data));
        });
      }

      if (self.eventsListeners && self.eventsListeners[event]) {
        self.eventsListeners[event].forEach(function (eventHandler) {
          eventHandler.apply(context, data);
        });
      }
    });
    return self;
  }
};
exports.default = _default;

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/events/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/events/index.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var _ssrWindow = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");

var _onTouchStart = _interopRequireDefault(__webpack_require__(/*! ./onTouchStart */ "./node_modules/swiper/cjs/components/core/events/onTouchStart.js"));

var _onTouchMove = _interopRequireDefault(__webpack_require__(/*! ./onTouchMove */ "./node_modules/swiper/cjs/components/core/events/onTouchMove.js"));

var _onTouchEnd = _interopRequireDefault(__webpack_require__(/*! ./onTouchEnd */ "./node_modules/swiper/cjs/components/core/events/onTouchEnd.js"));

var _onResize = _interopRequireDefault(__webpack_require__(/*! ./onResize */ "./node_modules/swiper/cjs/components/core/events/onResize.js"));

var _onClick = _interopRequireDefault(__webpack_require__(/*! ./onClick */ "./node_modules/swiper/cjs/components/core/events/onClick.js"));

var _onScroll = _interopRequireDefault(__webpack_require__(/*! ./onScroll */ "./node_modules/swiper/cjs/components/core/events/onScroll.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var dummyEventAttached = false;

function dummyEventListener() {}

function attachEvents() {
  var swiper = this;
  var document = (0, _ssrWindow.getDocument)();
  var params = swiper.params,
      touchEvents = swiper.touchEvents,
      el = swiper.el,
      wrapperEl = swiper.wrapperEl,
      device = swiper.device,
      support = swiper.support;
  swiper.onTouchStart = _onTouchStart.default.bind(swiper);
  swiper.onTouchMove = _onTouchMove.default.bind(swiper);
  swiper.onTouchEnd = _onTouchEnd.default.bind(swiper);

  if (params.cssMode) {
    swiper.onScroll = _onScroll.default.bind(swiper);
  }

  swiper.onClick = _onClick.default.bind(swiper);
  var capture = !!params.nested; // Touch Events

  if (!support.touch && support.pointerEvents) {
    el.addEventListener(touchEvents.start, swiper.onTouchStart, false);
    document.addEventListener(touchEvents.move, swiper.onTouchMove, capture);
    document.addEventListener(touchEvents.end, swiper.onTouchEnd, false);
  } else {
    if (support.touch) {
      var passiveListener = touchEvents.start === 'touchstart' && support.passiveListener && params.passiveListeners ? {
        passive: true,
        capture: false
      } : false;
      el.addEventListener(touchEvents.start, swiper.onTouchStart, passiveListener);
      el.addEventListener(touchEvents.move, swiper.onTouchMove, support.passiveListener ? {
        passive: false,
        capture: capture
      } : capture);
      el.addEventListener(touchEvents.end, swiper.onTouchEnd, passiveListener);

      if (touchEvents.cancel) {
        el.addEventListener(touchEvents.cancel, swiper.onTouchEnd, passiveListener);
      }

      if (!dummyEventAttached) {
        document.addEventListener('touchstart', dummyEventListener);
        dummyEventAttached = true;
      }
    }

    if (params.simulateTouch && !device.ios && !device.android || params.simulateTouch && !support.touch && device.ios) {
      el.addEventListener('mousedown', swiper.onTouchStart, false);
      document.addEventListener('mousemove', swiper.onTouchMove, capture);
      document.addEventListener('mouseup', swiper.onTouchEnd, false);
    }
  } // Prevent Links Clicks


  if (params.preventClicks || params.preventClicksPropagation) {
    el.addEventListener('click', swiper.onClick, true);
  }

  if (params.cssMode) {
    wrapperEl.addEventListener('scroll', swiper.onScroll);
  } // Resize handler


  if (params.updateOnWindowResize) {
    swiper.on(device.ios || device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate', _onResize.default, true);
  } else {
    swiper.on('observerUpdate', _onResize.default, true);
  }
}

function detachEvents() {
  var swiper = this;
  var document = (0, _ssrWindow.getDocument)();
  var params = swiper.params,
      touchEvents = swiper.touchEvents,
      el = swiper.el,
      wrapperEl = swiper.wrapperEl,
      device = swiper.device,
      support = swiper.support;
  var capture = !!params.nested; // Touch Events

  if (!support.touch && support.pointerEvents) {
    el.removeEventListener(touchEvents.start, swiper.onTouchStart, false);
    document.removeEventListener(touchEvents.move, swiper.onTouchMove, capture);
    document.removeEventListener(touchEvents.end, swiper.onTouchEnd, false);
  } else {
    if (support.touch) {
      var passiveListener = touchEvents.start === 'onTouchStart' && support.passiveListener && params.passiveListeners ? {
        passive: true,
        capture: false
      } : false;
      el.removeEventListener(touchEvents.start, swiper.onTouchStart, passiveListener);
      el.removeEventListener(touchEvents.move, swiper.onTouchMove, capture);
      el.removeEventListener(touchEvents.end, swiper.onTouchEnd, passiveListener);

      if (touchEvents.cancel) {
        el.removeEventListener(touchEvents.cancel, swiper.onTouchEnd, passiveListener);
      }
    }

    if (params.simulateTouch && !device.ios && !device.android || params.simulateTouch && !support.touch && device.ios) {
      el.removeEventListener('mousedown', swiper.onTouchStart, false);
      document.removeEventListener('mousemove', swiper.onTouchMove, capture);
      document.removeEventListener('mouseup', swiper.onTouchEnd, false);
    }
  } // Prevent Links Clicks


  if (params.preventClicks || params.preventClicksPropagation) {
    el.removeEventListener('click', swiper.onClick, true);
  }

  if (params.cssMode) {
    wrapperEl.removeEventListener('scroll', swiper.onScroll);
  } // Resize handler


  swiper.off(device.ios || device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate', _onResize.default);
}

var _default = {
  attachEvents: attachEvents,
  detachEvents: detachEvents
};
exports.default = _default;

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/events/onClick.js":
/*!*******************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/events/onClick.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = onClick;

function onClick(e) {
  var swiper = this;
  if (!swiper.enabled) return;

  if (!swiper.allowClick) {
    if (swiper.params.preventClicks) e.preventDefault();

    if (swiper.params.preventClicksPropagation && swiper.animating) {
      e.stopPropagation();
      e.stopImmediatePropagation();
    }
  }
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/events/onResize.js":
/*!********************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/events/onResize.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = onResize;

function onResize() {
  var swiper = this;
  var params = swiper.params,
      el = swiper.el;
  if (el && el.offsetWidth === 0) return; // Breakpoints

  if (params.breakpoints) {
    swiper.setBreakpoint();
  } // Save locks


  var allowSlideNext = swiper.allowSlideNext,
      allowSlidePrev = swiper.allowSlidePrev,
      snapGrid = swiper.snapGrid; // Disable locks on resize

  swiper.allowSlideNext = true;
  swiper.allowSlidePrev = true;
  swiper.updateSize();
  swiper.updateSlides();
  swiper.updateSlidesClasses();

  if ((params.slidesPerView === 'auto' || params.slidesPerView > 1) && swiper.isEnd && !swiper.isBeginning && !swiper.params.centeredSlides) {
    swiper.slideTo(swiper.slides.length - 1, 0, false, true);
  } else {
    swiper.slideTo(swiper.activeIndex, 0, false, true);
  }

  if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {
    swiper.autoplay.run();
  } // Return locks after resize


  swiper.allowSlidePrev = allowSlidePrev;
  swiper.allowSlideNext = allowSlideNext;

  if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) {
    swiper.checkOverflow();
  }
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/events/onScroll.js":
/*!********************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/events/onScroll.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = onScroll;

function onScroll() {
  var swiper = this;
  var wrapperEl = swiper.wrapperEl,
      rtlTranslate = swiper.rtlTranslate,
      enabled = swiper.enabled;
  if (!enabled) return;
  swiper.previousTranslate = swiper.translate;

  if (swiper.isHorizontal()) {
    if (rtlTranslate) {
      swiper.translate = wrapperEl.scrollWidth - wrapperEl.offsetWidth - wrapperEl.scrollLeft;
    } else {
      swiper.translate = -wrapperEl.scrollLeft;
    }
  } else {
    swiper.translate = -wrapperEl.scrollTop;
  } // eslint-disable-next-line


  if (swiper.translate === -0) swiper.translate = 0;
  swiper.updateActiveIndex();
  swiper.updateSlidesClasses();
  var newProgress;
  var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();

  if (translatesDiff === 0) {
    newProgress = 0;
  } else {
    newProgress = (swiper.translate - swiper.minTranslate()) / translatesDiff;
  }

  if (newProgress !== swiper.progress) {
    swiper.updateProgress(rtlTranslate ? -swiper.translate : swiper.translate);
  }

  swiper.emit('setTranslate', swiper.translate, false);
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/events/onTouchEnd.js":
/*!**********************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/events/onTouchEnd.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = onTouchEnd;

var _utils = __webpack_require__(/*! ../../../utils/utils */ "./node_modules/swiper/cjs/utils/utils.js");

function onTouchEnd(event) {
  var swiper = this;
  var data = swiper.touchEventsData;
  var params = swiper.params,
      touches = swiper.touches,
      rtl = swiper.rtlTranslate,
      $wrapperEl = swiper.$wrapperEl,
      slidesGrid = swiper.slidesGrid,
      snapGrid = swiper.snapGrid,
      enabled = swiper.enabled;
  if (!enabled) return;
  var e = event;
  if (e.originalEvent) e = e.originalEvent;

  if (data.allowTouchCallbacks) {
    swiper.emit('touchEnd', e);
  }

  data.allowTouchCallbacks = false;

  if (!data.isTouched) {
    if (data.isMoved && params.grabCursor) {
      swiper.setGrabCursor(false);
    }

    data.isMoved = false;
    data.startMoving = false;
    return;
  } // Return Grab Cursor


  if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {
    swiper.setGrabCursor(false);
  } // Time diff


  var touchEndTime = (0, _utils.now)();
  var timeDiff = touchEndTime - data.touchStartTime; // Tap, doubleTap, Click

  if (swiper.allowClick) {
    swiper.updateClickedSlide(e);
    swiper.emit('tap click', e);

    if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) {
      swiper.emit('doubleTap doubleClick', e);
    }
  }

  data.lastClickTime = (0, _utils.now)();
  (0, _utils.nextTick)(function () {
    if (!swiper.destroyed) swiper.allowClick = true;
  });

  if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 || data.currentTranslate === data.startTranslate) {
    data.isTouched = false;
    data.isMoved = false;
    data.startMoving = false;
    return;
  }

  data.isTouched = false;
  data.isMoved = false;
  data.startMoving = false;
  var currentPos;

  if (params.followFinger) {
    currentPos = rtl ? swiper.translate : -swiper.translate;
  } else {
    currentPos = -data.currentTranslate;
  }

  if (params.cssMode) {
    return;
  }

  if (params.freeMode) {
    if (currentPos < -swiper.minTranslate()) {
      swiper.slideTo(swiper.activeIndex);
      return;
    }

    if (currentPos > -swiper.maxTranslate()) {
      if (swiper.slides.length < snapGrid.length) {
        swiper.slideTo(snapGrid.length - 1);
      } else {
        swiper.slideTo(swiper.slides.length - 1);
      }

      return;
    }

    if (params.freeModeMomentum) {
      if (data.velocities.length > 1) {
        var lastMoveEvent = data.velocities.pop();
        var velocityEvent = data.velocities.pop();
        var distance = lastMoveEvent.position - velocityEvent.position;
        var time = lastMoveEvent.time - velocityEvent.time;
        swiper.velocity = distance / time;
        swiper.velocity /= 2;

        if (Math.abs(swiper.velocity) < params.freeModeMinimumVelocity) {
          swiper.velocity = 0;
        } // this implies that the user stopped moving a finger then released.
        // There would be no events with distance zero, so the last event is stale.


        if (time > 150 || (0, _utils.now)() - lastMoveEvent.time > 300) {
          swiper.velocity = 0;
        }
      } else {
        swiper.velocity = 0;
      }

      swiper.velocity *= params.freeModeMomentumVelocityRatio;
      data.velocities.length = 0;
      var momentumDuration = 1000 * params.freeModeMomentumRatio;
      var momentumDistance = swiper.velocity * momentumDuration;
      var newPosition = swiper.translate + momentumDistance;
      if (rtl) newPosition = -newPosition;
      var doBounce = false;
      var afterBouncePosition;
      var bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeModeMomentumBounceRatio;
      var needsLoopFix;

      if (newPosition < swiper.maxTranslate()) {
        if (params.freeModeMomentumBounce) {
          if (newPosition + swiper.maxTranslate() < -bounceAmount) {
            newPosition = swiper.maxTranslate() - bounceAmount;
          }

          afterBouncePosition = swiper.maxTranslate();
          doBounce = true;
          data.allowMomentumBounce = true;
        } else {
          newPosition = swiper.maxTranslate();
        }

        if (params.loop && params.centeredSlides) needsLoopFix = true;
      } else if (newPosition > swiper.minTranslate()) {
        if (params.freeModeMomentumBounce) {
          if (newPosition - swiper.minTranslate() > bounceAmount) {
            newPosition = swiper.minTranslate() + bounceAmount;
          }

          afterBouncePosition = swiper.minTranslate();
          doBounce = true;
          data.allowMomentumBounce = true;
        } else {
          newPosition = swiper.minTranslate();
        }

        if (params.loop && params.centeredSlides) needsLoopFix = true;
      } else if (params.freeModeSticky) {
        var nextSlide;

        for (var j = 0; j < snapGrid.length; j += 1) {
          if (snapGrid[j] > -newPosition) {
            nextSlide = j;
            break;
          }
        }

        if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === 'next') {
          newPosition = snapGrid[nextSlide];
        } else {
          newPosition = snapGrid[nextSlide - 1];
        }

        newPosition = -newPosition;
      }

      if (needsLoopFix) {
        swiper.once('transitionEnd', function () {
          swiper.loopFix();
        });
      } // Fix duration


      if (swiper.velocity !== 0) {
        if (rtl) {
          momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);
        } else {
          momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);
        }

        if (params.freeModeSticky) {
          // If freeModeSticky is active and the user ends a swipe with a slow-velocity
          // event, then durations can be 20+ seconds to slide one (or zero!) slides.
          // It's easy to see this when simulating touch with mouse events. To fix this,
          // limit single-slide swipes to the default slide duration. This also has the
          // nice side effect of matching slide speed if the user stopped moving before
          // lifting finger or mouse vs. moving slowly before lifting the finger/mouse.
          // For faster swipes, also apply limits (albeit higher ones).
          var moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);
          var currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];

          if (moveDistance < currentSlideSize) {
            momentumDuration = params.speed;
          } else if (moveDistance < 2 * currentSlideSize) {
            momentumDuration = params.speed * 1.5;
          } else {
            momentumDuration = params.speed * 2.5;
          }
        }
      } else if (params.freeModeSticky) {
        swiper.slideToClosest();
        return;
      }

      if (params.freeModeMomentumBounce && doBounce) {
        swiper.updateProgress(afterBouncePosition);
        swiper.setTransition(momentumDuration);
        swiper.setTranslate(newPosition);
        swiper.transitionStart(true, swiper.swipeDirection);
        swiper.animating = true;
        $wrapperEl.transitionEnd(function () {
          if (!swiper || swiper.destroyed || !data.allowMomentumBounce) return;
          swiper.emit('momentumBounce');
          swiper.setTransition(params.speed);
          setTimeout(function () {
            swiper.setTranslate(afterBouncePosition);
            $wrapperEl.transitionEnd(function () {
              if (!swiper || swiper.destroyed) return;
              swiper.transitionEnd();
            });
          }, 0);
        });
      } else if (swiper.velocity) {
        swiper.updateProgress(newPosition);
        swiper.setTransition(momentumDuration);
        swiper.setTranslate(newPosition);
        swiper.transitionStart(true, swiper.swipeDirection);

        if (!swiper.animating) {
          swiper.animating = true;
          $wrapperEl.transitionEnd(function () {
            if (!swiper || swiper.destroyed) return;
            swiper.transitionEnd();
          });
        }
      } else {
        swiper.emit('_freeModeNoMomentumRelease');
        swiper.updateProgress(newPosition);
      }

      swiper.updateActiveIndex();
      swiper.updateSlidesClasses();
    } else if (params.freeModeSticky) {
      swiper.slideToClosest();
      return;
    } else if (params.freeMode) {
      swiper.emit('_freeModeNoMomentumRelease');
    }

    if (!params.freeModeMomentum || timeDiff >= params.longSwipesMs) {
      swiper.updateProgress();
      swiper.updateActiveIndex();
      swiper.updateSlidesClasses();
    }

    return;
  } // Find current slide


  var stopIndex = 0;
  var groupSize = swiper.slidesSizesGrid[0];

  for (var i = 0; i < slidesGrid.length; i += i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup) {
    var _increment = i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;

    if (typeof slidesGrid[i + _increment] !== 'undefined') {
      if (currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + _increment]) {
        stopIndex = i;
        groupSize = slidesGrid[i + _increment] - slidesGrid[i];
      }
    } else if (currentPos >= slidesGrid[i]) {
      stopIndex = i;
      groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];
    }
  } // Find current slide size


  var ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;
  var increment = stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;

  if (timeDiff > params.longSwipesMs) {
    // Long touches
    if (!params.longSwipes) {
      swiper.slideTo(swiper.activeIndex);
      return;
    }

    if (swiper.swipeDirection === 'next') {
      if (ratio >= params.longSwipesRatio) swiper.slideTo(stopIndex + increment);else swiper.slideTo(stopIndex);
    }

    if (swiper.swipeDirection === 'prev') {
      if (ratio > 1 - params.longSwipesRatio) swiper.slideTo(stopIndex + increment);else swiper.slideTo(stopIndex);
    }
  } else {
    // Short swipes
    if (!params.shortSwipes) {
      swiper.slideTo(swiper.activeIndex);
      return;
    }

    var isNavButtonTarget = swiper.navigation && (e.target === swiper.navigation.nextEl || e.target === swiper.navigation.prevEl);

    if (!isNavButtonTarget) {
      if (swiper.swipeDirection === 'next') {
        swiper.slideTo(stopIndex + increment);
      }

      if (swiper.swipeDirection === 'prev') {
        swiper.slideTo(stopIndex);
      }
    } else if (e.target === swiper.navigation.nextEl) {
      swiper.slideTo(stopIndex + increment);
    } else {
      swiper.slideTo(stopIndex);
    }
  }
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/events/onTouchMove.js":
/*!***********************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/events/onTouchMove.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = onTouchMove;

var _ssrWindow = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");

var _dom = _interopRequireDefault(__webpack_require__(/*! ../../../utils/dom */ "./node_modules/swiper/cjs/utils/dom.js"));

var _utils = __webpack_require__(/*! ../../../utils/utils */ "./node_modules/swiper/cjs/utils/utils.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function onTouchMove(event) {
  var document = (0, _ssrWindow.getDocument)();
  var swiper = this;
  var data = swiper.touchEventsData;
  var params = swiper.params,
      touches = swiper.touches,
      rtl = swiper.rtlTranslate,
      enabled = swiper.enabled;
  if (!enabled) return;
  var e = event;
  if (e.originalEvent) e = e.originalEvent;

  if (!data.isTouched) {
    if (data.startMoving && data.isScrolling) {
      swiper.emit('touchMoveOpposite', e);
    }

    return;
  }

  if (data.isTouchEvent && e.type !== 'touchmove') return;
  var targetTouch = e.type === 'touchmove' && e.targetTouches && (e.targetTouches[0] || e.changedTouches[0]);
  var pageX = e.type === 'touchmove' ? targetTouch.pageX : e.pageX;
  var pageY = e.type === 'touchmove' ? targetTouch.pageY : e.pageY;

  if (e.preventedByNestedSwiper) {
    touches.startX = pageX;
    touches.startY = pageY;
    return;
  }

  if (!swiper.allowTouchMove) {
    // isMoved = true;
    swiper.allowClick = false;

    if (data.isTouched) {
      (0, _utils.extend)(touches, {
        startX: pageX,
        startY: pageY,
        currentX: pageX,
        currentY: pageY
      });
      data.touchStartTime = (0, _utils.now)();
    }

    return;
  }

  if (data.isTouchEvent && params.touchReleaseOnEdges && !params.loop) {
    if (swiper.isVertical()) {
      // Vertical
      if (pageY < touches.startY && swiper.translate <= swiper.maxTranslate() || pageY > touches.startY && swiper.translate >= swiper.minTranslate()) {
        data.isTouched = false;
        data.isMoved = false;
        return;
      }
    } else if (pageX < touches.startX && swiper.translate <= swiper.maxTranslate() || pageX > touches.startX && swiper.translate >= swiper.minTranslate()) {
      return;
    }
  }

  if (data.isTouchEvent && document.activeElement) {
    if (e.target === document.activeElement && (0, _dom.default)(e.target).is(data.focusableElements)) {
      data.isMoved = true;
      swiper.allowClick = false;
      return;
    }
  }

  if (data.allowTouchCallbacks) {
    swiper.emit('touchMove', e);
  }

  if (e.targetTouches && e.targetTouches.length > 1) return;
  touches.currentX = pageX;
  touches.currentY = pageY;
  var diffX = touches.currentX - touches.startX;
  var diffY = touches.currentY - touches.startY;
  if (swiper.params.threshold && Math.sqrt(Math.pow(diffX, 2) + Math.pow(diffY, 2)) < swiper.params.threshold) return;

  if (typeof data.isScrolling === 'undefined') {
    var touchAngle;

    if (swiper.isHorizontal() && touches.currentY === touches.startY || swiper.isVertical() && touches.currentX === touches.startX) {
      data.isScrolling = false;
    } else {
      // eslint-disable-next-line
      if (diffX * diffX + diffY * diffY >= 25) {
        touchAngle = Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180 / Math.PI;
        data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : 90 - touchAngle > params.touchAngle;
      }
    }
  }

  if (data.isScrolling) {
    swiper.emit('touchMoveOpposite', e);
  }

  if (typeof data.startMoving === 'undefined') {
    if (touches.currentX !== touches.startX || touches.currentY !== touches.startY) {
      data.startMoving = true;
    }
  }

  if (data.isScrolling) {
    data.isTouched = false;
    return;
  }

  if (!data.startMoving) {
    return;
  }

  swiper.allowClick = false;

  if (!params.cssMode && e.cancelable) {
    e.preventDefault();
  }

  if (params.touchMoveStopPropagation && !params.nested) {
    e.stopPropagation();
  }

  if (!data.isMoved) {
    if (params.loop) {
      swiper.loopFix();
    }

    data.startTranslate = swiper.getTranslate();
    swiper.setTransition(0);

    if (swiper.animating) {
      swiper.$wrapperEl.trigger('webkitTransitionEnd transitionend');
    }

    data.allowMomentumBounce = false; // Grab Cursor

    if (params.grabCursor && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {
      swiper.setGrabCursor(true);
    }

    swiper.emit('sliderFirstMove', e);
  }

  swiper.emit('sliderMove', e);
  data.isMoved = true;
  var diff = swiper.isHorizontal() ? diffX : diffY;
  touches.diff = diff;
  diff *= params.touchRatio;
  if (rtl) diff = -diff;
  swiper.swipeDirection = diff > 0 ? 'prev' : 'next';
  data.currentTranslate = diff + data.startTranslate;
  var disableParentSwiper = true;
  var resistanceRatio = params.resistanceRatio;

  if (params.touchReleaseOnEdges) {
    resistanceRatio = 0;
  }

  if (diff > 0 && data.currentTranslate > swiper.minTranslate()) {
    disableParentSwiper = false;
    if (params.resistance) data.currentTranslate = swiper.minTranslate() - 1 + Math.pow(-swiper.minTranslate() + data.startTranslate + diff, resistanceRatio);
  } else if (diff < 0 && data.currentTranslate < swiper.maxTranslate()) {
    disableParentSwiper = false;
    if (params.resistance) data.currentTranslate = swiper.maxTranslate() + 1 - Math.pow(swiper.maxTranslate() - data.startTranslate - diff, resistanceRatio);
  }

  if (disableParentSwiper) {
    e.preventedByNestedSwiper = true;
  } // Directions locks


  if (!swiper.allowSlideNext && swiper.swipeDirection === 'next' && data.currentTranslate < data.startTranslate) {
    data.currentTranslate = data.startTranslate;
  }

  if (!swiper.allowSlidePrev && swiper.swipeDirection === 'prev' && data.currentTranslate > data.startTranslate) {
    data.currentTranslate = data.startTranslate;
  }

  if (!swiper.allowSlidePrev && !swiper.allowSlideNext) {
    data.currentTranslate = data.startTranslate;
  } // Threshold


  if (params.threshold > 0) {
    if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {
      if (!data.allowThresholdMove) {
        data.allowThresholdMove = true;
        touches.startX = touches.currentX;
        touches.startY = touches.currentY;
        data.currentTranslate = data.startTranslate;
        touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;
        return;
      }
    } else {
      data.currentTranslate = data.startTranslate;
      return;
    }
  }

  if (!params.followFinger || params.cssMode) return; // Update active index in free mode

  if (params.freeMode || params.watchSlidesProgress || params.watchSlidesVisibility) {
    swiper.updateActiveIndex();
    swiper.updateSlidesClasses();
  }

  if (params.freeMode) {
    // Velocity
    if (data.velocities.length === 0) {
      data.velocities.push({
        position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],
        time: data.touchStartTime
      });
    }

    data.velocities.push({
      position: touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],
      time: (0, _utils.now)()
    });
  } // Update progress


  swiper.updateProgress(data.currentTranslate); // Update translate

  swiper.setTranslate(data.currentTranslate);
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/events/onTouchStart.js":
/*!************************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/events/onTouchStart.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = onTouchStart;

var _ssrWindow = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");

var _dom = _interopRequireDefault(__webpack_require__(/*! ../../../utils/dom */ "./node_modules/swiper/cjs/utils/dom.js"));

var _utils = __webpack_require__(/*! ../../../utils/utils */ "./node_modules/swiper/cjs/utils/utils.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Modified from https://stackoverflow.com/questions/54520554/custom-element-getrootnode-closest-function-crossing-multiple-parent-shadowd
function closestElement(selector, base) {
  if (base === void 0) {
    base = this;
  }

  function __closestFrom(el) {
    if (!el || el === (0, _ssrWindow.getDocument)() || el === (0, _ssrWindow.getWindow)()) return null;
    if (el.assignedSlot) el = el.assignedSlot;
    var found = el.closest(selector);
    return found || __closestFrom(el.getRootNode().host);
  }

  return __closestFrom(base);
}

function onTouchStart(event) {
  var swiper = this;
  var document = (0, _ssrWindow.getDocument)();
  var window = (0, _ssrWindow.getWindow)();
  var data = swiper.touchEventsData;
  var params = swiper.params,
      touches = swiper.touches,
      enabled = swiper.enabled;
  if (!enabled) return;

  if (swiper.animating && params.preventInteractionOnTransition) {
    return;
  }

  var e = event;
  if (e.originalEvent) e = e.originalEvent;
  var $targetEl = (0, _dom.default)(e.target);

  if (params.touchEventsTarget === 'wrapper') {
    if (!$targetEl.closest(swiper.wrapperEl).length) return;
  }

  data.isTouchEvent = e.type === 'touchstart';
  if (!data.isTouchEvent && 'which' in e && e.which === 3) return;
  if (!data.isTouchEvent && 'button' in e && e.button > 0) return;
  if (data.isTouched && data.isMoved) return; // change target el for shadow root component

  var swipingClassHasValue = !!params.noSwipingClass && params.noSwipingClass !== '';

  if (swipingClassHasValue && e.target && e.target.shadowRoot && event.path && event.path[0]) {
    $targetEl = (0, _dom.default)(event.path[0]);
  }

  var noSwipingSelector = params.noSwipingSelector ? params.noSwipingSelector : "." + params.noSwipingClass;
  var isTargetShadow = !!(e.target && e.target.shadowRoot); // use closestElement for shadow root element to get the actual closest for nested shadow root element

  if (params.noSwiping && (isTargetShadow ? closestElement(noSwipingSelector, e.target) : $targetEl.closest(noSwipingSelector)[0])) {
    swiper.allowClick = true;
    return;
  }

  if (params.swipeHandler) {
    if (!$targetEl.closest(params.swipeHandler)[0]) return;
  }

  touches.currentX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;
  touches.currentY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;
  var startX = touches.currentX;
  var startY = touches.currentY; // Do NOT start if iOS edge swipe is detected. Otherwise iOS app cannot swipe-to-go-back anymore

  var edgeSwipeDetection = params.edgeSwipeDetection || params.iOSEdgeSwipeDetection;
  var edgeSwipeThreshold = params.edgeSwipeThreshold || params.iOSEdgeSwipeThreshold;

  if (edgeSwipeDetection && (startX <= edgeSwipeThreshold || startX >= window.innerWidth - edgeSwipeThreshold)) {
    if (edgeSwipeDetection === 'prevent') {
      event.preventDefault();
    } else {
      return;
    }
  }

  (0, _utils.extend)(data, {
    isTouched: true,
    isMoved: false,
    allowTouchCallbacks: true,
    isScrolling: undefined,
    startMoving: undefined
  });
  touches.startX = startX;
  touches.startY = startY;
  data.touchStartTime = (0, _utils.now)();
  swiper.allowClick = true;
  swiper.updateSize();
  swiper.swipeDirection = undefined;
  if (params.threshold > 0) data.allowThresholdMove = false;

  if (e.type !== 'touchstart') {
    var preventDefault = true;
    if ($targetEl.is(data.focusableElements)) preventDefault = false;

    if (document.activeElement && (0, _dom.default)(document.activeElement).is(data.focusableElements) && document.activeElement !== $targetEl[0]) {
      document.activeElement.blur();
    }

    var shouldPreventDefault = preventDefault && swiper.allowTouchMove && params.touchStartPreventDefault;

    if ((params.touchStartForcePreventDefault || shouldPreventDefault) && !$targetEl[0].isContentEditable) {
      e.preventDefault();
    }
  }

  swiper.emit('touchStart', e);
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/grab-cursor/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/grab-cursor/index.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var _setGrabCursor = _interopRequireDefault(__webpack_require__(/*! ./setGrabCursor */ "./node_modules/swiper/cjs/components/core/grab-cursor/setGrabCursor.js"));

var _unsetGrabCursor = _interopRequireDefault(__webpack_require__(/*! ./unsetGrabCursor */ "./node_modules/swiper/cjs/components/core/grab-cursor/unsetGrabCursor.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  setGrabCursor: _setGrabCursor.default,
  unsetGrabCursor: _unsetGrabCursor.default
};
exports.default = _default;

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/grab-cursor/setGrabCursor.js":
/*!******************************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/grab-cursor/setGrabCursor.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = setGrabCursor;

function setGrabCursor(moving) {
  var swiper = this;
  if (swiper.support.touch || !swiper.params.simulateTouch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) return;
  var el = swiper.el;
  el.style.cursor = 'move';
  el.style.cursor = moving ? '-webkit-grabbing' : '-webkit-grab';
  el.style.cursor = moving ? '-moz-grabbin' : '-moz-grab';
  el.style.cursor = moving ? 'grabbing' : 'grab';
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/grab-cursor/unsetGrabCursor.js":
/*!********************************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/grab-cursor/unsetGrabCursor.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = unsetGrabCursor;

function unsetGrabCursor() {
  var swiper = this;

  if (swiper.support.touch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) {
    return;
  }

  swiper.el.style.cursor = '';
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/images/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/images/index.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var _loadImage = _interopRequireDefault(__webpack_require__(/*! ./loadImage */ "./node_modules/swiper/cjs/components/core/images/loadImage.js"));

var _preloadImages = _interopRequireDefault(__webpack_require__(/*! ./preloadImages */ "./node_modules/swiper/cjs/components/core/images/preloadImages.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  loadImage: _loadImage.default,
  preloadImages: _preloadImages.default
};
exports.default = _default;

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/images/loadImage.js":
/*!*********************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/images/loadImage.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = loadImage;

var _ssrWindow = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");

var _dom = _interopRequireDefault(__webpack_require__(/*! ../../../utils/dom */ "./node_modules/swiper/cjs/utils/dom.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function loadImage(imageEl, src, srcset, sizes, checkForComplete, callback) {
  var window = (0, _ssrWindow.getWindow)();
  var image;

  function onReady() {
    if (callback) callback();
  }

  var isPicture = (0, _dom.default)(imageEl).parent('picture')[0];

  if (!isPicture && (!imageEl.complete || !checkForComplete)) {
    if (src) {
      image = new window.Image();
      image.onload = onReady;
      image.onerror = onReady;

      if (sizes) {
        image.sizes = sizes;
      }

      if (srcset) {
        image.srcset = srcset;
      }

      if (src) {
        image.src = src;
      }
    } else {
      onReady();
    }
  } else {
    // image already loaded...
    onReady();
  }
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/images/preloadImages.js":
/*!*************************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/images/preloadImages.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = preloadImages;

function preloadImages() {
  var swiper = this;
  swiper.imagesToLoad = swiper.$el.find('img');

  function onReady() {
    if (typeof swiper === 'undefined' || swiper === null || !swiper || swiper.destroyed) return;
    if (swiper.imagesLoaded !== undefined) swiper.imagesLoaded += 1;

    if (swiper.imagesLoaded === swiper.imagesToLoad.length) {
      if (swiper.params.updateOnImagesReady) swiper.update();
      swiper.emit('imagesReady');
    }
  }

  for (var i = 0; i < swiper.imagesToLoad.length; i += 1) {
    var imageEl = swiper.imagesToLoad[i];
    swiper.loadImage(imageEl, imageEl.currentSrc || imageEl.getAttribute('src'), imageEl.srcset || imageEl.getAttribute('srcset'), imageEl.sizes || imageEl.getAttribute('sizes'), true, onReady);
  }
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/loop/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/loop/index.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var _loopCreate = _interopRequireDefault(__webpack_require__(/*! ./loopCreate */ "./node_modules/swiper/cjs/components/core/loop/loopCreate.js"));

var _loopFix = _interopRequireDefault(__webpack_require__(/*! ./loopFix */ "./node_modules/swiper/cjs/components/core/loop/loopFix.js"));

var _loopDestroy = _interopRequireDefault(__webpack_require__(/*! ./loopDestroy */ "./node_modules/swiper/cjs/components/core/loop/loopDestroy.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  loopCreate: _loopCreate.default,
  loopFix: _loopFix.default,
  loopDestroy: _loopDestroy.default
};
exports.default = _default;

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/loop/loopCreate.js":
/*!********************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/loop/loopCreate.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = loopCreate;

var _ssrWindow = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");

var _dom = _interopRequireDefault(__webpack_require__(/*! ../../../utils/dom */ "./node_modules/swiper/cjs/utils/dom.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function loopCreate() {
  var swiper = this;
  var document = (0, _ssrWindow.getDocument)();
  var params = swiper.params,
      $wrapperEl = swiper.$wrapperEl; // Remove duplicated slides

  $wrapperEl.children("." + params.slideClass + "." + params.slideDuplicateClass).remove();
  var slides = $wrapperEl.children("." + params.slideClass);

  if (params.loopFillGroupWithBlank) {
    var blankSlidesNum = params.slidesPerGroup - slides.length % params.slidesPerGroup;

    if (blankSlidesNum !== params.slidesPerGroup) {
      for (var i = 0; i < blankSlidesNum; i += 1) {
        var blankNode = (0, _dom.default)(document.createElement('div')).addClass(params.slideClass + " " + params.slideBlankClass);
        $wrapperEl.append(blankNode);
      }

      slides = $wrapperEl.children("." + params.slideClass);
    }
  }

  if (params.slidesPerView === 'auto' && !params.loopedSlides) params.loopedSlides = slides.length;
  swiper.loopedSlides = Math.ceil(parseFloat(params.loopedSlides || params.slidesPerView, 10));
  swiper.loopedSlides += params.loopAdditionalSlides;

  if (swiper.loopedSlides > slides.length) {
    swiper.loopedSlides = slides.length;
  }

  var prependSlides = [];
  var appendSlides = [];
  slides.each(function (el, index) {
    var slide = (0, _dom.default)(el);

    if (index < swiper.loopedSlides) {
      appendSlides.push(el);
    }

    if (index < slides.length && index >= slides.length - swiper.loopedSlides) {
      prependSlides.push(el);
    }

    slide.attr('data-swiper-slide-index', index);
  });

  for (var _i = 0; _i < appendSlides.length; _i += 1) {
    $wrapperEl.append((0, _dom.default)(appendSlides[_i].cloneNode(true)).addClass(params.slideDuplicateClass));
  }

  for (var _i2 = prependSlides.length - 1; _i2 >= 0; _i2 -= 1) {
    $wrapperEl.prepend((0, _dom.default)(prependSlides[_i2].cloneNode(true)).addClass(params.slideDuplicateClass));
  }
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/loop/loopDestroy.js":
/*!*********************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/loop/loopDestroy.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = loopDestroy;

function loopDestroy() {
  var swiper = this;
  var $wrapperEl = swiper.$wrapperEl,
      params = swiper.params,
      slides = swiper.slides;
  $wrapperEl.children("." + params.slideClass + "." + params.slideDuplicateClass + ",." + params.slideClass + "." + params.slideBlankClass).remove();
  slides.removeAttr('data-swiper-slide-index');
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/loop/loopFix.js":
/*!*****************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/loop/loopFix.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = loopFix;

function loopFix() {
  var swiper = this;
  swiper.emit('beforeLoopFix');
  var activeIndex = swiper.activeIndex,
      slides = swiper.slides,
      loopedSlides = swiper.loopedSlides,
      allowSlidePrev = swiper.allowSlidePrev,
      allowSlideNext = swiper.allowSlideNext,
      snapGrid = swiper.snapGrid,
      rtl = swiper.rtlTranslate;
  var newIndex;
  swiper.allowSlidePrev = true;
  swiper.allowSlideNext = true;
  var snapTranslate = -snapGrid[activeIndex];
  var diff = snapTranslate - swiper.getTranslate(); // Fix For Negative Oversliding

  if (activeIndex < loopedSlides) {
    newIndex = slides.length - loopedSlides * 3 + activeIndex;
    newIndex += loopedSlides;
    var slideChanged = swiper.slideTo(newIndex, 0, false, true);

    if (slideChanged && diff !== 0) {
      swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);
    }
  } else if (activeIndex >= slides.length - loopedSlides) {
    // Fix For Positive Oversliding
    newIndex = -slides.length + activeIndex + loopedSlides;
    newIndex += loopedSlides;

    var _slideChanged = swiper.slideTo(newIndex, 0, false, true);

    if (_slideChanged && diff !== 0) {
      swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);
    }
  }

  swiper.allowSlidePrev = allowSlidePrev;
  swiper.allowSlideNext = allowSlideNext;
  swiper.emit('loopFix');
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/manipulation/addSlide.js":
/*!**************************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/manipulation/addSlide.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = addSlide;

function addSlide(index, slides) {
  var swiper = this;
  var $wrapperEl = swiper.$wrapperEl,
      params = swiper.params,
      activeIndex = swiper.activeIndex;
  var activeIndexBuffer = activeIndex;

  if (params.loop) {
    activeIndexBuffer -= swiper.loopedSlides;
    swiper.loopDestroy();
    swiper.slides = $wrapperEl.children("." + params.slideClass);
  }

  var baseLength = swiper.slides.length;

  if (index <= 0) {
    swiper.prependSlide(slides);
    return;
  }

  if (index >= baseLength) {
    swiper.appendSlide(slides);
    return;
  }

  var newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + 1 : activeIndexBuffer;
  var slidesBuffer = [];

  for (var i = baseLength - 1; i >= index; i -= 1) {
    var currentSlide = swiper.slides.eq(i);
    currentSlide.remove();
    slidesBuffer.unshift(currentSlide);
  }

  if (typeof slides === 'object' && 'length' in slides) {
    for (var _i = 0; _i < slides.length; _i += 1) {
      if (slides[_i]) $wrapperEl.append(slides[_i]);
    }

    newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + slides.length : activeIndexBuffer;
  } else {
    $wrapperEl.append(slides);
  }

  for (var _i2 = 0; _i2 < slidesBuffer.length; _i2 += 1) {
    $wrapperEl.append(slidesBuffer[_i2]);
  }

  if (params.loop) {
    swiper.loopCreate();
  }

  if (!(params.observer && swiper.support.observer)) {
    swiper.update();
  }

  if (params.loop) {
    swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);
  } else {
    swiper.slideTo(newActiveIndex, 0, false);
  }
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/manipulation/appendSlide.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/manipulation/appendSlide.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = appendSlide;

function appendSlide(slides) {
  var swiper = this;
  var $wrapperEl = swiper.$wrapperEl,
      params = swiper.params;

  if (params.loop) {
    swiper.loopDestroy();
  }

  if (typeof slides === 'object' && 'length' in slides) {
    for (var i = 0; i < slides.length; i += 1) {
      if (slides[i]) $wrapperEl.append(slides[i]);
    }
  } else {
    $wrapperEl.append(slides);
  }

  if (params.loop) {
    swiper.loopCreate();
  }

  if (!(params.observer && swiper.support.observer)) {
    swiper.update();
  }
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/manipulation/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/manipulation/index.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var _appendSlide = _interopRequireDefault(__webpack_require__(/*! ./appendSlide */ "./node_modules/swiper/cjs/components/core/manipulation/appendSlide.js"));

var _prependSlide = _interopRequireDefault(__webpack_require__(/*! ./prependSlide */ "./node_modules/swiper/cjs/components/core/manipulation/prependSlide.js"));

var _addSlide = _interopRequireDefault(__webpack_require__(/*! ./addSlide */ "./node_modules/swiper/cjs/components/core/manipulation/addSlide.js"));

var _removeSlide = _interopRequireDefault(__webpack_require__(/*! ./removeSlide */ "./node_modules/swiper/cjs/components/core/manipulation/removeSlide.js"));

var _removeAllSlides = _interopRequireDefault(__webpack_require__(/*! ./removeAllSlides */ "./node_modules/swiper/cjs/components/core/manipulation/removeAllSlides.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  appendSlide: _appendSlide.default,
  prependSlide: _prependSlide.default,
  addSlide: _addSlide.default,
  removeSlide: _removeSlide.default,
  removeAllSlides: _removeAllSlides.default
};
exports.default = _default;

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/manipulation/prependSlide.js":
/*!******************************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/manipulation/prependSlide.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = prependSlide;

function prependSlide(slides) {
  var swiper = this;
  var params = swiper.params,
      $wrapperEl = swiper.$wrapperEl,
      activeIndex = swiper.activeIndex;

  if (params.loop) {
    swiper.loopDestroy();
  }

  var newActiveIndex = activeIndex + 1;

  if (typeof slides === 'object' && 'length' in slides) {
    for (var i = 0; i < slides.length; i += 1) {
      if (slides[i]) $wrapperEl.prepend(slides[i]);
    }

    newActiveIndex = activeIndex + slides.length;
  } else {
    $wrapperEl.prepend(slides);
  }

  if (params.loop) {
    swiper.loopCreate();
  }

  if (!(params.observer && swiper.support.observer)) {
    swiper.update();
  }

  swiper.slideTo(newActiveIndex, 0, false);
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/manipulation/removeAllSlides.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/manipulation/removeAllSlides.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = removeAllSlides;

function removeAllSlides() {
  var swiper = this;
  var slidesIndexes = [];

  for (var i = 0; i < swiper.slides.length; i += 1) {
    slidesIndexes.push(i);
  }

  swiper.removeSlide(slidesIndexes);
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/manipulation/removeSlide.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/manipulation/removeSlide.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = removeSlide;

function removeSlide(slidesIndexes) {
  var swiper = this;
  var params = swiper.params,
      $wrapperEl = swiper.$wrapperEl,
      activeIndex = swiper.activeIndex;
  var activeIndexBuffer = activeIndex;

  if (params.loop) {
    activeIndexBuffer -= swiper.loopedSlides;
    swiper.loopDestroy();
    swiper.slides = $wrapperEl.children("." + params.slideClass);
  }

  var newActiveIndex = activeIndexBuffer;
  var indexToRemove;

  if (typeof slidesIndexes === 'object' && 'length' in slidesIndexes) {
    for (var i = 0; i < slidesIndexes.length; i += 1) {
      indexToRemove = slidesIndexes[i];
      if (swiper.slides[indexToRemove]) swiper.slides.eq(indexToRemove).remove();
      if (indexToRemove < newActiveIndex) newActiveIndex -= 1;
    }

    newActiveIndex = Math.max(newActiveIndex, 0);
  } else {
    indexToRemove = slidesIndexes;
    if (swiper.slides[indexToRemove]) swiper.slides.eq(indexToRemove).remove();
    if (indexToRemove < newActiveIndex) newActiveIndex -= 1;
    newActiveIndex = Math.max(newActiveIndex, 0);
  }

  if (params.loop) {
    swiper.loopCreate();
  }

  if (!(params.observer && swiper.support.observer)) {
    swiper.update();
  }

  if (params.loop) {
    swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);
  } else {
    swiper.slideTo(newActiveIndex, 0, false);
  }
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/modular.js":
/*!************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/modular.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var _utils = __webpack_require__(/*! ../../utils/utils */ "./node_modules/swiper/cjs/utils/utils.js");

var _default = {
  useParams: function useParams(instanceParams) {
    var instance = this;
    if (!instance.modules) return;
    Object.keys(instance.modules).forEach(function (moduleName) {
      var module = instance.modules[moduleName]; // Extend params

      if (module.params) {
        (0, _utils.extend)(instanceParams, module.params);
      }
    });
  },
  useModules: function useModules(modulesParams) {
    if (modulesParams === void 0) {
      modulesParams = {};
    }

    var instance = this;
    if (!instance.modules) return;
    Object.keys(instance.modules).forEach(function (moduleName) {
      var module = instance.modules[moduleName];
      var moduleParams = modulesParams[moduleName] || {}; // Add event listeners

      if (module.on && instance.on) {
        Object.keys(module.on).forEach(function (moduleEventName) {
          instance.on(moduleEventName, module.on[moduleEventName]);
        });
      } // Module create callback


      if (module.create) {
        module.create.bind(instance)(moduleParams);
      }
    });
  }
};
exports.default = _default;

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/slide/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/slide/index.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var _slideTo = _interopRequireDefault(__webpack_require__(/*! ./slideTo */ "./node_modules/swiper/cjs/components/core/slide/slideTo.js"));

var _slideToLoop = _interopRequireDefault(__webpack_require__(/*! ./slideToLoop */ "./node_modules/swiper/cjs/components/core/slide/slideToLoop.js"));

var _slideNext = _interopRequireDefault(__webpack_require__(/*! ./slideNext */ "./node_modules/swiper/cjs/components/core/slide/slideNext.js"));

var _slidePrev = _interopRequireDefault(__webpack_require__(/*! ./slidePrev */ "./node_modules/swiper/cjs/components/core/slide/slidePrev.js"));

var _slideReset = _interopRequireDefault(__webpack_require__(/*! ./slideReset */ "./node_modules/swiper/cjs/components/core/slide/slideReset.js"));

var _slideToClosest = _interopRequireDefault(__webpack_require__(/*! ./slideToClosest */ "./node_modules/swiper/cjs/components/core/slide/slideToClosest.js"));

var _slideToClickedSlide = _interopRequireDefault(__webpack_require__(/*! ./slideToClickedSlide */ "./node_modules/swiper/cjs/components/core/slide/slideToClickedSlide.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  slideTo: _slideTo.default,
  slideToLoop: _slideToLoop.default,
  slideNext: _slideNext.default,
  slidePrev: _slidePrev.default,
  slideReset: _slideReset.default,
  slideToClosest: _slideToClosest.default,
  slideToClickedSlide: _slideToClickedSlide.default
};
exports.default = _default;

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/slide/slideNext.js":
/*!********************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/slide/slideNext.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = slideNext;

/* eslint no-unused-vars: "off" */
function slideNext(speed, runCallbacks, internal) {
  if (speed === void 0) {
    speed = this.params.speed;
  }

  if (runCallbacks === void 0) {
    runCallbacks = true;
  }

  var swiper = this;
  var params = swiper.params,
      animating = swiper.animating,
      enabled = swiper.enabled;
  if (!enabled) return swiper;
  var increment = swiper.activeIndex < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup;

  if (params.loop) {
    if (animating && params.loopPreventsSlide) return false;
    swiper.loopFix(); // eslint-disable-next-line

    swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
  }

  return swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/slide/slidePrev.js":
/*!********************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/slide/slidePrev.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = slidePrev;

/* eslint no-unused-vars: "off" */
function slidePrev(speed, runCallbacks, internal) {
  if (speed === void 0) {
    speed = this.params.speed;
  }

  if (runCallbacks === void 0) {
    runCallbacks = true;
  }

  var swiper = this;
  var params = swiper.params,
      animating = swiper.animating,
      snapGrid = swiper.snapGrid,
      slidesGrid = swiper.slidesGrid,
      rtlTranslate = swiper.rtlTranslate,
      enabled = swiper.enabled;
  if (!enabled) return swiper;

  if (params.loop) {
    if (animating && params.loopPreventsSlide) return false;
    swiper.loopFix(); // eslint-disable-next-line

    swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
  }

  var translate = rtlTranslate ? swiper.translate : -swiper.translate;

  function normalize(val) {
    if (val < 0) return -Math.floor(Math.abs(val));
    return Math.floor(val);
  }

  var normalizedTranslate = normalize(translate);
  var normalizedSnapGrid = snapGrid.map(function (val) {
    return normalize(val);
  });
  var prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];

  if (typeof prevSnap === 'undefined' && params.cssMode) {
    snapGrid.forEach(function (snap) {
      if (!prevSnap && normalizedTranslate >= snap) prevSnap = snap;
    });
  }

  var prevIndex;

  if (typeof prevSnap !== 'undefined') {
    prevIndex = slidesGrid.indexOf(prevSnap);
    if (prevIndex < 0) prevIndex = swiper.activeIndex - 1;
  }

  return swiper.slideTo(prevIndex, speed, runCallbacks, internal);
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/slide/slideReset.js":
/*!*********************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/slide/slideReset.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = slideReset;

/* eslint no-unused-vars: "off" */
function slideReset(speed, runCallbacks, internal) {
  if (speed === void 0) {
    speed = this.params.speed;
  }

  if (runCallbacks === void 0) {
    runCallbacks = true;
  }

  var swiper = this;
  return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/slide/slideTo.js":
/*!******************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/slide/slideTo.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = slideTo;

function slideTo(index, speed, runCallbacks, internal, initial) {
  if (index === void 0) {
    index = 0;
  }

  if (speed === void 0) {
    speed = this.params.speed;
  }

  if (runCallbacks === void 0) {
    runCallbacks = true;
  }

  if (typeof index !== 'number' && typeof index !== 'string') {
    throw new Error("The 'index' argument cannot have type other than 'number' or 'string'. [" + typeof index + "] given.");
  }

  if (typeof index === 'string') {
    /**
     * The `index` argument converted from `string` to `number`.
     * @type {number}
     */
    var indexAsNumber = parseInt(index, 10);
    /**
     * Determines whether the `index` argument is a valid `number`
     * after being converted from the `string` type.
     * @type {boolean}
     */

    var isValidNumber = isFinite(indexAsNumber);

    if (!isValidNumber) {
      throw new Error("The passed-in 'index' (string) couldn't be converted to 'number'. [" + index + "] given.");
    } // Knowing that the converted `index` is a valid number,
    // we can update the original argument's value.


    index = indexAsNumber;
  }

  var swiper = this;
  var slideIndex = index;
  if (slideIndex < 0) slideIndex = 0;
  var params = swiper.params,
      snapGrid = swiper.snapGrid,
      slidesGrid = swiper.slidesGrid,
      previousIndex = swiper.previousIndex,
      activeIndex = swiper.activeIndex,
      rtl = swiper.rtlTranslate,
      wrapperEl = swiper.wrapperEl,
      enabled = swiper.enabled;

  if (swiper.animating && params.preventInteractionOnTransition || !enabled && !internal && !initial) {
    return false;
  }

  var skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex);
  var snapIndex = skip + Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);
  if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;

  if ((activeIndex || params.initialSlide || 0) === (previousIndex || 0) && runCallbacks) {
    swiper.emit('beforeSlideChangeStart');
  }

  var translate = -snapGrid[snapIndex]; // Update progress

  swiper.updateProgress(translate); // Normalize slideIndex

  if (params.normalizeSlideIndex) {
    for (var i = 0; i < slidesGrid.length; i += 1) {
      var normalizedTranslate = -Math.floor(translate * 100);
      var normalizedGird = Math.floor(slidesGrid[i] * 100);
      var normalizedGridNext = Math.floor(slidesGrid[i + 1] * 100);

      if (typeof slidesGrid[i + 1] !== 'undefined') {
        if (normalizedTranslate >= normalizedGird && normalizedTranslate < normalizedGridNext - (normalizedGridNext - normalizedGird) / 2) {
          slideIndex = i;
        } else if (normalizedTranslate >= normalizedGird && normalizedTranslate < normalizedGridNext) {
          slideIndex = i + 1;
        }
      } else if (normalizedTranslate >= normalizedGird) {
        slideIndex = i;
      }
    }
  } // Directions locks


  if (swiper.initialized && slideIndex !== activeIndex) {
    if (!swiper.allowSlideNext && translate < swiper.translate && translate < swiper.minTranslate()) {
      return false;
    }

    if (!swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate()) {
      if ((activeIndex || 0) !== slideIndex) return false;
    }
  }

  var direction;
  if (slideIndex > activeIndex) direction = 'next';else if (slideIndex < activeIndex) direction = 'prev';else direction = 'reset'; // Update Index

  if (rtl && -translate === swiper.translate || !rtl && translate === swiper.translate) {
    swiper.updateActiveIndex(slideIndex); // Update Height

    if (params.autoHeight) {
      swiper.updateAutoHeight();
    }

    swiper.updateSlidesClasses();

    if (params.effect !== 'slide') {
      swiper.setTranslate(translate);
    }

    if (direction !== 'reset') {
      swiper.transitionStart(runCallbacks, direction);
      swiper.transitionEnd(runCallbacks, direction);
    }

    return false;
  }

  if (params.cssMode) {
    var isH = swiper.isHorizontal();
    var t = -translate;

    if (rtl) {
      t = wrapperEl.scrollWidth - wrapperEl.offsetWidth - t;
    }

    if (speed === 0) {
      wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;
    } else {
      // eslint-disable-next-line
      if (wrapperEl.scrollTo) {
        var _wrapperEl$scrollTo;

        wrapperEl.scrollTo((_wrapperEl$scrollTo = {}, _wrapperEl$scrollTo[isH ? 'left' : 'top'] = t, _wrapperEl$scrollTo.behavior = 'smooth', _wrapperEl$scrollTo));
      } else {
        wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;
      }
    }

    return true;
  }

  if (speed === 0) {
    swiper.setTransition(0);
    swiper.setTranslate(translate);
    swiper.updateActiveIndex(slideIndex);
    swiper.updateSlidesClasses();
    swiper.emit('beforeTransitionStart', speed, internal);
    swiper.transitionStart(runCallbacks, direction);
    swiper.transitionEnd(runCallbacks, direction);
  } else {
    swiper.setTransition(speed);
    swiper.setTranslate(translate);
    swiper.updateActiveIndex(slideIndex);
    swiper.updateSlidesClasses();
    swiper.emit('beforeTransitionStart', speed, internal);
    swiper.transitionStart(runCallbacks, direction);

    if (!swiper.animating) {
      swiper.animating = true;

      if (!swiper.onSlideToWrapperTransitionEnd) {
        swiper.onSlideToWrapperTransitionEnd = function transitionEnd(e) {
          if (!swiper || swiper.destroyed) return;
          if (e.target !== this) return;
          swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);
          swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);
          swiper.onSlideToWrapperTransitionEnd = null;
          delete swiper.onSlideToWrapperTransitionEnd;
          swiper.transitionEnd(runCallbacks, direction);
        };
      }

      swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);
      swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);
    }
  }

  return true;
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/slide/slideToClickedSlide.js":
/*!******************************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/slide/slideToClickedSlide.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = slideToClickedSlide;

var _dom = _interopRequireDefault(__webpack_require__(/*! ../../../utils/dom */ "./node_modules/swiper/cjs/utils/dom.js"));

var _utils = __webpack_require__(/*! ../../../utils/utils */ "./node_modules/swiper/cjs/utils/utils.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function slideToClickedSlide() {
  var swiper = this;
  var params = swiper.params,
      $wrapperEl = swiper.$wrapperEl;
  var slidesPerView = params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : params.slidesPerView;
  var slideToIndex = swiper.clickedIndex;
  var realIndex;

  if (params.loop) {
    if (swiper.animating) return;
    realIndex = parseInt((0, _dom.default)(swiper.clickedSlide).attr('data-swiper-slide-index'), 10);

    if (params.centeredSlides) {
      if (slideToIndex < swiper.loopedSlides - slidesPerView / 2 || slideToIndex > swiper.slides.length - swiper.loopedSlides + slidesPerView / 2) {
        swiper.loopFix();
        slideToIndex = $wrapperEl.children("." + params.slideClass + "[data-swiper-slide-index=\"" + realIndex + "\"]:not(." + params.slideDuplicateClass + ")").eq(0).index();
        (0, _utils.nextTick)(function () {
          swiper.slideTo(slideToIndex);
        });
      } else {
        swiper.slideTo(slideToIndex);
      }
    } else if (slideToIndex > swiper.slides.length - slidesPerView) {
      swiper.loopFix();
      slideToIndex = $wrapperEl.children("." + params.slideClass + "[data-swiper-slide-index=\"" + realIndex + "\"]:not(." + params.slideDuplicateClass + ")").eq(0).index();
      (0, _utils.nextTick)(function () {
        swiper.slideTo(slideToIndex);
      });
    } else {
      swiper.slideTo(slideToIndex);
    }
  } else {
    swiper.slideTo(slideToIndex);
  }
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/slide/slideToClosest.js":
/*!*************************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/slide/slideToClosest.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = slideToClosest;

/* eslint no-unused-vars: "off" */
function slideToClosest(speed, runCallbacks, internal, threshold) {
  if (speed === void 0) {
    speed = this.params.speed;
  }

  if (runCallbacks === void 0) {
    runCallbacks = true;
  }

  if (threshold === void 0) {
    threshold = 0.5;
  }

  var swiper = this;
  var index = swiper.activeIndex;
  var skip = Math.min(swiper.params.slidesPerGroupSkip, index);
  var snapIndex = skip + Math.floor((index - skip) / swiper.params.slidesPerGroup);
  var translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;

  if (translate >= swiper.snapGrid[snapIndex]) {
    // The current translate is on or after the current snap index, so the choice
    // is between the current index and the one after it.
    var currentSnap = swiper.snapGrid[snapIndex];
    var nextSnap = swiper.snapGrid[snapIndex + 1];

    if (translate - currentSnap > (nextSnap - currentSnap) * threshold) {
      index += swiper.params.slidesPerGroup;
    }
  } else {
    // The current translate is before the current snap index, so the choice
    // is between the current index and the one before it.
    var prevSnap = swiper.snapGrid[snapIndex - 1];
    var _currentSnap = swiper.snapGrid[snapIndex];

    if (translate - prevSnap <= (_currentSnap - prevSnap) * threshold) {
      index -= swiper.params.slidesPerGroup;
    }
  }

  index = Math.max(index, 0);
  index = Math.min(index, swiper.slidesGrid.length - 1);
  return swiper.slideTo(index, speed, runCallbacks, internal);
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/slide/slideToLoop.js":
/*!**********************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/slide/slideToLoop.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = slideToLoop;

function slideToLoop(index, speed, runCallbacks, internal) {
  if (index === void 0) {
    index = 0;
  }

  if (speed === void 0) {
    speed = this.params.speed;
  }

  if (runCallbacks === void 0) {
    runCallbacks = true;
  }

  var swiper = this;
  var newIndex = index;

  if (swiper.params.loop) {
    newIndex += swiper.loopedSlides;
  }

  return swiper.slideTo(newIndex, speed, runCallbacks, internal);
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/transition/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/transition/index.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var _setTransition = _interopRequireDefault(__webpack_require__(/*! ./setTransition */ "./node_modules/swiper/cjs/components/core/transition/setTransition.js"));

var _transitionStart = _interopRequireDefault(__webpack_require__(/*! ./transitionStart */ "./node_modules/swiper/cjs/components/core/transition/transitionStart.js"));

var _transitionEnd = _interopRequireDefault(__webpack_require__(/*! ./transitionEnd */ "./node_modules/swiper/cjs/components/core/transition/transitionEnd.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  setTransition: _setTransition.default,
  transitionStart: _transitionStart.default,
  transitionEnd: _transitionEnd.default
};
exports.default = _default;

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/transition/setTransition.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/transition/setTransition.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = setTransition;

function setTransition(duration, byController) {
  var swiper = this;

  if (!swiper.params.cssMode) {
    swiper.$wrapperEl.transition(duration);
  }

  swiper.emit('setTransition', duration, byController);
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/transition/transitionEnd.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/transition/transitionEnd.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = transitionEnd;

function transitionEnd(runCallbacks, direction) {
  if (runCallbacks === void 0) {
    runCallbacks = true;
  }

  var swiper = this;
  var activeIndex = swiper.activeIndex,
      previousIndex = swiper.previousIndex,
      params = swiper.params;
  swiper.animating = false;
  if (params.cssMode) return;
  swiper.setTransition(0);
  var dir = direction;

  if (!dir) {
    if (activeIndex > previousIndex) dir = 'next';else if (activeIndex < previousIndex) dir = 'prev';else dir = 'reset';
  }

  swiper.emit('transitionEnd');

  if (runCallbacks && activeIndex !== previousIndex) {
    if (dir === 'reset') {
      swiper.emit('slideResetTransitionEnd');
      return;
    }

    swiper.emit('slideChangeTransitionEnd');

    if (dir === 'next') {
      swiper.emit('slideNextTransitionEnd');
    } else {
      swiper.emit('slidePrevTransitionEnd');
    }
  }
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/transition/transitionStart.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/transition/transitionStart.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = transitionStart;

function transitionStart(runCallbacks, direction) {
  if (runCallbacks === void 0) {
    runCallbacks = true;
  }

  var swiper = this;
  var activeIndex = swiper.activeIndex,
      params = swiper.params,
      previousIndex = swiper.previousIndex;
  if (params.cssMode) return;

  if (params.autoHeight) {
    swiper.updateAutoHeight();
  }

  var dir = direction;

  if (!dir) {
    if (activeIndex > previousIndex) dir = 'next';else if (activeIndex < previousIndex) dir = 'prev';else dir = 'reset';
  }

  swiper.emit('transitionStart');

  if (runCallbacks && activeIndex !== previousIndex) {
    if (dir === 'reset') {
      swiper.emit('slideResetTransitionStart');
      return;
    }

    swiper.emit('slideChangeTransitionStart');

    if (dir === 'next') {
      swiper.emit('slideNextTransitionStart');
    } else {
      swiper.emit('slidePrevTransitionStart');
    }
  }
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/translate/getTranslate.js":
/*!***************************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/translate/getTranslate.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = getSwiperTranslate;

var _utils = __webpack_require__(/*! ../../../utils/utils */ "./node_modules/swiper/cjs/utils/utils.js");

function getSwiperTranslate(axis) {
  if (axis === void 0) {
    axis = this.isHorizontal() ? 'x' : 'y';
  }

  var swiper = this;
  var params = swiper.params,
      rtl = swiper.rtlTranslate,
      translate = swiper.translate,
      $wrapperEl = swiper.$wrapperEl;

  if (params.virtualTranslate) {
    return rtl ? -translate : translate;
  }

  if (params.cssMode) {
    return translate;
  }

  var currentTranslate = (0, _utils.getTranslate)($wrapperEl[0], axis);
  if (rtl) currentTranslate = -currentTranslate;
  return currentTranslate || 0;
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/translate/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/translate/index.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var _getTranslate = _interopRequireDefault(__webpack_require__(/*! ./getTranslate */ "./node_modules/swiper/cjs/components/core/translate/getTranslate.js"));

var _setTranslate = _interopRequireDefault(__webpack_require__(/*! ./setTranslate */ "./node_modules/swiper/cjs/components/core/translate/setTranslate.js"));

var _minTranslate = _interopRequireDefault(__webpack_require__(/*! ./minTranslate */ "./node_modules/swiper/cjs/components/core/translate/minTranslate.js"));

var _maxTranslate = _interopRequireDefault(__webpack_require__(/*! ./maxTranslate */ "./node_modules/swiper/cjs/components/core/translate/maxTranslate.js"));

var _translateTo = _interopRequireDefault(__webpack_require__(/*! ./translateTo */ "./node_modules/swiper/cjs/components/core/translate/translateTo.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  getTranslate: _getTranslate.default,
  setTranslate: _setTranslate.default,
  minTranslate: _minTranslate.default,
  maxTranslate: _maxTranslate.default,
  translateTo: _translateTo.default
};
exports.default = _default;

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/translate/maxTranslate.js":
/*!***************************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/translate/maxTranslate.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = maxTranslate;

function maxTranslate() {
  return -this.snapGrid[this.snapGrid.length - 1];
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/translate/minTranslate.js":
/*!***************************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/translate/minTranslate.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = minTranslate;

function minTranslate() {
  return -this.snapGrid[0];
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/translate/setTranslate.js":
/*!***************************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/translate/setTranslate.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = setTranslate;

function setTranslate(translate, byController) {
  var swiper = this;
  var rtl = swiper.rtlTranslate,
      params = swiper.params,
      $wrapperEl = swiper.$wrapperEl,
      wrapperEl = swiper.wrapperEl,
      progress = swiper.progress;
  var x = 0;
  var y = 0;
  var z = 0;

  if (swiper.isHorizontal()) {
    x = rtl ? -translate : translate;
  } else {
    y = translate;
  }

  if (params.roundLengths) {
    x = Math.floor(x);
    y = Math.floor(y);
  }

  if (params.cssMode) {
    wrapperEl[swiper.isHorizontal() ? 'scrollLeft' : 'scrollTop'] = swiper.isHorizontal() ? -x : -y;
  } else if (!params.virtualTranslate) {
    $wrapperEl.transform("translate3d(" + x + "px, " + y + "px, " + z + "px)");
  }

  swiper.previousTranslate = swiper.translate;
  swiper.translate = swiper.isHorizontal() ? x : y; // Check if we need to update progress

  var newProgress;
  var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();

  if (translatesDiff === 0) {
    newProgress = 0;
  } else {
    newProgress = (translate - swiper.minTranslate()) / translatesDiff;
  }

  if (newProgress !== progress) {
    swiper.updateProgress(translate);
  }

  swiper.emit('setTranslate', swiper.translate, byController);
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/translate/translateTo.js":
/*!**************************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/translate/translateTo.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = translateTo;

function translateTo(translate, speed, runCallbacks, translateBounds, internal) {
  if (translate === void 0) {
    translate = 0;
  }

  if (speed === void 0) {
    speed = this.params.speed;
  }

  if (runCallbacks === void 0) {
    runCallbacks = true;
  }

  if (translateBounds === void 0) {
    translateBounds = true;
  }

  var swiper = this;
  var params = swiper.params,
      wrapperEl = swiper.wrapperEl;

  if (swiper.animating && params.preventInteractionOnTransition) {
    return false;
  }

  var minTranslate = swiper.minTranslate();
  var maxTranslate = swiper.maxTranslate();
  var newTranslate;
  if (translateBounds && translate > minTranslate) newTranslate = minTranslate;else if (translateBounds && translate < maxTranslate) newTranslate = maxTranslate;else newTranslate = translate; // Update progress

  swiper.updateProgress(newTranslate);

  if (params.cssMode) {
    var isH = swiper.isHorizontal();

    if (speed === 0) {
      wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -newTranslate;
    } else {
      // eslint-disable-next-line
      if (wrapperEl.scrollTo) {
        var _wrapperEl$scrollTo;

        wrapperEl.scrollTo((_wrapperEl$scrollTo = {}, _wrapperEl$scrollTo[isH ? 'left' : 'top'] = -newTranslate, _wrapperEl$scrollTo.behavior = 'smooth', _wrapperEl$scrollTo));
      } else {
        wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -newTranslate;
      }
    }

    return true;
  }

  if (speed === 0) {
    swiper.setTransition(0);
    swiper.setTranslate(newTranslate);

    if (runCallbacks) {
      swiper.emit('beforeTransitionStart', speed, internal);
      swiper.emit('transitionEnd');
    }
  } else {
    swiper.setTransition(speed);
    swiper.setTranslate(newTranslate);

    if (runCallbacks) {
      swiper.emit('beforeTransitionStart', speed, internal);
      swiper.emit('transitionStart');
    }

    if (!swiper.animating) {
      swiper.animating = true;

      if (!swiper.onTranslateToWrapperTransitionEnd) {
        swiper.onTranslateToWrapperTransitionEnd = function transitionEnd(e) {
          if (!swiper || swiper.destroyed) return;
          if (e.target !== this) return;
          swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);
          swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onTranslateToWrapperTransitionEnd);
          swiper.onTranslateToWrapperTransitionEnd = null;
          delete swiper.onTranslateToWrapperTransitionEnd;

          if (runCallbacks) {
            swiper.emit('transitionEnd');
          }
        };
      }

      swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);
      swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onTranslateToWrapperTransitionEnd);
    }
  }

  return true;
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/update/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/update/index.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var _updateSize = _interopRequireDefault(__webpack_require__(/*! ./updateSize */ "./node_modules/swiper/cjs/components/core/update/updateSize.js"));

var _updateSlides = _interopRequireDefault(__webpack_require__(/*! ./updateSlides */ "./node_modules/swiper/cjs/components/core/update/updateSlides.js"));

var _updateAutoHeight = _interopRequireDefault(__webpack_require__(/*! ./updateAutoHeight */ "./node_modules/swiper/cjs/components/core/update/updateAutoHeight.js"));

var _updateSlidesOffset = _interopRequireDefault(__webpack_require__(/*! ./updateSlidesOffset */ "./node_modules/swiper/cjs/components/core/update/updateSlidesOffset.js"));

var _updateSlidesProgress = _interopRequireDefault(__webpack_require__(/*! ./updateSlidesProgress */ "./node_modules/swiper/cjs/components/core/update/updateSlidesProgress.js"));

var _updateProgress = _interopRequireDefault(__webpack_require__(/*! ./updateProgress */ "./node_modules/swiper/cjs/components/core/update/updateProgress.js"));

var _updateSlidesClasses = _interopRequireDefault(__webpack_require__(/*! ./updateSlidesClasses */ "./node_modules/swiper/cjs/components/core/update/updateSlidesClasses.js"));

var _updateActiveIndex = _interopRequireDefault(__webpack_require__(/*! ./updateActiveIndex */ "./node_modules/swiper/cjs/components/core/update/updateActiveIndex.js"));

var _updateClickedSlide = _interopRequireDefault(__webpack_require__(/*! ./updateClickedSlide */ "./node_modules/swiper/cjs/components/core/update/updateClickedSlide.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  updateSize: _updateSize.default,
  updateSlides: _updateSlides.default,
  updateAutoHeight: _updateAutoHeight.default,
  updateSlidesOffset: _updateSlidesOffset.default,
  updateSlidesProgress: _updateSlidesProgress.default,
  updateProgress: _updateProgress.default,
  updateSlidesClasses: _updateSlidesClasses.default,
  updateActiveIndex: _updateActiveIndex.default,
  updateClickedSlide: _updateClickedSlide.default
};
exports.default = _default;

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/update/updateActiveIndex.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/update/updateActiveIndex.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = updateActiveIndex;

var _utils = __webpack_require__(/*! ../../../utils/utils */ "./node_modules/swiper/cjs/utils/utils.js");

function updateActiveIndex(newActiveIndex) {
  var swiper = this;
  var translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;
  var slidesGrid = swiper.slidesGrid,
      snapGrid = swiper.snapGrid,
      params = swiper.params,
      previousIndex = swiper.activeIndex,
      previousRealIndex = swiper.realIndex,
      previousSnapIndex = swiper.snapIndex;
  var activeIndex = newActiveIndex;
  var snapIndex;

  if (typeof activeIndex === 'undefined') {
    for (var i = 0; i < slidesGrid.length; i += 1) {
      if (typeof slidesGrid[i + 1] !== 'undefined') {
        if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1] - (slidesGrid[i + 1] - slidesGrid[i]) / 2) {
          activeIndex = i;
        } else if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1]) {
          activeIndex = i + 1;
        }
      } else if (translate >= slidesGrid[i]) {
        activeIndex = i;
      }
    } // Normalize slideIndex


    if (params.normalizeSlideIndex) {
      if (activeIndex < 0 || typeof activeIndex === 'undefined') activeIndex = 0;
    }
  }

  if (snapGrid.indexOf(translate) >= 0) {
    snapIndex = snapGrid.indexOf(translate);
  } else {
    var skip = Math.min(params.slidesPerGroupSkip, activeIndex);
    snapIndex = skip + Math.floor((activeIndex - skip) / params.slidesPerGroup);
  }

  if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;

  if (activeIndex === previousIndex) {
    if (snapIndex !== previousSnapIndex) {
      swiper.snapIndex = snapIndex;
      swiper.emit('snapIndexChange');
    }

    return;
  } // Get real index


  var realIndex = parseInt(swiper.slides.eq(activeIndex).attr('data-swiper-slide-index') || activeIndex, 10);
  (0, _utils.extend)(swiper, {
    snapIndex: snapIndex,
    realIndex: realIndex,
    previousIndex: previousIndex,
    activeIndex: activeIndex
  });
  swiper.emit('activeIndexChange');
  swiper.emit('snapIndexChange');

  if (previousRealIndex !== realIndex) {
    swiper.emit('realIndexChange');
  }

  if (swiper.initialized || swiper.params.runCallbacksOnInit) {
    swiper.emit('slideChange');
  }
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/update/updateAutoHeight.js":
/*!****************************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/update/updateAutoHeight.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = updateAutoHeight;

function updateAutoHeight(speed) {
  var swiper = this;
  var activeSlides = [];
  var isVirtual = swiper.virtual && swiper.params.virtual.enabled;
  var newHeight = 0;
  var i;

  if (typeof speed === 'number') {
    swiper.setTransition(speed);
  } else if (speed === true) {
    swiper.setTransition(swiper.params.speed);
  }

  var getSlideByIndex = function getSlideByIndex(index) {
    if (isVirtual) {
      return swiper.slides.filter(function (el) {
        return parseInt(el.getAttribute('data-swiper-slide-index'), 10) === index;
      })[0];
    }

    return swiper.slides.eq(index)[0];
  }; // Find slides currently in view


  if (swiper.params.slidesPerView !== 'auto' && swiper.params.slidesPerView > 1) {
    if (swiper.params.centeredSlides) {
      swiper.visibleSlides.each(function (slide) {
        activeSlides.push(slide);
      });
    } else {
      for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {
        var index = swiper.activeIndex + i;
        if (index > swiper.slides.length && !isVirtual) break;
        activeSlides.push(getSlideByIndex(index));
      }
    }
  } else {
    activeSlides.push(getSlideByIndex(swiper.activeIndex));
  } // Find new height from highest slide in view


  for (i = 0; i < activeSlides.length; i += 1) {
    if (typeof activeSlides[i] !== 'undefined') {
      var height = activeSlides[i].offsetHeight;
      newHeight = height > newHeight ? height : newHeight;
    }
  } // Update Height


  if (newHeight) swiper.$wrapperEl.css('height', newHeight + "px");
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/update/updateClickedSlide.js":
/*!******************************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/update/updateClickedSlide.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = updateClickedSlide;

var _dom = _interopRequireDefault(__webpack_require__(/*! ../../../utils/dom */ "./node_modules/swiper/cjs/utils/dom.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function updateClickedSlide(e) {
  var swiper = this;
  var params = swiper.params;
  var slide = (0, _dom.default)(e.target).closest("." + params.slideClass)[0];
  var slideFound = false;
  var slideIndex;

  if (slide) {
    for (var i = 0; i < swiper.slides.length; i += 1) {
      if (swiper.slides[i] === slide) {
        slideFound = true;
        slideIndex = i;
        break;
      }
    }
  }

  if (slide && slideFound) {
    swiper.clickedSlide = slide;

    if (swiper.virtual && swiper.params.virtual.enabled) {
      swiper.clickedIndex = parseInt((0, _dom.default)(slide).attr('data-swiper-slide-index'), 10);
    } else {
      swiper.clickedIndex = slideIndex;
    }
  } else {
    swiper.clickedSlide = undefined;
    swiper.clickedIndex = undefined;
    return;
  }

  if (params.slideToClickedSlide && swiper.clickedIndex !== undefined && swiper.clickedIndex !== swiper.activeIndex) {
    swiper.slideToClickedSlide();
  }
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/update/updateProgress.js":
/*!**************************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/update/updateProgress.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = updateProgress;

var _utils = __webpack_require__(/*! ../../../utils/utils */ "./node_modules/swiper/cjs/utils/utils.js");

function updateProgress(translate) {
  var swiper = this;

  if (typeof translate === 'undefined') {
    var multiplier = swiper.rtlTranslate ? -1 : 1; // eslint-disable-next-line

    translate = swiper && swiper.translate && swiper.translate * multiplier || 0;
  }

  var params = swiper.params;
  var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
  var progress = swiper.progress,
      isBeginning = swiper.isBeginning,
      isEnd = swiper.isEnd;
  var wasBeginning = isBeginning;
  var wasEnd = isEnd;

  if (translatesDiff === 0) {
    progress = 0;
    isBeginning = true;
    isEnd = true;
  } else {
    progress = (translate - swiper.minTranslate()) / translatesDiff;
    isBeginning = progress <= 0;
    isEnd = progress >= 1;
  }

  (0, _utils.extend)(swiper, {
    progress: progress,
    isBeginning: isBeginning,
    isEnd: isEnd
  });
  if (params.watchSlidesProgress || params.watchSlidesVisibility || params.centeredSlides && params.autoHeight) swiper.updateSlidesProgress(translate);

  if (isBeginning && !wasBeginning) {
    swiper.emit('reachBeginning toEdge');
  }

  if (isEnd && !wasEnd) {
    swiper.emit('reachEnd toEdge');
  }

  if (wasBeginning && !isBeginning || wasEnd && !isEnd) {
    swiper.emit('fromEdge');
  }

  swiper.emit('progress', progress);
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/update/updateSize.js":
/*!**********************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/update/updateSize.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = updateSize;

var _utils = __webpack_require__(/*! ../../../utils/utils */ "./node_modules/swiper/cjs/utils/utils.js");

function updateSize() {
  var swiper = this;
  var width;
  var height;
  var $el = swiper.$el;

  if (typeof swiper.params.width !== 'undefined' && swiper.params.width !== null) {
    width = swiper.params.width;
  } else {
    width = $el[0].clientWidth;
  }

  if (typeof swiper.params.height !== 'undefined' && swiper.params.height !== null) {
    height = swiper.params.height;
  } else {
    height = $el[0].clientHeight;
  }

  if (width === 0 && swiper.isHorizontal() || height === 0 && swiper.isVertical()) {
    return;
  } // Subtract paddings


  width = width - parseInt($el.css('padding-left') || 0, 10) - parseInt($el.css('padding-right') || 0, 10);
  height = height - parseInt($el.css('padding-top') || 0, 10) - parseInt($el.css('padding-bottom') || 0, 10);
  if (Number.isNaN(width)) width = 0;
  if (Number.isNaN(height)) height = 0;
  (0, _utils.extend)(swiper, {
    width: width,
    height: height,
    size: swiper.isHorizontal() ? width : height
  });
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/update/updateSlides.js":
/*!************************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/update/updateSlides.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = updateSlides;

var _utils = __webpack_require__(/*! ../../../utils/utils */ "./node_modules/swiper/cjs/utils/utils.js");

function updateSlides() {
  var swiper = this;

  function getDirectionLabel(property) {
    if (swiper.isHorizontal()) {
      return property;
    } // prettier-ignore


    return {
      'width': 'height',
      'margin-top': 'margin-left',
      'margin-bottom ': 'margin-right',
      'margin-left': 'margin-top',
      'margin-right': 'margin-bottom',
      'padding-left': 'padding-top',
      'padding-right': 'padding-bottom',
      'marginRight': 'marginBottom'
    }[property];
  }

  function getDirectionPropertyValue(node, label) {
    return parseFloat(node.getPropertyValue(getDirectionLabel(label)) || 0);
  }

  var params = swiper.params;
  var $wrapperEl = swiper.$wrapperEl,
      swiperSize = swiper.size,
      rtl = swiper.rtlTranslate,
      wrongRTL = swiper.wrongRTL;
  var isVirtual = swiper.virtual && params.virtual.enabled;
  var previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;
  var slides = $wrapperEl.children("." + swiper.params.slideClass);
  var slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;
  var snapGrid = [];
  var slidesGrid = [];
  var slidesSizesGrid = [];
  var offsetBefore = params.slidesOffsetBefore;

  if (typeof offsetBefore === 'function') {
    offsetBefore = params.slidesOffsetBefore.call(swiper);
  }

  var offsetAfter = params.slidesOffsetAfter;

  if (typeof offsetAfter === 'function') {
    offsetAfter = params.slidesOffsetAfter.call(swiper);
  }

  var previousSnapGridLength = swiper.snapGrid.length;
  var previousSlidesGridLength = swiper.slidesGrid.length;
  var spaceBetween = params.spaceBetween;
  var slidePosition = -offsetBefore;
  var prevSlideSize = 0;
  var index = 0;

  if (typeof swiperSize === 'undefined') {
    return;
  }

  if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {
    spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiperSize;
  }

  swiper.virtualSize = -spaceBetween; // reset margins

  if (rtl) slides.css({
    marginLeft: '',
    marginBottom: '',
    marginTop: ''
  });else slides.css({
    marginRight: '',
    marginBottom: '',
    marginTop: ''
  });
  var slidesNumberEvenToRows;

  if (params.slidesPerColumn > 1) {
    if (Math.floor(slidesLength / params.slidesPerColumn) === slidesLength / swiper.params.slidesPerColumn) {
      slidesNumberEvenToRows = slidesLength;
    } else {
      slidesNumberEvenToRows = Math.ceil(slidesLength / params.slidesPerColumn) * params.slidesPerColumn;
    }

    if (params.slidesPerView !== 'auto' && params.slidesPerColumnFill === 'row') {
      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, params.slidesPerView * params.slidesPerColumn);
    }
  } // Calc slides


  var slideSize;
  var slidesPerColumn = params.slidesPerColumn;
  var slidesPerRow = slidesNumberEvenToRows / slidesPerColumn;
  var numFullColumns = Math.floor(slidesLength / params.slidesPerColumn);

  for (var i = 0; i < slidesLength; i += 1) {
    slideSize = 0;
    var slide = slides.eq(i);

    if (params.slidesPerColumn > 1) {
      // Set slides order
      var newSlideOrderIndex = void 0;
      var column = void 0;
      var row = void 0;

      if (params.slidesPerColumnFill === 'row' && params.slidesPerGroup > 1) {
        var groupIndex = Math.floor(i / (params.slidesPerGroup * params.slidesPerColumn));
        var slideIndexInGroup = i - params.slidesPerColumn * params.slidesPerGroup * groupIndex;
        var columnsInGroup = groupIndex === 0 ? params.slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * slidesPerColumn * params.slidesPerGroup) / slidesPerColumn), params.slidesPerGroup);
        row = Math.floor(slideIndexInGroup / columnsInGroup);
        column = slideIndexInGroup - row * columnsInGroup + groupIndex * params.slidesPerGroup;
        newSlideOrderIndex = column + row * slidesNumberEvenToRows / slidesPerColumn;
        slide.css({
          '-webkit-box-ordinal-group': newSlideOrderIndex,
          '-moz-box-ordinal-group': newSlideOrderIndex,
          '-ms-flex-order': newSlideOrderIndex,
          '-webkit-order': newSlideOrderIndex,
          order: newSlideOrderIndex
        });
      } else if (params.slidesPerColumnFill === 'column') {
        column = Math.floor(i / slidesPerColumn);
        row = i - column * slidesPerColumn;

        if (column > numFullColumns || column === numFullColumns && row === slidesPerColumn - 1) {
          row += 1;

          if (row >= slidesPerColumn) {
            row = 0;
            column += 1;
          }
        }
      } else {
        row = Math.floor(i / slidesPerRow);
        column = i - row * slidesPerRow;
      }

      slide.css(getDirectionLabel('margin-top'), row !== 0 ? params.spaceBetween && params.spaceBetween + "px" : '');
    }

    if (slide.css('display') === 'none') continue; // eslint-disable-line

    if (params.slidesPerView === 'auto') {
      var slideStyles = getComputedStyle(slide[0]);
      var currentTransform = slide[0].style.transform;
      var currentWebKitTransform = slide[0].style.webkitTransform;

      if (currentTransform) {
        slide[0].style.transform = 'none';
      }

      if (currentWebKitTransform) {
        slide[0].style.webkitTransform = 'none';
      }

      if (params.roundLengths) {
        slideSize = swiper.isHorizontal() ? slide.outerWidth(true) : slide.outerHeight(true);
      } else {
        // eslint-disable-next-line
        var width = getDirectionPropertyValue(slideStyles, 'width');
        var paddingLeft = getDirectionPropertyValue(slideStyles, 'padding-left');
        var paddingRight = getDirectionPropertyValue(slideStyles, 'padding-right');
        var marginLeft = getDirectionPropertyValue(slideStyles, 'margin-left');
        var marginRight = getDirectionPropertyValue(slideStyles, 'margin-right');
        var boxSizing = slideStyles.getPropertyValue('box-sizing');

        if (boxSizing && boxSizing === 'border-box') {
          slideSize = width + marginLeft + marginRight;
        } else {
          var _slide$ = slide[0],
              clientWidth = _slide$.clientWidth,
              offsetWidth = _slide$.offsetWidth;
          slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight + (offsetWidth - clientWidth);
        }
      }

      if (currentTransform) {
        slide[0].style.transform = currentTransform;
      }

      if (currentWebKitTransform) {
        slide[0].style.webkitTransform = currentWebKitTransform;
      }

      if (params.roundLengths) slideSize = Math.floor(slideSize);
    } else {
      slideSize = (swiperSize - (params.slidesPerView - 1) * spaceBetween) / params.slidesPerView;
      if (params.roundLengths) slideSize = Math.floor(slideSize);

      if (slides[i]) {
        slides[i].style[getDirectionLabel('width')] = slideSize + "px";
      }
    }

    if (slides[i]) {
      slides[i].swiperSlideSize = slideSize;
    }

    slidesSizesGrid.push(slideSize);

    if (params.centeredSlides) {
      slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;
      if (prevSlideSize === 0 && i !== 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;
      if (i === 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;
      if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;
      if (params.roundLengths) slidePosition = Math.floor(slidePosition);
      if (index % params.slidesPerGroup === 0) snapGrid.push(slidePosition);
      slidesGrid.push(slidePosition);
    } else {
      if (params.roundLengths) slidePosition = Math.floor(slidePosition);
      if ((index - Math.min(swiper.params.slidesPerGroupSkip, index)) % swiper.params.slidesPerGroup === 0) snapGrid.push(slidePosition);
      slidesGrid.push(slidePosition);
      slidePosition = slidePosition + slideSize + spaceBetween;
    }

    swiper.virtualSize += slideSize + spaceBetween;
    prevSlideSize = slideSize;
    index += 1;
  }

  swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;
  var newSlidesGrid;

  if (rtl && wrongRTL && (params.effect === 'slide' || params.effect === 'coverflow')) {
    $wrapperEl.css({
      width: swiper.virtualSize + params.spaceBetween + "px"
    });
  }

  if (params.setWrapperSize) {
    var _$wrapperEl$css;

    $wrapperEl.css((_$wrapperEl$css = {}, _$wrapperEl$css[getDirectionLabel('width')] = swiper.virtualSize + params.spaceBetween + "px", _$wrapperEl$css));
  }

  if (params.slidesPerColumn > 1) {
    var _$wrapperEl$css2;

    swiper.virtualSize = (slideSize + params.spaceBetween) * slidesNumberEvenToRows;
    swiper.virtualSize = Math.ceil(swiper.virtualSize / params.slidesPerColumn) - params.spaceBetween;
    $wrapperEl.css((_$wrapperEl$css2 = {}, _$wrapperEl$css2[getDirectionLabel('width')] = swiper.virtualSize + params.spaceBetween + "px", _$wrapperEl$css2));

    if (params.centeredSlides) {
      newSlidesGrid = [];

      for (var _i = 0; _i < snapGrid.length; _i += 1) {
        var slidesGridItem = snapGrid[_i];
        if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);
        if (snapGrid[_i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);
      }

      snapGrid = newSlidesGrid;
    }
  } // Remove last grid elements depending on width


  if (!params.centeredSlides) {
    newSlidesGrid = [];

    for (var _i2 = 0; _i2 < snapGrid.length; _i2 += 1) {
      var _slidesGridItem = snapGrid[_i2];
      if (params.roundLengths) _slidesGridItem = Math.floor(_slidesGridItem);

      if (snapGrid[_i2] <= swiper.virtualSize - swiperSize) {
        newSlidesGrid.push(_slidesGridItem);
      }
    }

    snapGrid = newSlidesGrid;

    if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {
      snapGrid.push(swiper.virtualSize - swiperSize);
    }
  }

  if (snapGrid.length === 0) snapGrid = [0];

  if (params.spaceBetween !== 0) {
    var _slides$filter$css;

    var key = swiper.isHorizontal() && rtl ? 'marginLeft' : getDirectionLabel('marginRight');
    slides.filter(function (_, slideIndex) {
      if (!params.cssMode) return true;

      if (slideIndex === slides.length - 1) {
        return false;
      }

      return true;
    }).css((_slides$filter$css = {}, _slides$filter$css[key] = spaceBetween + "px", _slides$filter$css));
  }

  if (params.centeredSlides && params.centeredSlidesBounds) {
    var allSlidesSize = 0;
    slidesSizesGrid.forEach(function (slideSizeValue) {
      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);
    });
    allSlidesSize -= params.spaceBetween;
    var maxSnap = allSlidesSize - swiperSize;
    snapGrid = snapGrid.map(function (snap) {
      if (snap < 0) return -offsetBefore;
      if (snap > maxSnap) return maxSnap + offsetAfter;
      return snap;
    });
  }

  if (params.centerInsufficientSlides) {
    var _allSlidesSize = 0;
    slidesSizesGrid.forEach(function (slideSizeValue) {
      _allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);
    });
    _allSlidesSize -= params.spaceBetween;

    if (_allSlidesSize < swiperSize) {
      var allSlidesOffset = (swiperSize - _allSlidesSize) / 2;
      snapGrid.forEach(function (snap, snapIndex) {
        snapGrid[snapIndex] = snap - allSlidesOffset;
      });
      slidesGrid.forEach(function (snap, snapIndex) {
        slidesGrid[snapIndex] = snap + allSlidesOffset;
      });
    }
  }

  (0, _utils.extend)(swiper, {
    slides: slides,
    snapGrid: snapGrid,
    slidesGrid: slidesGrid,
    slidesSizesGrid: slidesSizesGrid
  });

  if (slidesLength !== previousSlidesLength) {
    swiper.emit('slidesLengthChange');
  }

  if (snapGrid.length !== previousSnapGridLength) {
    if (swiper.params.watchOverflow) swiper.checkOverflow();
    swiper.emit('snapGridLengthChange');
  }

  if (slidesGrid.length !== previousSlidesGridLength) {
    swiper.emit('slidesGridLengthChange');
  }

  if (params.watchSlidesProgress || params.watchSlidesVisibility) {
    swiper.updateSlidesOffset();
  }
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/update/updateSlidesClasses.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/update/updateSlidesClasses.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = updateSlidesClasses;

function updateSlidesClasses() {
  var swiper = this;
  var slides = swiper.slides,
      params = swiper.params,
      $wrapperEl = swiper.$wrapperEl,
      activeIndex = swiper.activeIndex,
      realIndex = swiper.realIndex;
  var isVirtual = swiper.virtual && params.virtual.enabled;
  slides.removeClass(params.slideActiveClass + " " + params.slideNextClass + " " + params.slidePrevClass + " " + params.slideDuplicateActiveClass + " " + params.slideDuplicateNextClass + " " + params.slideDuplicatePrevClass);
  var activeSlide;

  if (isVirtual) {
    activeSlide = swiper.$wrapperEl.find("." + params.slideClass + "[data-swiper-slide-index=\"" + activeIndex + "\"]");
  } else {
    activeSlide = slides.eq(activeIndex);
  } // Active classes


  activeSlide.addClass(params.slideActiveClass);

  if (params.loop) {
    // Duplicate to all looped slides
    if (activeSlide.hasClass(params.slideDuplicateClass)) {
      $wrapperEl.children("." + params.slideClass + ":not(." + params.slideDuplicateClass + ")[data-swiper-slide-index=\"" + realIndex + "\"]").addClass(params.slideDuplicateActiveClass);
    } else {
      $wrapperEl.children("." + params.slideClass + "." + params.slideDuplicateClass + "[data-swiper-slide-index=\"" + realIndex + "\"]").addClass(params.slideDuplicateActiveClass);
    }
  } // Next Slide


  var nextSlide = activeSlide.nextAll("." + params.slideClass).eq(0).addClass(params.slideNextClass);

  if (params.loop && nextSlide.length === 0) {
    nextSlide = slides.eq(0);
    nextSlide.addClass(params.slideNextClass);
  } // Prev Slide


  var prevSlide = activeSlide.prevAll("." + params.slideClass).eq(0).addClass(params.slidePrevClass);

  if (params.loop && prevSlide.length === 0) {
    prevSlide = slides.eq(-1);
    prevSlide.addClass(params.slidePrevClass);
  }

  if (params.loop) {
    // Duplicate to all looped slides
    if (nextSlide.hasClass(params.slideDuplicateClass)) {
      $wrapperEl.children("." + params.slideClass + ":not(." + params.slideDuplicateClass + ")[data-swiper-slide-index=\"" + nextSlide.attr('data-swiper-slide-index') + "\"]").addClass(params.slideDuplicateNextClass);
    } else {
      $wrapperEl.children("." + params.slideClass + "." + params.slideDuplicateClass + "[data-swiper-slide-index=\"" + nextSlide.attr('data-swiper-slide-index') + "\"]").addClass(params.slideDuplicateNextClass);
    }

    if (prevSlide.hasClass(params.slideDuplicateClass)) {
      $wrapperEl.children("." + params.slideClass + ":not(." + params.slideDuplicateClass + ")[data-swiper-slide-index=\"" + prevSlide.attr('data-swiper-slide-index') + "\"]").addClass(params.slideDuplicatePrevClass);
    } else {
      $wrapperEl.children("." + params.slideClass + "." + params.slideDuplicateClass + "[data-swiper-slide-index=\"" + prevSlide.attr('data-swiper-slide-index') + "\"]").addClass(params.slideDuplicatePrevClass);
    }
  }

  swiper.emitSlidesClasses();
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/update/updateSlidesOffset.js":
/*!******************************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/update/updateSlidesOffset.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = updateSlidesOffset;

function updateSlidesOffset() {
  var swiper = this;
  var slides = swiper.slides;

  for (var i = 0; i < slides.length; i += 1) {
    slides[i].swiperSlideOffset = swiper.isHorizontal() ? slides[i].offsetLeft : slides[i].offsetTop;
  }
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/core/update/updateSlidesProgress.js":
/*!********************************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/core/update/updateSlidesProgress.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = updateSlidesProgress;

var _dom = _interopRequireDefault(__webpack_require__(/*! ../../../utils/dom */ "./node_modules/swiper/cjs/utils/dom.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function updateSlidesProgress(translate) {
  if (translate === void 0) {
    translate = this && this.translate || 0;
  }

  var swiper = this;
  var params = swiper.params;
  var slides = swiper.slides,
      rtl = swiper.rtlTranslate;
  if (slides.length === 0) return;
  if (typeof slides[0].swiperSlideOffset === 'undefined') swiper.updateSlidesOffset();
  var offsetCenter = -translate;
  if (rtl) offsetCenter = translate; // Visible Slides

  slides.removeClass(params.slideVisibleClass);
  swiper.visibleSlidesIndexes = [];
  swiper.visibleSlides = [];

  for (var i = 0; i < slides.length; i += 1) {
    var slide = slides[i];
    var slideProgress = (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0) - slide.swiperSlideOffset) / (slide.swiperSlideSize + params.spaceBetween);

    if (params.watchSlidesVisibility || params.centeredSlides && params.autoHeight) {
      var slideBefore = -(offsetCenter - slide.swiperSlideOffset);
      var slideAfter = slideBefore + swiper.slidesSizesGrid[i];
      var isVisible = slideBefore >= 0 && slideBefore < swiper.size - 1 || slideAfter > 1 && slideAfter <= swiper.size || slideBefore <= 0 && slideAfter >= swiper.size;

      if (isVisible) {
        swiper.visibleSlides.push(slide);
        swiper.visibleSlidesIndexes.push(i);
        slides.eq(i).addClass(params.slideVisibleClass);
      }
    }

    slide.progress = rtl ? -slideProgress : slideProgress;
  }

  swiper.visibleSlides = (0, _dom.default)(swiper.visibleSlides);
}

/***/ }),

/***/ "./node_modules/swiper/cjs/components/effect-fade/effect-fade.js":
/*!***********************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/effect-fade/effect-fade.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var _utils = __webpack_require__(/*! ../../utils/utils */ "./node_modules/swiper/cjs/utils/utils.js");

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var Fade = {
  setTranslate: function setTranslate() {
    var swiper = this;
    var slides = swiper.slides;

    for (var i = 0; i < slides.length; i += 1) {
      var $slideEl = swiper.slides.eq(i);
      var offset = $slideEl[0].swiperSlideOffset;
      var tx = -offset;
      if (!swiper.params.virtualTranslate) tx -= swiper.translate;
      var ty = 0;

      if (!swiper.isHorizontal()) {
        ty = tx;
        tx = 0;
      }

      var slideOpacity = swiper.params.fadeEffect.crossFade ? Math.max(1 - Math.abs($slideEl[0].progress), 0) : 1 + Math.min(Math.max($slideEl[0].progress, -1), 0);
      $slideEl.css({
        opacity: slideOpacity
      }).transform("translate3d(" + tx + "px, " + ty + "px, 0px)");
    }
  },
  setTransition: function setTransition(duration) {
    var swiper = this;
    var slides = swiper.slides,
        $wrapperEl = swiper.$wrapperEl;
    slides.transition(duration);

    if (swiper.params.virtualTranslate && duration !== 0) {
      var eventTriggered = false;
      slides.transitionEnd(function () {
        if (eventTriggered) return;
        if (!swiper || swiper.destroyed) return;
        eventTriggered = true;
        swiper.animating = false;
        var triggerEvents = ['webkitTransitionEnd', 'transitionend'];

        for (var i = 0; i < triggerEvents.length; i += 1) {
          $wrapperEl.trigger(triggerEvents[i]);
        }
      });
    }
  }
};
var _default = {
  name: 'effect-fade',
  params: {
    fadeEffect: {
      crossFade: false
    }
  },
  create: function create() {
    var swiper = this;
    (0, _utils.bindModuleMethods)(swiper, {
      fadeEffect: _extends({}, Fade)
    });
  },
  on: {
    beforeInit: function beforeInit(swiper) {
      if (swiper.params.effect !== 'fade') return;
      swiper.classNames.push(swiper.params.containerModifierClass + "fade");
      var overwriteParams = {
        slidesPerView: 1,
        slidesPerColumn: 1,
        slidesPerGroup: 1,
        watchSlidesProgress: true,
        spaceBetween: 0,
        virtualTranslate: true
      };
      (0, _utils.extend)(swiper.params, overwriteParams);
      (0, _utils.extend)(swiper.originalParams, overwriteParams);
    },
    setTranslate: function setTranslate(swiper) {
      if (swiper.params.effect !== 'fade') return;
      swiper.fadeEffect.setTranslate();
    },
    setTransition: function setTransition(swiper, duration) {
      if (swiper.params.effect !== 'fade') return;
      swiper.fadeEffect.setTransition(duration);
    }
  }
};
exports.default = _default;

/***/ }),

/***/ "./node_modules/swiper/cjs/components/navigation/navigation.js":
/*!*********************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/navigation/navigation.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var _dom = _interopRequireDefault(__webpack_require__(/*! ../../utils/dom */ "./node_modules/swiper/cjs/utils/dom.js"));

var _utils = __webpack_require__(/*! ../../utils/utils */ "./node_modules/swiper/cjs/utils/utils.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var Navigation = {
  toggleEl: function toggleEl($el, disabled) {
    $el[disabled ? 'addClass' : 'removeClass'](this.params.navigation.disabledClass);
    if ($el[0] && $el[0].tagName === 'BUTTON') $el[0].disabled = disabled;
  },
  update: function update() {
    // Update Navigation Buttons
    var swiper = this;
    var params = swiper.params.navigation;
    var toggleEl = swiper.navigation.toggleEl;
    if (swiper.params.loop) return;
    var _swiper$navigation = swiper.navigation,
        $nextEl = _swiper$navigation.$nextEl,
        $prevEl = _swiper$navigation.$prevEl;

    if ($prevEl && $prevEl.length > 0) {
      if (swiper.isBeginning) {
        toggleEl($prevEl, true);
      } else {
        toggleEl($prevEl, false);
      }

      if (swiper.params.watchOverflow && swiper.enabled) {
        $prevEl[swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);
      }
    }

    if ($nextEl && $nextEl.length > 0) {
      if (swiper.isEnd) {
        toggleEl($nextEl, true);
      } else {
        toggleEl($nextEl, false);
      }

      if (swiper.params.watchOverflow && swiper.enabled) {
        $nextEl[swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);
      }
    }
  },
  onPrevClick: function onPrevClick(e) {
    var swiper = this;
    e.preventDefault();
    if (swiper.isBeginning && !swiper.params.loop) return;
    swiper.slidePrev();
  },
  onNextClick: function onNextClick(e) {
    var swiper = this;
    e.preventDefault();
    if (swiper.isEnd && !swiper.params.loop) return;
    swiper.slideNext();
  },
  init: function init() {
    var swiper = this;
    var params = swiper.params.navigation;
    swiper.params.navigation = (0, _utils.createElementIfNotDefined)(swiper.$el, swiper.params.navigation, swiper.params.createElements, {
      nextEl: 'swiper-button-next',
      prevEl: 'swiper-button-prev'
    });
    if (!(params.nextEl || params.prevEl)) return;
    var $nextEl;
    var $prevEl;

    if (params.nextEl) {
      $nextEl = (0, _dom.default)(params.nextEl);

      if (swiper.params.uniqueNavElements && typeof params.nextEl === 'string' && $nextEl.length > 1 && swiper.$el.find(params.nextEl).length === 1) {
        $nextEl = swiper.$el.find(params.nextEl);
      }
    }

    if (params.prevEl) {
      $prevEl = (0, _dom.default)(params.prevEl);

      if (swiper.params.uniqueNavElements && typeof params.prevEl === 'string' && $prevEl.length > 1 && swiper.$el.find(params.prevEl).length === 1) {
        $prevEl = swiper.$el.find(params.prevEl);
      }
    }

    if ($nextEl && $nextEl.length > 0) {
      $nextEl.on('click', swiper.navigation.onNextClick);
    }

    if ($prevEl && $prevEl.length > 0) {
      $prevEl.on('click', swiper.navigation.onPrevClick);
    }

    (0, _utils.extend)(swiper.navigation, {
      $nextEl: $nextEl,
      nextEl: $nextEl && $nextEl[0],
      $prevEl: $prevEl,
      prevEl: $prevEl && $prevEl[0]
    });

    if (!swiper.enabled) {
      if ($nextEl) $nextEl.addClass(params.lockClass);
      if ($prevEl) $prevEl.addClass(params.lockClass);
    }
  },
  destroy: function destroy() {
    var swiper = this;
    var _swiper$navigation2 = swiper.navigation,
        $nextEl = _swiper$navigation2.$nextEl,
        $prevEl = _swiper$navigation2.$prevEl;

    if ($nextEl && $nextEl.length) {
      $nextEl.off('click', swiper.navigation.onNextClick);
      $nextEl.removeClass(swiper.params.navigation.disabledClass);
    }

    if ($prevEl && $prevEl.length) {
      $prevEl.off('click', swiper.navigation.onPrevClick);
      $prevEl.removeClass(swiper.params.navigation.disabledClass);
    }
  }
};
var _default = {
  name: 'navigation',
  params: {
    navigation: {
      nextEl: null,
      prevEl: null,
      hideOnClick: false,
      disabledClass: 'swiper-button-disabled',
      hiddenClass: 'swiper-button-hidden',
      lockClass: 'swiper-button-lock'
    }
  },
  create: function create() {
    var swiper = this;
    (0, _utils.bindModuleMethods)(swiper, {
      navigation: _extends({}, Navigation)
    });
  },
  on: {
    init: function init(swiper) {
      swiper.navigation.init();
      swiper.navigation.update();
    },
    toEdge: function toEdge(swiper) {
      swiper.navigation.update();
    },
    fromEdge: function fromEdge(swiper) {
      swiper.navigation.update();
    },
    destroy: function destroy(swiper) {
      swiper.navigation.destroy();
    },
    'enable disable': function enableDisable(swiper) {
      var _swiper$navigation3 = swiper.navigation,
          $nextEl = _swiper$navigation3.$nextEl,
          $prevEl = _swiper$navigation3.$prevEl;

      if ($nextEl) {
        $nextEl[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.navigation.lockClass);
      }

      if ($prevEl) {
        $prevEl[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.navigation.lockClass);
      }
    },
    click: function click(swiper, e) {
      var _swiper$navigation4 = swiper.navigation,
          $nextEl = _swiper$navigation4.$nextEl,
          $prevEl = _swiper$navigation4.$prevEl;
      var targetEl = e.target;

      if (swiper.params.navigation.hideOnClick && !(0, _dom.default)(targetEl).is($prevEl) && !(0, _dom.default)(targetEl).is($nextEl)) {
        if (swiper.pagination && swiper.params.pagination && swiper.params.pagination.clickable && (swiper.pagination.el === targetEl || swiper.pagination.el.contains(targetEl))) return;
        var isHidden;

        if ($nextEl) {
          isHidden = $nextEl.hasClass(swiper.params.navigation.hiddenClass);
        } else if ($prevEl) {
          isHidden = $prevEl.hasClass(swiper.params.navigation.hiddenClass);
        }

        if (isHidden === true) {
          swiper.emit('navigationShow');
        } else {
          swiper.emit('navigationHide');
        }

        if ($nextEl) {
          $nextEl.toggleClass(swiper.params.navigation.hiddenClass);
        }

        if ($prevEl) {
          $prevEl.toggleClass(swiper.params.navigation.hiddenClass);
        }
      }
    }
  }
};
exports.default = _default;

/***/ }),

/***/ "./node_modules/swiper/cjs/components/pagination/pagination.js":
/*!*********************************************************************!*\
  !*** ./node_modules/swiper/cjs/components/pagination/pagination.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var _dom = _interopRequireDefault(__webpack_require__(/*! ../../utils/dom */ "./node_modules/swiper/cjs/utils/dom.js"));

var _utils = __webpack_require__(/*! ../../utils/utils */ "./node_modules/swiper/cjs/utils/utils.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var Pagination = {
  update: function update() {
    // Render || Update Pagination bullets/items
    var swiper = this;
    var rtl = swiper.rtl;
    var params = swiper.params.pagination;
    if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) return;
    var slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;
    var $el = swiper.pagination.$el; // Current/Total

    var current;
    var total = swiper.params.loop ? Math.ceil((slidesLength - swiper.loopedSlides * 2) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;

    if (swiper.params.loop) {
      current = Math.ceil((swiper.activeIndex - swiper.loopedSlides) / swiper.params.slidesPerGroup);

      if (current > slidesLength - 1 - swiper.loopedSlides * 2) {
        current -= slidesLength - swiper.loopedSlides * 2;
      }

      if (current > total - 1) current -= total;
      if (current < 0 && swiper.params.paginationType !== 'bullets') current = total + current;
    } else if (typeof swiper.snapIndex !== 'undefined') {
      current = swiper.snapIndex;
    } else {
      current = swiper.activeIndex || 0;
    } // Types


    if (params.type === 'bullets' && swiper.pagination.bullets && swiper.pagination.bullets.length > 0) {
      var bullets = swiper.pagination.bullets;
      var firstIndex;
      var lastIndex;
      var midIndex;

      if (params.dynamicBullets) {
        swiper.pagination.bulletSize = bullets.eq(0)[swiper.isHorizontal() ? 'outerWidth' : 'outerHeight'](true);
        $el.css(swiper.isHorizontal() ? 'width' : 'height', swiper.pagination.bulletSize * (params.dynamicMainBullets + 4) + "px");

        if (params.dynamicMainBullets > 1 && swiper.previousIndex !== undefined) {
          swiper.pagination.dynamicBulletIndex += current - swiper.previousIndex;

          if (swiper.pagination.dynamicBulletIndex > params.dynamicMainBullets - 1) {
            swiper.pagination.dynamicBulletIndex = params.dynamicMainBullets - 1;
          } else if (swiper.pagination.dynamicBulletIndex < 0) {
            swiper.pagination.dynamicBulletIndex = 0;
          }
        }

        firstIndex = current - swiper.pagination.dynamicBulletIndex;
        lastIndex = firstIndex + (Math.min(bullets.length, params.dynamicMainBullets) - 1);
        midIndex = (lastIndex + firstIndex) / 2;
      }

      bullets.removeClass(params.bulletActiveClass + " " + params.bulletActiveClass + "-next " + params.bulletActiveClass + "-next-next " + params.bulletActiveClass + "-prev " + params.bulletActiveClass + "-prev-prev " + params.bulletActiveClass + "-main");

      if ($el.length > 1) {
        bullets.each(function (bullet) {
          var $bullet = (0, _dom.default)(bullet);
          var bulletIndex = $bullet.index();

          if (bulletIndex === current) {
            $bullet.addClass(params.bulletActiveClass);
          }

          if (params.dynamicBullets) {
            if (bulletIndex >= firstIndex && bulletIndex <= lastIndex) {
              $bullet.addClass(params.bulletActiveClass + "-main");
            }

            if (bulletIndex === firstIndex) {
              $bullet.prev().addClass(params.bulletActiveClass + "-prev").prev().addClass(params.bulletActiveClass + "-prev-prev");
            }

            if (bulletIndex === lastIndex) {
              $bullet.next().addClass(params.bulletActiveClass + "-next").next().addClass(params.bulletActiveClass + "-next-next");
            }
          }
        });
      } else {
        var $bullet = bullets.eq(current);
        var bulletIndex = $bullet.index();
        $bullet.addClass(params.bulletActiveClass);

        if (params.dynamicBullets) {
          var $firstDisplayedBullet = bullets.eq(firstIndex);
          var $lastDisplayedBullet = bullets.eq(lastIndex);

          for (var i = firstIndex; i <= lastIndex; i += 1) {
            bullets.eq(i).addClass(params.bulletActiveClass + "-main");
          }

          if (swiper.params.loop) {
            if (bulletIndex >= bullets.length - params.dynamicMainBullets) {
              for (var _i = params.dynamicMainBullets; _i >= 0; _i -= 1) {
                bullets.eq(bullets.length - _i).addClass(params.bulletActiveClass + "-main");
              }

              bullets.eq(bullets.length - params.dynamicMainBullets - 1).addClass(params.bulletActiveClass + "-prev");
            } else {
              $firstDisplayedBullet.prev().addClass(params.bulletActiveClass + "-prev").prev().addClass(params.bulletActiveClass + "-prev-prev");
              $lastDisplayedBullet.next().addClass(params.bulletActiveClass + "-next").next().addClass(params.bulletActiveClass + "-next-next");
            }
          } else {
            $firstDisplayedBullet.prev().addClass(params.bulletActiveClass + "-prev").prev().addClass(params.bulletActiveClass + "-prev-prev");
            $lastDisplayedBullet.next().addClass(params.bulletActiveClass + "-next").next().addClass(params.bulletActiveClass + "-next-next");
          }
        }
      }

      if (params.dynamicBullets) {
        var dynamicBulletsLength = Math.min(bullets.length, params.dynamicMainBullets + 4);
        var bulletsOffset = (swiper.pagination.bulletSize * dynamicBulletsLength - swiper.pagination.bulletSize) / 2 - midIndex * swiper.pagination.bulletSize;
        var offsetProp = rtl ? 'right' : 'left';
        bullets.css(swiper.isHorizontal() ? offsetProp : 'top', bulletsOffset + "px");
      }
    }

    if (params.type === 'fraction') {
      $el.find((0, _utils.classesToSelector)(params.currentClass)).text(params.formatFractionCurrent(current + 1));
      $el.find((0, _utils.classesToSelector)(params.totalClass)).text(params.formatFractionTotal(total));
    }

    if (params.type === 'progressbar') {
      var progressbarDirection;

      if (params.progressbarOpposite) {
        progressbarDirection = swiper.isHorizontal() ? 'vertical' : 'horizontal';
      } else {
        progressbarDirection = swiper.isHorizontal() ? 'horizontal' : 'vertical';
      }

      var scale = (current + 1) / total;
      var scaleX = 1;
      var scaleY = 1;

      if (progressbarDirection === 'horizontal') {
        scaleX = scale;
      } else {
        scaleY = scale;
      }

      $el.find((0, _utils.classesToSelector)(params.progressbarFillClass)).transform("translate3d(0,0,0) scaleX(" + scaleX + ") scaleY(" + scaleY + ")").transition(swiper.params.speed);
    }

    if (params.type === 'custom' && params.renderCustom) {
      $el.html(params.renderCustom(swiper, current + 1, total));
      swiper.emit('paginationRender', $el[0]);
    } else {
      swiper.emit('paginationUpdate', $el[0]);
    }

    if (swiper.params.watchOverflow && swiper.enabled) {
      $el[swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);
    }
  },
  render: function render() {
    // Render Container
    var swiper = this;
    var params = swiper.params.pagination;
    if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) return;
    var slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;
    var $el = swiper.pagination.$el;
    var paginationHTML = '';

    if (params.type === 'bullets') {
      var numberOfBullets = swiper.params.loop ? Math.ceil((slidesLength - swiper.loopedSlides * 2) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;

      if (swiper.params.freeMode && !swiper.params.loop && numberOfBullets > slidesLength) {
        numberOfBullets = slidesLength;
      }

      for (var i = 0; i < numberOfBullets; i += 1) {
        if (params.renderBullet) {
          paginationHTML += params.renderBullet.call(swiper, i, params.bulletClass);
        } else {
          paginationHTML += "<" + params.bulletElement + " class=\"" + params.bulletClass + "\"></" + params.bulletElement + ">";
        }
      }

      $el.html(paginationHTML);
      swiper.pagination.bullets = $el.find((0, _utils.classesToSelector)(params.bulletClass));
    }

    if (params.type === 'fraction') {
      if (params.renderFraction) {
        paginationHTML = params.renderFraction.call(swiper, params.currentClass, params.totalClass);
      } else {
        paginationHTML = "<span class=\"" + params.currentClass + "\"></span>" + ' / ' + ("<span class=\"" + params.totalClass + "\"></span>");
      }

      $el.html(paginationHTML);
    }

    if (params.type === 'progressbar') {
      if (params.renderProgressbar) {
        paginationHTML = params.renderProgressbar.call(swiper, params.progressbarFillClass);
      } else {
        paginationHTML = "<span class=\"" + params.progressbarFillClass + "\"></span>";
      }

      $el.html(paginationHTML);
    }

    if (params.type !== 'custom') {
      swiper.emit('paginationRender', swiper.pagination.$el[0]);
    }
  },
  init: function init() {
    var swiper = this;
    swiper.params.pagination = (0, _utils.createElementIfNotDefined)(swiper.$el, swiper.params.pagination, swiper.params.createElements, {
      el: 'swiper-pagination'
    });
    var params = swiper.params.pagination;
    if (!params.el) return;
    var $el = (0, _dom.default)(params.el);
    if ($el.length === 0) return;

    if (swiper.params.uniqueNavElements && typeof params.el === 'string' && $el.length > 1) {
      $el = swiper.$el.find(params.el);
    }

    if (params.type === 'bullets' && params.clickable) {
      $el.addClass(params.clickableClass);
    }

    $el.addClass(params.modifierClass + params.type);

    if (params.type === 'bullets' && params.dynamicBullets) {
      $el.addClass("" + params.modifierClass + params.type + "-dynamic");
      swiper.pagination.dynamicBulletIndex = 0;

      if (params.dynamicMainBullets < 1) {
        params.dynamicMainBullets = 1;
      }
    }

    if (params.type === 'progressbar' && params.progressbarOpposite) {
      $el.addClass(params.progressbarOppositeClass);
    }

    if (params.clickable) {
      $el.on('click', (0, _utils.classesToSelector)(params.bulletClass), function onClick(e) {
        e.preventDefault();
        var index = (0, _dom.default)(this).index() * swiper.params.slidesPerGroup;
        if (swiper.params.loop) index += swiper.loopedSlides;
        swiper.slideTo(index);
      });
    }

    (0, _utils.extend)(swiper.pagination, {
      $el: $el,
      el: $el[0]
    });

    if (!swiper.enabled) {
      $el.addClass(params.lockClass);
    }
  },
  destroy: function destroy() {
    var swiper = this;
    var params = swiper.params.pagination;
    if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) return;
    var $el = swiper.pagination.$el;
    $el.removeClass(params.hiddenClass);
    $el.removeClass(params.modifierClass + params.type);
    if (swiper.pagination.bullets) swiper.pagination.bullets.removeClass(params.bulletActiveClass);

    if (params.clickable) {
      $el.off('click', (0, _utils.classesToSelector)(params.bulletClass));
    }
  }
};
var _default = {
  name: 'pagination',
  params: {
    pagination: {
      el: null,
      bulletElement: 'span',
      clickable: false,
      hideOnClick: false,
      renderBullet: null,
      renderProgressbar: null,
      renderFraction: null,
      renderCustom: null,
      progressbarOpposite: false,
      type: 'bullets',
      // 'bullets' or 'progressbar' or 'fraction' or 'custom'
      dynamicBullets: false,
      dynamicMainBullets: 1,
      formatFractionCurrent: function formatFractionCurrent(number) {
        return number;
      },
      formatFractionTotal: function formatFractionTotal(number) {
        return number;
      },
      bulletClass: 'swiper-pagination-bullet',
      bulletActiveClass: 'swiper-pagination-bullet-active',
      modifierClass: 'swiper-pagination-',
      // NEW
      currentClass: 'swiper-pagination-current',
      totalClass: 'swiper-pagination-total',
      hiddenClass: 'swiper-pagination-hidden',
      progressbarFillClass: 'swiper-pagination-progressbar-fill',
      progressbarOppositeClass: 'swiper-pagination-progressbar-opposite',
      clickableClass: 'swiper-pagination-clickable',
      // NEW
      lockClass: 'swiper-pagination-lock'
    }
  },
  create: function create() {
    var swiper = this;
    (0, _utils.bindModuleMethods)(swiper, {
      pagination: _extends({
        dynamicBulletIndex: 0
      }, Pagination)
    });
  },
  on: {
    init: function init(swiper) {
      swiper.pagination.init();
      swiper.pagination.render();
      swiper.pagination.update();
    },
    activeIndexChange: function activeIndexChange(swiper) {
      if (swiper.params.loop) {
        swiper.pagination.update();
      } else if (typeof swiper.snapIndex === 'undefined') {
        swiper.pagination.update();
      }
    },
    snapIndexChange: function snapIndexChange(swiper) {
      if (!swiper.params.loop) {
        swiper.pagination.update();
      }
    },
    slidesLengthChange: function slidesLengthChange(swiper) {
      if (swiper.params.loop) {
        swiper.pagination.render();
        swiper.pagination.update();
      }
    },
    snapGridLengthChange: function snapGridLengthChange(swiper) {
      if (!swiper.params.loop) {
        swiper.pagination.render();
        swiper.pagination.update();
      }
    },
    destroy: function destroy(swiper) {
      swiper.pagination.destroy();
    },
    'enable disable': function enableDisable(swiper) {
      var $el = swiper.pagination.$el;

      if ($el) {
        $el[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.pagination.lockClass);
      }
    },
    click: function click(swiper, e) {
      var targetEl = e.target;

      if (swiper.params.pagination.el && swiper.params.pagination.hideOnClick && swiper.pagination.$el.length > 0 && !(0, _dom.default)(targetEl).hasClass(swiper.params.pagination.bulletClass)) {
        if (swiper.navigation && (swiper.navigation.nextEl && targetEl === swiper.navigation.nextEl || swiper.navigation.prevEl && targetEl === swiper.navigation.prevEl)) return;
        var isHidden = swiper.pagination.$el.hasClass(swiper.params.pagination.hiddenClass);

        if (isHidden === true) {
          swiper.emit('paginationShow');
        } else {
          swiper.emit('paginationHide');
        }

        swiper.pagination.$el.toggleClass(swiper.params.pagination.hiddenClass);
      }
    }
  }
};
exports.default = _default;

/***/ }),

/***/ "./node_modules/swiper/cjs/modules/observer/observer.js":
/*!**************************************************************!*\
  !*** ./node_modules/swiper/cjs/modules/observer/observer.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var _ssrWindow = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");

var _utils = __webpack_require__(/*! ../../utils/utils */ "./node_modules/swiper/cjs/utils/utils.js");

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var Observer = {
  attach: function attach(target, options) {
    if (options === void 0) {
      options = {};
    }

    var window = (0, _ssrWindow.getWindow)();
    var swiper = this;
    var ObserverFunc = window.MutationObserver || window.WebkitMutationObserver;
    var observer = new ObserverFunc(function (mutations) {
      // The observerUpdate event should only be triggered
      // once despite the number of mutations.  Additional
      // triggers are redundant and are very costly
      if (mutations.length === 1) {
        swiper.emit('observerUpdate', mutations[0]);
        return;
      }

      var observerUpdate = function observerUpdate() {
        swiper.emit('observerUpdate', mutations[0]);
      };

      if (window.requestAnimationFrame) {
        window.requestAnimationFrame(observerUpdate);
      } else {
        window.setTimeout(observerUpdate, 0);
      }
    });
    observer.observe(target, {
      attributes: typeof options.attributes === 'undefined' ? true : options.attributes,
      childList: typeof options.childList === 'undefined' ? true : options.childList,
      characterData: typeof options.characterData === 'undefined' ? true : options.characterData
    });
    swiper.observer.observers.push(observer);
  },
  init: function init() {
    var swiper = this;
    if (!swiper.support.observer || !swiper.params.observer) return;

    if (swiper.params.observeParents) {
      var containerParents = swiper.$el.parents();

      for (var i = 0; i < containerParents.length; i += 1) {
        swiper.observer.attach(containerParents[i]);
      }
    } // Observe container


    swiper.observer.attach(swiper.$el[0], {
      childList: swiper.params.observeSlideChildren
    }); // Observe wrapper

    swiper.observer.attach(swiper.$wrapperEl[0], {
      attributes: false
    });
  },
  destroy: function destroy() {
    var swiper = this;
    swiper.observer.observers.forEach(function (observer) {
      observer.disconnect();
    });
    swiper.observer.observers = [];
  }
};
var _default = {
  name: 'observer',
  params: {
    observer: false,
    observeParents: false,
    observeSlideChildren: false
  },
  create: function create() {
    var swiper = this;
    (0, _utils.bindModuleMethods)(swiper, {
      observer: _extends({}, Observer, {
        observers: []
      })
    });
  },
  on: {
    init: function init(swiper) {
      swiper.observer.init();
    },
    destroy: function destroy(swiper) {
      swiper.observer.destroy();
    }
  }
};
exports.default = _default;

/***/ }),

/***/ "./node_modules/swiper/cjs/modules/resize/resize.js":
/*!**********************************************************!*\
  !*** ./node_modules/swiper/cjs/modules/resize/resize.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var _ssrWindow = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");

var _utils = __webpack_require__(/*! ../../utils/utils */ "./node_modules/swiper/cjs/utils/utils.js");

var supportsResizeObserver = function supportsResizeObserver() {
  var window = (0, _ssrWindow.getWindow)();
  return typeof window.ResizeObserver !== 'undefined';
};

var _default = {
  name: 'resize',
  create: function create() {
    var swiper = this;
    (0, _utils.extend)(swiper, {
      resize: {
        observer: null,
        createObserver: function createObserver() {
          if (!swiper || swiper.destroyed || !swiper.initialized) return;
          swiper.resize.observer = new ResizeObserver(function (entries) {
            var width = swiper.width,
                height = swiper.height;
            var newWidth = width;
            var newHeight = height;
            entries.forEach(function (_ref) {
              var contentBoxSize = _ref.contentBoxSize,
                  contentRect = _ref.contentRect,
                  target = _ref.target;
              if (target && target !== swiper.el) return;
              newWidth = contentRect ? contentRect.width : (contentBoxSize[0] || contentBoxSize).inlineSize;
              newHeight = contentRect ? contentRect.height : (contentBoxSize[0] || contentBoxSize).blockSize;
            });

            if (newWidth !== width || newHeight !== height) {
              swiper.resize.resizeHandler();
            }
          });
          swiper.resize.observer.observe(swiper.el);
        },
        removeObserver: function removeObserver() {
          if (swiper.resize.observer && swiper.resize.observer.unobserve && swiper.el) {
            swiper.resize.observer.unobserve(swiper.el);
            swiper.resize.observer = null;
          }
        },
        resizeHandler: function resizeHandler() {
          if (!swiper || swiper.destroyed || !swiper.initialized) return;
          swiper.emit('beforeResize');
          swiper.emit('resize');
        },
        orientationChangeHandler: function orientationChangeHandler() {
          if (!swiper || swiper.destroyed || !swiper.initialized) return;
          swiper.emit('orientationchange');
        }
      }
    });
  },
  on: {
    init: function init(swiper) {
      var window = (0, _ssrWindow.getWindow)();

      if (swiper.params.resizeObserver && supportsResizeObserver()) {
        swiper.resize.createObserver();
        return;
      } // Emit resize


      window.addEventListener('resize', swiper.resize.resizeHandler); // Emit orientationchange

      window.addEventListener('orientationchange', swiper.resize.orientationChangeHandler);
    },
    destroy: function destroy(swiper) {
      var window = (0, _ssrWindow.getWindow)();
      swiper.resize.removeObserver();
      window.removeEventListener('resize', swiper.resize.resizeHandler);
      window.removeEventListener('orientationchange', swiper.resize.orientationChangeHandler);
    }
  }
};
exports.default = _default;

/***/ }),

/***/ "./node_modules/swiper/cjs/utils/dom.js":
/*!**********************************************!*\
  !*** ./node_modules/swiper/cjs/utils/dom.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var _dom = __webpack_require__(/*! dom7 */ "./node_modules/dom7/dom7.esm.js");

var Methods = {
  addClass: _dom.addClass,
  removeClass: _dom.removeClass,
  hasClass: _dom.hasClass,
  toggleClass: _dom.toggleClass,
  attr: _dom.attr,
  removeAttr: _dom.removeAttr,
  transform: _dom.transform,
  transition: _dom.transition,
  on: _dom.on,
  off: _dom.off,
  trigger: _dom.trigger,
  transitionEnd: _dom.transitionEnd,
  outerWidth: _dom.outerWidth,
  outerHeight: _dom.outerHeight,
  styles: _dom.styles,
  offset: _dom.offset,
  css: _dom.css,
  each: _dom.each,
  html: _dom.html,
  text: _dom.text,
  is: _dom.is,
  index: _dom.index,
  eq: _dom.eq,
  append: _dom.append,
  prepend: _dom.prepend,
  next: _dom.next,
  nextAll: _dom.nextAll,
  prev: _dom.prev,
  prevAll: _dom.prevAll,
  parent: _dom.parent,
  parents: _dom.parents,
  closest: _dom.closest,
  find: _dom.find,
  children: _dom.children,
  filter: _dom.filter,
  remove: _dom.remove
};
Object.keys(Methods).forEach(function (methodName) {
  Object.defineProperty(_dom.$.fn, methodName, {
    value: Methods[methodName],
    writable: true
  });
});
var _default = _dom.$;
exports.default = _default;

/***/ }),

/***/ "./node_modules/swiper/cjs/utils/get-browser.js":
/*!******************************************************!*\
  !*** ./node_modules/swiper/cjs/utils/get-browser.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.getBrowser = getBrowser;

var _ssrWindow = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");

var browser;

function calcBrowser() {
  var window = (0, _ssrWindow.getWindow)();

  function isSafari() {
    var ua = window.navigator.userAgent.toLowerCase();
    return ua.indexOf('safari') >= 0 && ua.indexOf('chrome') < 0 && ua.indexOf('android') < 0;
  }

  return {
    isEdge: !!window.navigator.userAgent.match(/Edge/g),
    isSafari: isSafari(),
    isWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window.navigator.userAgent)
  };
}

function getBrowser() {
  if (!browser) {
    browser = calcBrowser();
  }

  return browser;
}

/***/ }),

/***/ "./node_modules/swiper/cjs/utils/get-device.js":
/*!*****************************************************!*\
  !*** ./node_modules/swiper/cjs/utils/get-device.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.getDevice = getDevice;

var _ssrWindow = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");

var _getSupport = __webpack_require__(/*! ./get-support */ "./node_modules/swiper/cjs/utils/get-support.js");

var device;

function calcDevice(_temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      userAgent = _ref.userAgent;

  var support = (0, _getSupport.getSupport)();
  var window = (0, _ssrWindow.getWindow)();
  var platform = window.navigator.platform;
  var ua = userAgent || window.navigator.userAgent;
  var device = {
    ios: false,
    android: false
  };
  var screenWidth = window.screen.width;
  var screenHeight = window.screen.height;
  var android = ua.match(/(Android);?[\s\/]+([\d.]+)?/); // eslint-disable-line

  var ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
  var ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
  var iphone = !ipad && ua.match(/(iPhone\sOS|iOS)\s([\d_]+)/);
  var windows = platform === 'Win32';
  var macos = platform === 'MacIntel'; // iPadOs 13 fix

  var iPadScreens = ['1024x1366', '1366x1024', '834x1194', '1194x834', '834x1112', '1112x834', '768x1024', '1024x768', '820x1180', '1180x820', '810x1080', '1080x810'];

  if (!ipad && macos && support.touch && iPadScreens.indexOf(screenWidth + "x" + screenHeight) >= 0) {
    ipad = ua.match(/(Version)\/([\d.]+)/);
    if (!ipad) ipad = [0, 1, '13_0_0'];
    macos = false;
  } // Android


  if (android && !windows) {
    device.os = 'android';
    device.android = true;
  }

  if (ipad || iphone || ipod) {
    device.os = 'ios';
    device.ios = true;
  } // Export object


  return device;
}

function getDevice(overrides) {
  if (overrides === void 0) {
    overrides = {};
  }

  if (!device) {
    device = calcDevice(overrides);
  }

  return device;
}

/***/ }),

/***/ "./node_modules/swiper/cjs/utils/get-support.js":
/*!******************************************************!*\
  !*** ./node_modules/swiper/cjs/utils/get-support.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.getSupport = getSupport;

var _ssrWindow = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");

var support;

function calcSupport() {
  var window = (0, _ssrWindow.getWindow)();
  var document = (0, _ssrWindow.getDocument)();
  return {
    touch: !!('ontouchstart' in window || window.DocumentTouch && document instanceof window.DocumentTouch),
    pointerEvents: !!window.PointerEvent && 'maxTouchPoints' in window.navigator && window.navigator.maxTouchPoints >= 0,
    observer: function checkObserver() {
      return 'MutationObserver' in window || 'WebkitMutationObserver' in window;
    }(),
    passiveListener: function checkPassiveListener() {
      var supportsPassive = false;

      try {
        var opts = Object.defineProperty({}, 'passive', {
          // eslint-disable-next-line
          get: function get() {
            supportsPassive = true;
          }
        });
        window.addEventListener('testPassiveListener', null, opts);
      } catch (e) {// No support
      }

      return supportsPassive;
    }(),
    gestures: function checkGestures() {
      return 'ongesturestart' in window;
    }()
  };
}

function getSupport() {
  if (!support) {
    support = calcSupport();
  }

  return support;
}

/***/ }),

/***/ "./node_modules/swiper/cjs/utils/utils.js":
/*!************************************************!*\
  !*** ./node_modules/swiper/cjs/utils/utils.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.deleteProps = deleteProps;
exports.nextTick = nextTick;
exports.now = now;
exports.getTranslate = getTranslate;
exports.isObject = isObject;
exports.extend = extend;
exports.bindModuleMethods = bindModuleMethods;
exports.getComputedStyle = getComputedStyle;
exports.classesToSelector = classesToSelector;
exports.createElementIfNotDefined = createElementIfNotDefined;

var _ssrWindow = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");

function deleteProps(obj) {
  var object = obj;
  Object.keys(object).forEach(function (key) {
    try {
      object[key] = null;
    } catch (e) {// no getter for object
    }

    try {
      delete object[key];
    } catch (e) {// something got wrong
    }
  });
}

function nextTick(callback, delay) {
  if (delay === void 0) {
    delay = 0;
  }

  return setTimeout(callback, delay);
}

function now() {
  return Date.now();
}

function getComputedStyle(el) {
  var window = (0, _ssrWindow.getWindow)();
  var style;

  if (window.getComputedStyle) {
    style = window.getComputedStyle(el, null);
  }

  if (!style && el.currentStyle) {
    style = el.currentStyle;
  }

  if (!style) {
    style = el.style;
  }

  return style;
}

function getTranslate(el, axis) {
  if (axis === void 0) {
    axis = 'x';
  }

  var window = (0, _ssrWindow.getWindow)();
  var matrix;
  var curTransform;
  var transformMatrix;
  var curStyle = getComputedStyle(el, null);

  if (window.WebKitCSSMatrix) {
    curTransform = curStyle.transform || curStyle.webkitTransform;

    if (curTransform.split(',').length > 6) {
      curTransform = curTransform.split(', ').map(function (a) {
        return a.replace(',', '.');
      }).join(', ');
    } // Some old versions of Webkit choke when 'none' is passed; pass
    // empty string instead in this case


    transformMatrix = new window.WebKitCSSMatrix(curTransform === 'none' ? '' : curTransform);
  } else {
    transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue('transform').replace('translate(', 'matrix(1, 0, 0, 1,');
    matrix = transformMatrix.toString().split(',');
  }

  if (axis === 'x') {
    // Latest Chrome and webkits Fix
    if (window.WebKitCSSMatrix) curTransform = transformMatrix.m41; // Crazy IE10 Matrix
    else if (matrix.length === 16) curTransform = parseFloat(matrix[12]); // Normal Browsers
      else curTransform = parseFloat(matrix[4]);
  }

  if (axis === 'y') {
    // Latest Chrome and webkits Fix
    if (window.WebKitCSSMatrix) curTransform = transformMatrix.m42; // Crazy IE10 Matrix
    else if (matrix.length === 16) curTransform = parseFloat(matrix[13]); // Normal Browsers
      else curTransform = parseFloat(matrix[5]);
  }

  return curTransform || 0;
}

function isObject(o) {
  return typeof o === 'object' && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === 'Object';
}

function isNode(node) {
  // eslint-disable-next-line
  if (typeof window !== 'undefined' && typeof window.HTMLElement !== 'undefined') {
    return node instanceof HTMLElement;
  }

  return node && (node.nodeType === 1 || node.nodeType === 11);
}

function extend() {
  var to = Object(arguments.length <= 0 ? undefined : arguments[0]);
  var noExtend = ['__proto__', 'constructor', 'prototype'];

  for (var i = 1; i < arguments.length; i += 1) {
    var nextSource = i < 0 || arguments.length <= i ? undefined : arguments[i];

    if (nextSource !== undefined && nextSource !== null && !isNode(nextSource)) {
      var keysArray = Object.keys(Object(nextSource)).filter(function (key) {
        return noExtend.indexOf(key) < 0;
      });

      for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {
        var nextKey = keysArray[nextIndex];
        var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);

        if (desc !== undefined && desc.enumerable) {
          if (isObject(to[nextKey]) && isObject(nextSource[nextKey])) {
            if (nextSource[nextKey].__swiper__) {
              to[nextKey] = nextSource[nextKey];
            } else {
              extend(to[nextKey], nextSource[nextKey]);
            }
          } else if (!isObject(to[nextKey]) && isObject(nextSource[nextKey])) {
            to[nextKey] = {};

            if (nextSource[nextKey].__swiper__) {
              to[nextKey] = nextSource[nextKey];
            } else {
              extend(to[nextKey], nextSource[nextKey]);
            }
          } else {
            to[nextKey] = nextSource[nextKey];
          }
        }
      }
    }
  }

  return to;
}

function bindModuleMethods(instance, obj) {
  Object.keys(obj).forEach(function (key) {
    if (isObject(obj[key])) {
      Object.keys(obj[key]).forEach(function (subKey) {
        if (typeof obj[key][subKey] === 'function') {
          obj[key][subKey] = obj[key][subKey].bind(instance);
        }
      });
    }

    instance[key] = obj[key];
  });
}

function classesToSelector(classes) {
  if (classes === void 0) {
    classes = '';
  }

  return "." + classes.trim().replace(/([\.:!\/])/g, '\\$1') // eslint-disable-line
  .replace(/ /g, '.');
}

function createElementIfNotDefined($container, params, createElements, checkProps) {
  var document = (0, _ssrWindow.getDocument)();

  if (createElements) {
    Object.keys(checkProps).forEach(function (key) {
      if (!params[key] && params.auto === true) {
        var element = document.createElement('div');
        element.className = checkProps[key];
        $container.append(element);
        params[key] = element;
      }
    });
  }

  return params;
}

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ })

/******/ });
//# sourceMappingURL=checkout.js.map
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "../lib/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "../src/global-intuitive-unicorn.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../node_modules/autocompletion/lib/autocompletion.js":
/*!************************************************************!*\
  !*** ../node_modules/autocompletion/lib/autocompletion.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/*\r\n    JavaScript AutoComplete v1.0\r\n    Copyright (c) 2018 Experian\r\n    GitHub: https://github.com/experianplc/AutoComplete\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.default = (function () {\r\n    function autoComplete(options) {\r\n        if (!document.querySelector) {\r\n            return;\r\n        }\r\n        function hasClass(el, className) {\r\n            return el.classList ? el.classList.contains(className) : new RegExp('\\\\b' + className + '\\\\b').test(el.className);\r\n        }\r\n        function addEvent(el, type, handler) {\r\n            if (el.attachEvent) {\r\n                el.attachEvent('on' + type, handler);\r\n            }\r\n            else {\r\n                el.addEventListener(type, handler);\r\n            }\r\n        }\r\n        function removeEvent(el, type, handler) {\r\n            // if (el.removeEventListener) not working in IE11\r\n            if (el.detachEvent)\r\n                el.detachEvent('on' + type, handler);\r\n            else\r\n                el.removeEventListener(type, handler);\r\n        }\r\n        function live(className, event, cb, context) {\r\n            addEvent(context || document, event, function (e) {\r\n                var found, el = e.target || e.srcElement;\r\n                while (el && !(found = hasClass(el, className)))\r\n                    el = el.parentElement;\r\n                if (found)\r\n                    cb.call(el, e);\r\n            });\r\n        }\r\n        var o = {\r\n            selector: '',\r\n            source: function (v, s) { },\r\n            minChars: 3,\r\n            delay: 150,\r\n            offsetLeft: 0,\r\n            offsetTop: 1,\r\n            cache: 1,\r\n            menuClass: '',\r\n            dontUseOffset: false,\r\n            renderItem: function (item, search) {\r\n                // Special characters should be escaped.\r\n                search = search.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\r\n                var re = new RegExp(\"(\" + search.split(' ').join('|') + \")\", \"gi\");\r\n                return '<div class=\"edq-global-intuitive-address-suggestion\" data-format=\"' + item + '\">' + item.replace(re, \"<b>$1</b>\") + '</div>';\r\n            },\r\n            onSelect: function (e, term, item) { }\r\n        };\r\n        for (var k in options) {\r\n            if (options.hasOwnProperty(k))\r\n                o[k] = options[k];\r\n        }\r\n        var nodeList = typeof o.selector == 'object' ? [o.selector] : document.querySelectorAll(o.selector);\r\n        var _loop_1 = function (i) {\r\n            var autoCompleteElement = nodeList[i];\r\n            autoCompleteElement.suggestionsContainer = document.createElement('div');\r\n            autoCompleteElement.suggestionsContainer.id = 'edq-verification-suggestion-box';\r\n            autoCompleteElement.suggestionsContainer.className = 'edq-global-intuitive-address-suggestions ' + o.menuClass;\r\n            autoCompleteElement.autocompleteAttr = autoCompleteElement.getAttribute('autocomplete');\r\n            autoCompleteElement.setAttribute('autocomplete', 'off');\r\n            autoCompleteElement.cache = {};\r\n            autoCompleteElement.lastVal = '';\r\n            autoCompleteElement.updateSC = function (resize, next) {\r\n                var rect = autoCompleteElement.getBoundingClientRect();\r\n                // Eventually this should be removed, but specifically for a modal this should be enabled\r\n                // to prevent the suggestions from moving while you scroll\r\n                if (o.dontUseOffset) {\r\n                    autoCompleteElement.suggestionsContainer.style.left = Math.round(rect.left + o.offsetLeft) + 'px';\r\n                    autoCompleteElement.suggestionsContainer.style.top = Math.round(rect.bottom + o.offsetTop) + 'px';\r\n                }\r\n                else {\r\n                    autoCompleteElement.suggestionsContainer.style.left = Math.round(rect.left + (window.pageXOffset || document.documentElement.scrollLeft) + o.offsetLeft) + 'px';\r\n                    autoCompleteElement.suggestionsContainer.style.top = Math.round(rect.bottom + (window.pageYOffset || document.documentElement.scrollTop) + o.offsetTop) + 'px';\r\n                }\r\n                autoCompleteElement.suggestionsContainer.style.width = Math.round(rect.right - rect.left) + 'px';\r\n                if (!resize) {\r\n                    autoCompleteElement.suggestionsContainer.style.display = 'block';\r\n                    if (!autoCompleteElement.suggestionsContainer.maxHeight) {\r\n                        autoCompleteElement.suggestionsContainer.maxHeight = parseInt(String((window.getComputedStyle ? getComputedStyle(autoCompleteElement.suggestionsContainer, null) : autoCompleteElement.suggestionsContainer.currentStyle).maxHeight));\r\n                    }\r\n                    if (!autoCompleteElement.suggestionsContainer.suggestionHeight) {\r\n                        autoCompleteElement.suggestionsContainer.suggestionHeight = autoCompleteElement.suggestionsContainer.querySelector('.edq-global-intuitive-address-suggestion').offsetHeight;\r\n                    }\r\n                    if (autoCompleteElement.suggestionsContainer.suggestionHeight && !next) {\r\n                        autoCompleteElement.suggestionsContainer.scrollTop = 0;\r\n                    }\r\n                    else {\r\n                        var scrTop = autoCompleteElement.suggestionsContainer.scrollTop, selTop = next.getBoundingClientRect().top - autoCompleteElement.suggestionsContainer.getBoundingClientRect().top;\r\n                        if (selTop + autoCompleteElement.suggestionsContainer.suggestionHeight - autoCompleteElement.suggestionsContainer.maxHeight > 0)\r\n                            autoCompleteElement.suggestionsContainer.scrollTop = selTop + autoCompleteElement.suggestionsContainer.suggestionHeight + scrTop - autoCompleteElement.suggestionsContainer.maxHeight;\r\n                        else if (selTop < 0)\r\n                            autoCompleteElement.suggestionsContainer.scrollTop = selTop + scrTop;\r\n                    }\r\n                }\r\n            };\r\n            addEvent(window, 'resize', autoCompleteElement.updateSC);\r\n            document.body.appendChild(autoCompleteElement.suggestionsContainer);\r\n            live('edq-global-intuitive-address-suggestion', 'mouseleave', function () {\r\n                var sel = autoCompleteElement.suggestionsContainer.querySelector('.edq-global-intuitive-address-suggestion.selected');\r\n                if (sel)\r\n                    setTimeout(function () { sel.className = sel.className.replace('selected', ''); }, 20);\r\n            }, autoCompleteElement.suggestionsContainer);\r\n            live('edq-global-intuitive-address-suggestion', 'mouseover', function () {\r\n                var sel = autoCompleteElement.suggestionsContainer.querySelector('.edq-global-intuitive-address-suggestion.selected');\r\n                if (sel)\r\n                    sel.className = sel.className.replace('selected', '');\r\n                this.className += ' selected';\r\n            }, autoCompleteElement.suggestionsContainer);\r\n            live('edq-global-intuitive-address-suggestion', 'mousedown', function (e) {\r\n                if (hasClass(this, 'edq-global-intuitive-address-suggestion')) {\r\n                    var v = this.getAttribute('data-format');\r\n                    o.onSelect(e, v, this);\r\n                    autoCompleteElement.suggestionsContainer.style.display = 'none';\r\n                }\r\n            }, autoCompleteElement.suggestionsContainer);\r\n            autoCompleteElement.blurHandler = function () {\r\n                var over_sb;\r\n                try {\r\n                    over_sb = document.querySelector('.edq-global-intuitive-address-suggestions:hover');\r\n                }\r\n                catch (e) {\r\n                    over_sb = 0;\r\n                }\r\n                if (!over_sb) {\r\n                    autoCompleteElement.lastVal = autoCompleteElement.value;\r\n                    autoCompleteElement.suggestionsContainer.style.display = 'none';\r\n                    setTimeout(function () { autoCompleteElement.suggestionsContainer.style.display = 'none'; }, 350); // hide suggestions on fast input\r\n                }\r\n                else if (autoCompleteElement !== document.activeElement)\r\n                    setTimeout(function () { autoCompleteElement.focus(); }, 20);\r\n            };\r\n            addEvent(autoCompleteElement, 'blur', autoCompleteElement.blurHandler);\r\n            var suggest = function (data) {\r\n                var val = autoCompleteElement.value;\r\n                autoCompleteElement.cache[val] = data;\r\n                if (data.length && val.length >= o.minChars) {\r\n                    var s = '';\r\n                    for (var i_1 = 0; i_1 < data.length; i_1++)\r\n                        s += o.renderItem(data[i_1], val);\r\n                    autoCompleteElement.suggestionsContainer.innerHTML = s;\r\n                    autoCompleteElement.updateSC(0);\r\n                }\r\n                else\r\n                    autoCompleteElement.suggestionsContainer.style.display = 'none';\r\n            };\r\n            autoCompleteElement.keydownHandler = function (e) {\r\n                var key = window.event ? e.keyCode : e.which;\r\n                // down (40), up (38)\r\n                if ((key == 40 || key == 38) && autoCompleteElement.suggestionsContainer.innerHTML) {\r\n                    var next = void 0, sel = autoCompleteElement.suggestionsContainer.querySelector('.edq-global-intuitive-address-suggestion.selected');\r\n                    if (!sel) {\r\n                        next = (key == 40) ? autoCompleteElement.suggestionsContainer.querySelector('.edq-global-intuitive-address-suggestion') : autoCompleteElement.suggestionsContainer.childNodes[autoCompleteElement.suggestionsContainer.childNodes.length - 1]; // first : last\r\n                        next.className += ' selected';\r\n                        autoCompleteElement.value = next.getAttribute('data-suggestion');\r\n                    }\r\n                    else {\r\n                        next = (key == 40) ? sel.nextSibling : sel.previousSibling;\r\n                        if (next) {\r\n                            sel.className = sel.className.replace('selected', '');\r\n                            next.className += ' selected';\r\n                            autoCompleteElement.value = next.getAttribute('data-suggestion');\r\n                        }\r\n                        else {\r\n                            sel.className = sel.className.replace('selected', '');\r\n                            autoCompleteElement.value = autoCompleteElement.lastVal;\r\n                            next = 0;\r\n                        }\r\n                    }\r\n                    autoCompleteElement.updateSC(0, next);\r\n                    return false;\r\n                }\r\n                else if (key == 27) {\r\n                    autoCompleteElement.value = autoCompleteElement.lastVal;\r\n                    autoCompleteElement.suggestionsContainer.style.display = 'none';\r\n                }\r\n                else if (key == 13 || key == 9) {\r\n                    var sel = autoCompleteElement.suggestionsContainer.querySelector('.edq-global-intuitive-address-suggestion.selected');\r\n                    if (sel && autoCompleteElement.suggestionsContainer.style.display != 'none') {\r\n                        o.onSelect(e, sel.getAttribute('data-format'), sel);\r\n                        setTimeout(function () { autoCompleteElement.suggestionsContainer.style.display = 'none'; }, 20);\r\n                    }\r\n                }\r\n            };\r\n            addEvent(autoCompleteElement, 'keydown', autoCompleteElement.keydownHandler);\r\n            autoCompleteElement.keyupHandler = function (e) {\r\n                var key = window.event ? e.keyCode : e.which;\r\n                if (!key || (key < 35 || key > 40) && key != 13 && key != 27) {\r\n                    var val_1 = autoCompleteElement.value;\r\n                    if (val_1.length >= o.minChars) {\r\n                        if (val_1 != autoCompleteElement.lastVal) {\r\n                            autoCompleteElement.lastVal = val_1;\r\n                            clearTimeout(autoCompleteElement.timer);\r\n                            if (o.cache) {\r\n                                if (val_1 in autoCompleteElement.cache) {\r\n                                    suggest(autoCompleteElement.cache[val_1]);\r\n                                    return;\r\n                                }\r\n                                // no requests if previous suggestions were empty\r\n                                for (var i_2 = 1; i_2 < val_1.length - o.minChars; i_2++) {\r\n                                    var part = val_1.slice(0, val_1.length - i_2);\r\n                                    if (part in autoCompleteElement.cache && !autoCompleteElement.cache[part].length) {\r\n                                        suggest([]);\r\n                                        return;\r\n                                    }\r\n                                }\r\n                            }\r\n                            autoCompleteElement.timer = setTimeout(function () { o.source(val_1, suggest); }, o.delay);\r\n                        }\r\n                    }\r\n                    else {\r\n                        autoCompleteElement.lastVal = val_1;\r\n                        autoCompleteElement.suggestionsContainer.style.display = 'none';\r\n                    }\r\n                }\r\n            };\r\n            addEvent(autoCompleteElement, 'keyup', autoCompleteElement.keyupHandler);\r\n            autoCompleteElement.focusHandler = function (e) {\r\n                autoCompleteElement.lastVal = '\\n';\r\n                autoCompleteElement.keyupHandler(e);\r\n            };\r\n            if (!o.minChars)\r\n                addEvent(autoCompleteElement, 'focus', autoCompleteElement.focusHandler);\r\n        };\r\n        // Preserve backwards compatiability with older browsers by using C style for-loop.\r\n        for (var i = 0; i < nodeList.length; i++) {\r\n            _loop_1(i);\r\n        }\r\n        ;\r\n        this.destroy = function () {\r\n            // Preserve backwards compatiability with older browsers by using C style for-loop.\r\n            for (var i = 0; i < nodeList.length; i++) {\r\n                var self_1 = nodeList[i];\r\n                removeEvent(window, 'resize', self_1.updateSC);\r\n                removeEvent(self_1, 'blur', self_1.blurHandler);\r\n                removeEvent(self_1, 'focus', self_1.focusHandler);\r\n                removeEvent(self_1, 'keydown', self_1.keydownHandler);\r\n                removeEvent(self_1, 'keyup', self_1.keyupHandler);\r\n                if (self_1.autocompleteAttr) {\r\n                    self_1.setAttribute('autocomplete', self_1.autocompleteAttr);\r\n                }\r\n                else {\r\n                    self_1.removeAttribute('autocomplete');\r\n                }\r\n                document.body.removeChild(self_1.suggestionsContainer);\r\n                self_1 = null;\r\n            }\r\n            ;\r\n        };\r\n    }\r\n    ;\r\n    return autoComplete;\r\n})();\r\n//# sourceMappingURL=autocompletion.js.map\n\n//# sourceURL=webpack:///../node_modules/autocompletion/lib/autocompletion.js?");

/***/ }),

/***/ "../src/global-intuitive-unicorn.ts":
/*!******************************************!*\
  !*** ../src/global-intuitive-unicorn.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar autocompletion_js_1 = __webpack_require__(/*! ../node_modules/autocompletion/lib/autocompletion.js */ \"../node_modules/autocompletion/lib/autocompletion.js\");\r\n(function () {\r\n    window.autoComplete = autocompletion_js_1.default;\r\n})();\r\n/**\r\n * @module EDQ\r\n */\r\n(function () {\r\n    /* Configuration */\r\n    /** Used to be granted authorization to make calls to the ProWebOnDemand webservice\r\n     *\r\n     * @name PRO_WEB_AUTH_TOKEN\r\n     * @type {String}\r\n     */\r\n    /** Configuration file that can optionally be used, if configuration is external to this library.\r\n     *  This approach is recommended.\r\n     *\r\n     *  @type {Object}\r\n     */\r\n    var EDQ_CONFIG = function () {\r\n        return window.EdqConfig || {};\r\n    };\r\n    var GLOBAL_INTUITIVE_ELEMENT = function () {\r\n        if (typeof (EDQ_CONFIG().GLOBAL_INTUITIVE_ELEMENT) === \"string\") {\r\n            try {\r\n                return document.querySelector(EDQ_CONFIG().GLOBAL_INTUITIVE_ELEMENT);\r\n            }\r\n            catch (e) {\r\n            }\r\n        }\r\n        return EDQ_CONFIG().GLOBAL_INTUITIVE_ELEMENT;\r\n    };\r\n    if (EDQ_CONFIG().GLOBAL_INTUITIVE_PLACEHOLDER) {\r\n        GLOBAL_INTUITIVE_ELEMENT().setAttribute('placeholder', EDQ_CONFIG().GLOBAL_INTUITIVE_PLACEHOLDER);\r\n    }\r\n    if (EDQ_CONFIG().DEBUG) {\r\n        console.log('Global Intuitive Unicorn started');\r\n    }\r\n    /** Map the specified elements back to the specified fields\r\n     *\r\n     * @param {Array} elements\r\n     * @param {Element} field\r\n     * @param {Object} data\r\n     *\r\n     * @returns {undefined}\r\n     */\r\n    var mapElementsToField = function (_a) {\r\n        var elements = _a.elements, field = _a.field, _b = _a.separator, separator = _b === void 0 ? ' ' : _b, data = _a.data;\r\n        try {\r\n            var fieldValue = elements.map(function (elementValue) {\r\n                return eval(\"data.\" + elementValue);\r\n            });\r\n            /* Regex to find the last instance of the separator, if present */\r\n            var regex = new RegExp(separator + '$');\r\n            /* Remove the separator if there are no matches */\r\n            var newValue = fieldValue.join(separator).replace(regex, '');\r\n            field.value = newValue;\r\n        }\r\n        catch (e) {\r\n        }\r\n    };\r\n    var xhr;\r\n    var EDQ;\r\n    if (window.EDQ) {\r\n        EDQ = window.EDQ;\r\n    }\r\n    else {\r\n        throw 'Please make sure that EDQ Pegasus is included in your HTML before EDQ Unicorn.';\r\n    }\r\n    var onSelect = (function (event, term, item) {\r\n        event.preventDefault();\r\n        EDQ.address.globalIntuitive.format({\r\n            formatUrl: term,\r\n            callback: function (data, error) {\r\n                if (EDQ_CONFIG().DEBUG) {\r\n                    console.log(Date() + \" \" + JSON.stringify(error || data));\r\n                }\r\n                /* Put the label keys on the top level component */\r\n                data.address.forEach(function (a) {\r\n                    var k = Object.keys(a)[0];\r\n                    var o = {};\r\n                    data.address[k] = a[k];\r\n                });\r\n                data.components.forEach(function (a) {\r\n                    var k = Object.keys(a)[0];\r\n                    var o = {};\r\n                    data.components[k] = a[k];\r\n                });\r\n                EDQ_CONFIG().GLOBAL_INTUITIVE_MAPPING.forEach(function (mapper) {\r\n                    var field = mapper.field;\r\n                    if (mapper.selector) {\r\n                        try {\r\n                            field = document.querySelector(mapper.selector);\r\n                        }\r\n                        catch (e) { }\r\n                    }\r\n                    mapElementsToField({\r\n                        elements: mapper.elements,\r\n                        field: field,\r\n                        separator: mapper.separator,\r\n                        data: data\r\n                    });\r\n                });\r\n                var callback = EDQ_CONFIG().GLOBAL_INTUITIVE_CALLBACK;\r\n                if (callback) {\r\n                    if (typeof (callback) === \"string\") {\r\n                        eval(\"(\" + callback + \")\")(data);\r\n                    }\r\n                    else if (typeof (callback) === \"function\") {\r\n                        callback(data);\r\n                    }\r\n                    else {\r\n                        throw \"GLOBAL_INTUITIVE_CALLBACK must be either text resolving to javascript or a function\";\r\n                    }\r\n                }\r\n                GLOBAL_INTUITIVE_ELEMENT().setAttribute(\"edq-metadata\", JSON.stringify(data));\r\n            }\r\n        });\r\n    });\r\n    function renderItem(item, search) {\r\n        var matched = item.matched;\r\n        var suggestion = item.suggestion;\r\n        matched.forEach(function (match) {\r\n            var matchedItem = \"<strong>\" + suggestion.substring(match[0], match[1]) + \"</strong>\";\r\n            suggestion = \"\" + suggestion.substring(0, match[0]) + matchedItem + suggestion.substring(match[1]);\r\n        });\r\n        return \"<div style=\\\"hover:cursor\\\" data-suggestion='\" + item.suggestion + \"' data-format='\" + item.format + \"' class=\\\"edq-global-intuitive-address-suggestion\\\">\" + suggestion + \"</div>\";\r\n    }\r\n    ;\r\n    var source = (function (term, response) {\r\n        try {\r\n            xhr.abort();\r\n        }\r\n        catch (e) { }\r\n        if (\"geolocation\" in navigator &&\r\n            EDQ_CONFIG().GLOBAL_INTUITIVE_USE_CURRENT_LOCATION &&\r\n            EDQ_CONFIG().GLOBAL_INTUITIVE_ISO3_COUNTRY === \"USA\") {\r\n            navigator.geolocation.getCurrentPosition(function (position) {\r\n                var lat = position.coords.latitude;\r\n                var lng = position.coords.longitude;\r\n                if (lat && lng) {\r\n                    EDQ_CONFIG().GLOBAL_INTUITIVE_LOCATION =\r\n                        lat + \",\" + lng;\r\n                }\r\n            });\r\n        }\r\n        xhr = EDQ.address.globalIntuitive.search({\r\n            query: term,\r\n            country: EDQ_CONFIG().GLOBAL_INTUITIVE_ISO3_COUNTRY || 'USA',\r\n            take: EDQ_CONFIG().GLOBAL_INTUITIVE_TAKE || 7,\r\n            dataset: EDQ_CONFIG().GLOBAL_INTUITIVE_DATASET || null,\r\n            location: EDQ_CONFIG().GLOBAL_INTUITIVE_LOCATION || null,\r\n            callback: function (data, error) {\r\n                try {\r\n                    response(data.results);\r\n                }\r\n                catch (e) {\r\n                }\r\n            }\r\n        });\r\n    });\r\n    /**\r\n     * @module EDQ.address\r\n     */\r\n    /**\r\n     * Activates global intuitive search\r\n     *\r\n     * @example @id=activate-global-intuitive-validation\r\n     *\r\n     * @name activateValidation\r\n     * @function\r\n     *\r\n     * @param {Element} element\r\n     *\r\n     * @returns {undefined}\r\n     */\r\n    EDQ.address.globalIntuitive.activateValidation = (function (element) {\r\n        new autocompletion_js_1.default({\r\n            selector: element,\r\n            delay: 0,\r\n            onSelect: onSelect,\r\n            renderItem: renderItem,\r\n            source: source\r\n        });\r\n    });\r\n    EDQ.address.globalIntuitive.activateValidation(GLOBAL_INTUITIVE_ELEMENT());\r\n}).call(this);\r\n\n\n//# sourceURL=webpack:///../src/global-intuitive-unicorn.ts?");

/***/ })

/******/ });